[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Headwater streamflow variability is amplified by drought",
    "section": "",
    "text": "1 Introduction\nThis book provides a visual story of the code used to support Baldock et al., “Headwater streamflow variability is amplified by drought”, part of the USGS Eco-Drought Project administered by the USGS Ecosystems Mission Area and Water Mission Area.\nProject team: Jeff Baldock, Jenn Fair, Ben Letcher, Robert Al-Chokhachy, Jason Dunham, and Clint Muhlfeld.\nSignificance: Headwater streams account for a majority of river networks worldwide and have a disproportionately large influence on the functioning of aquatic ecosystems. Headwater streams also support critical habitat for many species, including cold-water fishes, many of which are declining or at risk of extinction.\nProblem: Headwater streams are vastly underrepresented in streamflow monitoring networks, which place greater emphasis on mainstem rivers. As a result, less is known about how headwaters respond to changing water availability. Headwater streams therefore represent a blind spot in understanding flow regime variability and for assessing ecosystem vulnerability to changing climatic conditions, including increases in the frequency and severity of drought.\nQuestions:\n\nHow do streamflow regimes vary spatially in headwater stream networks?\nHow does this spatial variability change among years with climatic conditions indicative of drought?\nWhat is the value of reference gages for understanding drought-driven low flow conditions in headwaters?\n\n\nThis information is preliminary or provisional and is subject to revision. It is being provided to meet the need for timely best science. The information has not received final approval by the U.S. Geological Survey (USGS) and is provided on the condition that neither the USGS nor the U.S. Government shall be held liable for any damages resulting from the authorized or unauthorized use of the information.\n\n\nSession Information\n\n\n\n\n\nCode\nsessionInfo()\n\n\nR version 4.5.1 (2025-06-13 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n  LAPACK version 3.12.1\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/Denver\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.5.1    fastmap_1.2.0     cli_3.6.5        \n [5] tools_4.5.1       htmltools_0.5.8.1 rstudioapi_0.17.1 rmarkdown_2.29   \n [9] knitr_1.50        jsonlite_2.0.0    xfun_0.53         digest_0.6.37    \n[13] rlang_1.1.6       evaluate_1.0.5",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "GatherFlowClimateData.html",
    "href": "GatherFlowClimateData.html",
    "title": "2  Flow and Climate Data",
    "section": "",
    "text": "2.1 Site information\nPurpose: organize the streamflow data, previously collated into a single file, and conduct the hydroclimate analysis (data pulled from Knoben et al. 2018, Water Resources Research).\nView site information\nCode\nsiteinfo &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_SiteInformation.csv\")\ndatatable(siteinfo)\nMap sites\nCode\nsiteinfo_sp &lt;- st_as_sf(siteinfo, coords = c(\"long\", \"lat\"), crs = 4326)\nmapview(siteinfo_sp, zcol = \"designation\")\nPull focal sites\nCode\nfocalsites &lt;- siteinfo_sp %&gt;% \n  filter(site_name %in% c(\"West Brook NWIS\", \"West Brook Lower\", \"Mitchell Brook\", \"Jimmy Brook\", \"Obear Brook Lower\", \"West Brook Upper\", \"West Brook Reservoir\", \"Sanderson Brook\", \"Avery Brook\", \"West Whately Brook\", \"South River Conway NWIS\",\n                          \n                          \"Paine Run 10\", \"Paine Run 08\", \"Paine Run 07\", \"Paine Run 06\", \"Paine Run 02\", \"Paine Run 01\", \"South River Harriston NWIS\",\n                          \n                          \"Staunton River 10\", \"Staunton River 09\", \"Staunton River 07\", \"Staunton River 06\", \"Staunton River 03\", \"Staunton River 02\", \"Rapidan River NWIS\",\n                          \n                          \"BigCreekLower\", \"LangfordCreekLower\", \"LangfordCreekUpper\", \"Big Creek NWIS\", \"BigCreekUpper\", \"HallowattCreekLower\", \"NicolaCreek\", \"WernerCreek\", \"Hallowat Creek NWIS\", \"CoalCreekLower\", \"CycloneCreekLower\", \"CycloneCreekMiddle\", \"CycloneCreekUpper\", \"CoalCreekMiddle\", \"CoalCreekNorth\", \"CoalCreekHeadwaters\", \"McGeeCreekLower\", \"McGeeCreekTrib\", \"McGeeCreekUpper\", \"North Fork Flathead River NWIS\",\n                          \n                          \"Shields River Valley Ranch\", \"Deep Creek\", \"Crandall Creek\", \"Buck Creek\", \"Dugout Creek\", \"Shields River ab Dugout\", \"Lodgepole Creek\", \"EF Duck Creek be HF\", \"EF Duck Creek ab HF\", \"Henrys Fork\", \"Yellowstone River Livingston NWIS\",\n                          \n                          \"Spread Creek Dam\", \"Rock Creek\", \"NF Spread Creek Lower\", \"NF Spread Creek Upper\", \"Grizzly Creek\", \"SF Spread Creek Lower\", \"Grouse Creek\", \"SF Spread Creek Upper\", \"Leidy Creek Mouth\", \"Pacific Creek at Moran NWIS\",\n                          \n                          \"Fish Creek NWIS\", \"Donner Blitzen ab Fish NWIS\", \"Donner Blitzen nr Burnt Car NWIS\", \"Donner Blitzen ab Indian NWIS\", \"Donner Blitzen River nr Frenchglen NWIS\")) %&gt;%\n  mutate(designation = ifelse(designation == \"big\", \"big\", \"little\"))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Flow and Climate Data</span>"
    ]
  },
  {
    "objectID": "GatherFlowClimateData.html#headwater-data",
    "href": "GatherFlowClimateData.html#headwater-data",
    "title": "2  Flow and Climate Data",
    "section": "2.2 Headwater data",
    "text": "2.2 Headwater data\nLittle g daily data\n\n\nCode\n# flow/yield (and temp) data \ndat &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_FlowTempData_DailyWeekly.csv\") %&gt;%\n  mutate(site_name = dplyr::recode(site_name, \"Leidy Creek Mouth NWIS\" = \"Leidy Creek Mouth\", \"SF Spread Creek Lower NWIS\" = \"SF Spread Creek Lower\", \"Dugout Creek NWIS\" = \"Dugout Creek\", \"Shields River ab Smith NWIS\" = \"Shields River Valley Ranch\")) %&gt;%\n  filter(!site_name %in% c(\"Avery Brook NWIS\", \"West Brook 0\", \"BigCreekMiddle\",                # drop co-located sites\n                           \"South River Conway NWIS\", \"North Fork Flathead River NWIS\",         # drop big Gs\n                           \"Pacific Creek at Moran NWIS\", \"Shields River nr Livingston NWIS\",   # drop big Gs\n                           \"Donner Blitzen River nr Frenchglen NWIS\",                           # drop big Gs\n                           \"WoundedBuckCreek\")) %&gt;%                                             # drop little g outside of focal basin\n  group_by(site_name, basin, subbasin, region, date) %&gt;%\n  summarize(flow_mean = mean(flow_mean),\n            tempc_mean = mean(tempc_mean),\n            Yield_mm = mean(Yield_mm),\n            Yield_filled_mm = mean(Yield_filled_mm)) %&gt;%\n  ungroup()\n\n# add water/climate year variables and fill missing dates\ndat &lt;- fill_missing_dates(dat, dates = date, groups = site_name)\ndat &lt;- add_date_variables(dat, dates = date, water_year_start = 10)\n\n\nClean and bind little g data (for each basin, restrict to time period for which data quality/availability is ~consistent)\n\n\nCode\ndat_clean &lt;- bind_rows(\n  dat %&gt;% filter(site_name %in% unlist(siteinfo %&gt;% filter(subbasin == \"West Brook\") %&gt;% select(site_name)), year(date) &gt;= 2020, date &lt;= date(\"2025-01-03\")) %&gt;% \n    mutate(Yield_filled_mm = ifelse(site_name == \"West Brook Upper\" & date &gt; date(\"2024-10-06\"), NA, Yield_filled_mm)) %&gt;%\n    mutate(Yield_filled_mm = ifelse(site_name == \"Mitchell Brook\" & date &gt; date(\"2021-02-28\") & date &lt; date(\"2021-03-26\"), NA, Yield_filled_mm)) %&gt;% \n    mutate(Yield_filled_mm = ifelse(site_name == \"Mitchell Brook\" & date &gt; date(\"2021-11-01\") & date &lt; date(\"2022-05-01\"), NA, Yield_filled_mm)) %&gt;% \n    mutate(Yield_filled_mm = ifelse(site_name == \"Jimmy Brook\" & date &gt; date(\"2024-12-10\"), NA, Yield_filled_mm)) %&gt;% \n    mutate(subbasin = \"West Brook\"),\n  \n  dat %&gt;% filter(site_name %in% unlist(siteinfo %&gt;% filter(subbasin == \"Paine Run\") %&gt;% select(site_name)), date &gt;= as_date(\"2018-11-07\"), date &lt;= as_date(\"2023-05-15\")) %&gt;% mutate(subbasin = \"Paine Run\"),\n  \n  dat %&gt;% filter(site_name %in% unlist(siteinfo %&gt;% filter(subbasin == \"Staunton River\") %&gt;% select(site_name)), date &gt;= as_date(\"2018-11-07\"), date &lt;= as_date(\"2022-10-19\")) %&gt;% mutate(subbasin = \"Staunton River\"),\n  \n  dat %&gt;% filter(site_name %in% c(unlist(siteinfo %&gt;% filter(subbasin == \"Big Creek\") %&gt;% select(site_name)), \"North Fork Flathead River NWIS\"), date &gt;= date(\"2018-08-08\"), date &lt;= date(\"2023-08-03\"), site_name != \"SkookoleelCreek\", Yield_filled_mm &gt; 0)  %&gt;% mutate(subbasin = \"Big Creek\"),\n  \n  dat %&gt;% filter(site_name %in% c(unlist(siteinfo %&gt;% filter(subbasin == \"Coal Creek\") %&gt;% select(site_name)), \"North Fork Flathead River NWIS\"), date &gt;= date(\"2018-07-29\"), date &lt;= date(\"2023-08-03\")) %&gt;% mutate(subbasin = \"Coal Creek\"),\n  \n  dat %&gt;% filter(site_name %in% c(unlist(siteinfo %&gt;% filter(subbasin == \"McGee Creek\") %&gt;% select(site_name)), \"North Fork Flathead River NWIS\"), date &gt;= date(\"2017-07-30\"), date &lt;= date(\"2023-12-11\")) %&gt;% mutate(subbasin = \"McGee Creek\"),\n  \n  dat %&gt;% filter(subbasin == \"Snake River\", date &gt;= date(\"2016-04-01\"), date &lt;= date(\"2023-10-03\"), site_name != \"Leidy Creek Upper\") %&gt;% mutate(subbasin = \"Snake River\"),\n  \n  dat %&gt;% filter(subbasin == \"Shields River\", date &gt;= date(\"2016-04-01\"), date &lt;= date(\"2023-12-31\"), site_name != \"Brackett Creek\") %&gt;% \n  mutate(logYield = log10(Yield_filled_mm)) %&gt;% mutate(subbasin = \"Shields River\"),\n  \n  dat %&gt;% filter(subbasin == \"Duck Creek\", date &gt;= date(\"2015-04-01\"), date &lt;= date(\"2023-12-31\")) %&gt;% mutate(subbasin = \"Duck Creek\"),\n  \n  dat %&gt;% filter(subbasin == \"Donner Blitzen\", date &gt;= as_date(\"2019-04-23\"), date &lt;= as_date(\"2022-12-31\"), !site_name %in% c(\"Indian Creek NWIS\", \"Little Blizten River NWIS\")) %&gt;% mutate(subbasin = \"Donner Blitzen\")\n) %&gt;%\n  filter(Yield_filled_mm &gt; 0) %&gt;%\n  mutate(logYield = log10(Yield_filled_mm), \n         designation = \"little\", \n         doy_calendar = yday(date)) %&gt;%\n  select(-Yield_mm) %&gt;%\n  rename(Yield_mm = Yield_filled_mm)\nhead(dat_clean)\n\n\n# A tibble: 6 × 16\n  site_name   basin     subbasin region date       flow_mean tempc_mean Yield_mm\n  &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;  &lt;date&gt;         &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n1 Avery Brook West Bro… West Br… Mass   2020-01-08      5.96     0.594      1.99\n2 Avery Brook West Bro… West Br… Mass   2020-01-09      4.81     0.0336     1.61\n3 Avery Brook West Bro… West Br… Mass   2020-01-10      4.88     0.363      1.63\n4 Avery Brook West Bro… West Br… Mass   2020-01-11      6.43     1.77       2.15\n5 Avery Brook West Bro… West Br… Mass   2020-01-12     21.2      2.81       7.08\n6 Avery Brook West Bro… West Br… Mass   2020-01-13     14.3      1.92       4.78\n# ℹ 8 more variables: CalendarYear &lt;dbl&gt;, Month &lt;dbl&gt;, MonthName &lt;fct&gt;,\n#   WaterYear &lt;dbl&gt;, DayofYear &lt;dbl&gt;, logYield &lt;dbl&gt;, designation &lt;chr&gt;,\n#   doy_calendar &lt;dbl&gt;\n\n\nView streamflow data availability by subbasin and site\n\nWest BrookPaine RunStaunton RiverBig CreekSnake RiverYellowstone RiverDonner und Blitzen River\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite to file\n\n\nCode\nwrite_csv(dat_clean, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/LittleG_data_clean.csv\")\n\n\nDistribution of headwater catchment size by basin\n\n\nCode\np1 &lt;- siteinfo %&gt;% \n  filter(site_name %in% unique(dat_clean$site_name)) %&gt;% \n  mutate(area_sqkm = area_sqmi*2.58999,\n         basin = factor(basin, levels = c(\"Donner Blitzen\", \"Snake River\", \"Flathead\", \"Shields River\", \n                                          \"Paine Run\", \"Staunton River\", \"West Brook\"))) %&gt;%\n  mutate(basin = recode(basin, \"Shields River\" = \"Yellowstone River\", \"Flathead\" = \"Flathead River\", \"Donner Blitzen\" = \"Donner und Blitzen River\")) %&gt;%\n  ggplot() + \n  geom_boxplot(aes(y = basin, x = area_sqkm, fill = basin)) + scale_x_log10() +\n  geom_point(aes(y = basin, x = area_sqkm)) +\n  theme_bw() + theme(panel.grid = element_blank(), legend.position = \"none\", axis.text = element_text(color = \"black\")) + \n  xlab(expression(paste(\"Catchment area, km\"^2))) + ylab(\"Basin\") +\n  scale_fill_manual(values = rev(brewer.pal(7, \"Set2\")[c(1,2,3,5,4,6,7)]))\np1 \n\n\n\n\n\n\n\n\n\nCode\n# jpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/CatchmentSize_boxplot.jpg\", width = 5, height = 3, units = \"in\", res = 1000)\n# p1\n# dev.off()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Flow and Climate Data</span>"
    ]
  },
  {
    "objectID": "GatherFlowClimateData.html#reference-data",
    "href": "GatherFlowClimateData.html#reference-data",
    "title": "2  Flow and Climate Data",
    "section": "2.3 Reference data",
    "text": "2.3 Reference data\nLoad big/super G data\n\n\nCode\nnwis_daily &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_NWIS_FlowTempData_Raw_Daily.csv\") %&gt;%\n  filter(designation == \"big\", \n         year(date) &gt;= 1970,\n         site_name != \"Shields River nr Livingston NWIS\") %&gt;%\n  mutate(flowcfs = ifelse(site_name == \"Rapidan River NWIS\" & date &gt; date(\"1995-06-26\") & date &lt; date(\"1995-07-01\"), NA, flowcfs),\n         flow_mean_cms = flowcfs*0.02831683199881, \n         area_sqkm = area_sqmi*2.58999)\n\n# sites\nsites &lt;- unique(nwis_daily$site_name)\n\n# site-specific basin area in square km\nbasinarea &lt;- nwis_daily %&gt;% filter(!is.na(site_id)) %&gt;% group_by(site_name) %&gt;% summarize(area_sqkm = unique(area_sqkm))\n\n# calculate yield\nyield_list &lt;- list()\nfor (i in 1:length(sites)) {\n  d &lt;- nwis_daily %&gt;% filter(site_name == sites[i])\n  ba &lt;- unlist(basinarea %&gt;% filter(site_name == sites[i]) %&gt;% select(area_sqkm))\n  yield_list[[i]] &lt;-  add_daily_yield(data = d, values = flow_mean_cms, basin_area = as.numeric(ba))\n}\nnwis_daily_wyield &lt;- do.call(rbind, yield_list)\n\ndat_clean_big &lt;- nwis_daily_wyield %&gt;% \n  select(site_name, basin, subbasin, region, date, Yield_mm, tempc, flowcfs) %&gt;% \n  mutate(logYield = log10(Yield_mm), doy_calendar = yday(date)) %&gt;%\n  rename(tempc_mean = tempc, flow_mean = flowcfs)\n\n# add water/climate year variables and fill missing dates\ndat_clean_big &lt;- fill_missing_dates(dat_clean_big, dates = date, groups = site_name)\ndat_clean_big &lt;- add_date_variables(dat_clean_big, dates = date, water_year_start = 10)\n\nhead(dat_clean_big)\n\n\n# A tibble: 6 × 15\n  site_name       basin subbasin region date       Yield_mm tempc_mean flow_mean\n  &lt;chr&gt;           &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;  &lt;date&gt;        &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;\n1 South River Co… West… West Br… Mass   1970-01-01     1.81         NA        46\n2 South River Co… West… West Br… Mass   1970-01-02     1.69         NA        43\n3 South River Co… West… West Br… Mass   1970-01-03     1.61         NA        41\n4 South River Co… West… West Br… Mass   1970-01-04     1.53         NA        39\n5 South River Co… West… West Br… Mass   1970-01-05     1.49         NA        38\n6 South River Co… West… West Br… Mass   1970-01-06     1.49         NA        38\n# ℹ 7 more variables: logYield &lt;dbl&gt;, doy_calendar &lt;dbl&gt;, CalendarYear &lt;dbl&gt;,\n#   Month &lt;dbl&gt;, MonthName &lt;fct&gt;, WaterYear &lt;dbl&gt;, DayofYear &lt;dbl&gt;\n\n\nWrite to file\n\n\nCode\nwrite_csv(dat_clean_big, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/BigG_data_clean.csv\")\n\n\nView big G streamflow time series data\n\n\nCode\ndat_clean_big %&gt;% ggplot() + geom_line(aes(x = date, y = logYield)) + facet_wrap(~site_name, nrow = 8) + theme_bw()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Flow and Climate Data</span>"
    ]
  },
  {
    "objectID": "GatherFlowClimateData.html#water-availability",
    "href": "GatherFlowClimateData.html#water-availability",
    "title": "2  Flow and Climate Data",
    "section": "2.4 Water availability",
    "text": "2.4 Water availability\nDownload Daymet precip data and summarize by water year\n\n\nCode\n# big G site lat/long\nmysites &lt;- nwis_daily %&gt;% group_by(site_name, basin, subbasin, region) %&gt;% summarize(lat = unique(lat), long = unique(long)) %&gt;% ungroup()\n\n# download point location Daymet data\nclimlist &lt;- vector(\"list\", length = dim(mysites)[1])\nfor (i in 1:dim(mysites)[1]) {\n  clim &lt;- download_daymet(site = mysites$site_name[i], lat = mysites$lat[i], lon = mysites$long[i], start = 1980, end = 2024, internal = T)\n  climlist[[i]] &lt;- tibble(clim$data) %&gt;% \n    mutate(air_temp_mean = (tmax..deg.c. + tmin..deg.c.)/2, \n           date = as.Date(paste(year, yday, sep = \"-\"), \"%Y-%j\"),\n           site_name = mysites$site_name[i]) %&gt;%\n    select(12,2,11,10,4,6) %&gt;% rename(precip_mmday = 5, swe_kgm2 = 6)\n}\n\n# combine and add water years\nclimdf &lt;- do.call(rbind, climlist) %&gt;% left_join(mysites) %&gt;% mutate(year = year(date))\nclimdf &lt;- add_date_variables(climdf, dates = date, water_year_start = 10)\n\n# calculate total annual precipitation in mm, by site and water year\nclimdf_summ &lt;- climdf %&gt;% \n  group_by(site_name, basin, subbasin, region, WaterYear) %&gt;% \n  summarize(precip_total = sum(precip_mmday), sampsize = n()) %&gt;% \n  mutate(precip_total_z = scale(precip_total)[,1]) %&gt;%\n  ungroup() %&gt;% \n  filter(sampsize &gt;= 350)\n\n\nWrite to file(s)\n\n\nCode\nwrite_csv(climdf, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/Daymet_climate.csv\")\n\nwrite_csv(climdf_summ, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/Daymet_climate_summary.csv\")\n\n\nCalculate annual water availability at reference gage as sum of daily yield values…retain only years with &gt;95% data coverage (at least 350 days)\n\n\nCode\nwateravail_sum &lt;- dat_clean_big %&gt;% \n  filter(!is.na(Yield_mm), Month %in% c(7:9)) %&gt;%\n  group_by(basin, site_name, WaterYear) %&gt;% \n  summarize(sampsize = n(), totalyield_sum = sum(Yield_mm, na.rm = TRUE)) %&gt;% \n  mutate(totalyield_sum_z = scale(totalyield_sum)[,1]) %&gt;%\n  ungroup() %&gt;%\n  filter(sampsize &gt;= 85) %&gt;% \n  complete(basin, WaterYear = 1971:2024, fill = list(sampsize = NA, totalyield = NA)) %&gt;%\n  select(-sampsize)\n\nwateravail &lt;- dat_clean_big %&gt;% \n  filter(!is.na(Yield_mm)) %&gt;%\n  group_by(basin, site_name, WaterYear) %&gt;% \n  summarize(sampsize = n(), totalyield = sum(Yield_mm, na.rm = TRUE)) %&gt;% \n  mutate(totalyield_z = scale(totalyield)[,1]) %&gt;%\n  ungroup() %&gt;%\n  filter(sampsize &gt;= 350) %&gt;% \n  complete(basin, WaterYear = 1971:2024, fill = list(sampsize = NA, totalyield = NA)) %&gt;%\n  left_join(wateravail_sum)\n\n# get range of years for little g data\ndaterange &lt;- dat_clean %&gt;% group_by(basin) %&gt;% summarize(minyear = year(min(date)), maxyear = year(max(date)))\n\n# spread ecod years\nmylist &lt;- vector(\"list\", length = dim(daterange)[1])\nfor (i in 1:dim(daterange)[1]) {\n  mylist[[i]] &lt;- tibble(basin = daterange$basin[i], WaterYear = seq(from = daterange$minyear[i], to = daterange$maxyear[i], by = 1))\n}\nyrdf &lt;- do.call(rbind, mylist) %&gt;% mutate(ecodyr = \"yes\")\n\n\nWrite water availability to file\n\n\nCode\nwrite_csv(wateravail, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/BigG_wateravailability_annual.csv\")\n\n\nView time series and scatter plots of reference gage water availability (total annual yield, sum of daily values, black lines) and precipitation (total annual precip, blues lines). Note that the panel labels indicate basins, not NWIS gage names. Conclusion: water availability calculated from precipitation and streamflow datasets are redundant.\n\nRaw valuesz-scoresscatter\n\n\n\n\nCode\nggplot() + \n  geom_rect(data = daterange, aes(xmin = minyear-0.5, xmax = maxyear+0.5, ymin = -Inf, ymax = +Inf), fill = \"grey\") +\n  geom_line(data = wateravail, aes(x = WaterYear, y = totalyield), linewidth = 1) + \n  geom_line(data = climdf_summ, aes(x = WaterYear, y = precip_total), linewidth = 0.5, col = \"blue\") +\n  facet_wrap(~basin) + \n  xlab(\"Water year\") + ylab(\"Total annual yield (mm) / Total annual precipitation (mm)\") +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot() + \n  geom_rect(data = daterange, aes(xmin = minyear-0.5, xmax = maxyear+0.5, ymin = -Inf, ymax = +Inf), fill = \"grey\") +\n  geom_line(data = wateravail, aes(x = WaterYear, y = totalyield_z), linewidth = 1) + \n  geom_line(data = climdf_summ, aes(x = WaterYear, y = precip_total_z), linewidth = 0.5, col = \"blue\") +\n  facet_wrap(~basin) + \n  xlab(\"Water year\") + ylab(\"Total annual yield (scaled) / Total annual precipitation (scaled)\") +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nwateravail %&gt;% select(-sampsize) %&gt;% left_join(climdf_summ %&gt;% select(-sampsize)) %&gt;% left_join(yrdf) %&gt;%\n  ggplot(aes(x = precip_total_z, y = totalyield_z)) +\n  geom_point(aes(color = ecodyr)) +\n  facet_wrap(~basin) + \n  xlab(\"Total annual precipitation (scaled)\") + ylab(\"Total annual yield (scaled)\") +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\") +\n  stat_cor(method = \"pearson\", aes(label = ..r.label..))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Flow and Climate Data</span>"
    ]
  },
  {
    "objectID": "GatherFlowClimateData.html#hydroclimatic-context",
    "href": "GatherFlowClimateData.html#hydroclimatic-context",
    "title": "2  Flow and Climate Data",
    "section": "2.5 Hydroclimatic context",
    "text": "2.5 Hydroclimatic context\nDefine hydroclimatic context of focal sites sensu Knoben et al. (2018, Water Resources Research)\n\n2.5.1 Global and focal sites\nLoad the NETCDF climate data (downloaded from Knoben et al. 2018), convert to usable/raster format, then plot 3-D scatter of global values\n\n\nCode\n# Climate classification data loading and plotting in R\n# Equivalent to the MATLAB script provided by Knoben et al.\n\nlibrary(ncdf4)      # for reading NetCDF\nlibrary(terra)      # for raster handling\nlibrary(ggplot2)    # for plotting\nlibrary(rasterVis)  # for nice levelplots of rasters\n# library(rgdal)      # for geotiff/geoshow equivalents\nlibrary(rgl)\n\n# 1. Data import from NetCDF file\nfilename &lt;- \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Spatial data/HydrologicClimateClassification.nc\"\n\n# Open NetCDF\nnc &lt;- nc_open(filename)\nprint(nc)   # equivalent to MATLAB ncdisp\n\n\nFile C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Spatial data/HydrologicClimateClassification.nc (NC_FORMAT_NETCDF4_CLASSIC):\n\n     11 variables (excluding dimension variables):\n        double grid_aridity_Im[lat,lon]   (Chunking: [360,720])  \n        double grid_seasonalityOfAridity_Imr[lat,lon]   (Chunking: [360,720])  \n        double grid_annualSnowFraction_fs[lat,lon]   (Chunking: [360,720])  \n        double grid_latitude[lat,lon]   (Chunking: [360,720])  \n        double grid_longitude[lat,lon]   (Chunking: [360,720])  \n        double array_aridity_Im[length,width]   (Chunking: [67214,1])  \n        double array_seasonalityOfAridity_Imr[length,width]   (Chunking: [67214,1])  \n        double array_annualSnowFraction_fs[length,width]   (Chunking: [67214,1])  \n        double array_latitude[length,width]   (Chunking: [67214,1])  \n        double array_longitude[length,width]   (Chunking: [67214,1])  \n        double array_rgbColour[length,rgb]   (Chunking: [67214,3])  \n\n     5 dimensions:\n        lat  Size:360 (no dimvar)\n        lon  Size:720 (no dimvar)\n        length  Size:67214 (no dimvar)\n        width  Size:1 (no dimvar)\n        rgb  Size:3 (no dimvar)\n\n\nCode\n# Variable names (must match those in the file)\nvarNames &lt;- c(\n  \"grid_aridity_Im\",\n  \"grid_seasonalityOfAridity_Imr\",\n  \"grid_annualSnowFraction_fs\",\n  \"grid_latitude\",\n  \"grid_longitude\",\n  \"array_aridity_Im\",\n  \"array_seasonalityOfAridity_Imr\",\n  \"array_annualSnowFraction_fs\",\n  \"array_latitude\",\n  \"array_longitude\",\n  \"array_rgbColour\"\n)\n\n# Extract variables into a list (like a struct in MATLAB)\nClimateClassification &lt;- lapply(varNames, function(v) ncvar_get(nc, v))\nnames(ClimateClassification) &lt;- varNames\n\nnc_close(nc)\n\n# 2a. Example maps of gridded climate indices ----------------------------\n\n# Wrap into SpatRaster objects (terra) for plotting\ngrid_Im  &lt;- rast(ClimateClassification$grid_aridity_Im)\ngrid_Imr &lt;- rast(ClimateClassification$grid_seasonalityOfAridity_Imr)\ngrid_fs  &lt;- rast(ClimateClassification$grid_annualSnowFraction_fs)\n\n# Assign CRS and extent (need to use lat/lon arrays)\nlat &lt;- ClimateClassification$grid_latitude\nlon &lt;- ClimateClassification$grid_longitude\next(grid_Im) &lt;- c(min(lon), max(lon), min(lat), max(lat))\ncrs(grid_Im) &lt;- \"EPSG:4326\"\next(grid_Imr) &lt;- ext(grid_Im); crs(grid_Imr) &lt;- \"EPSG:4326\"\next(grid_fs)  &lt;- ext(grid_Im); crs(grid_fs)  &lt;- \"EPSG:4326\"\n\n# correct orientation\ngrid_Im  &lt;- flip(grid_Im, direction = \"vertical\")\ngrid_Imr &lt;- flip(grid_Imr, direction = \"vertical\")\ngrid_fs  &lt;- flip(grid_fs, direction = \"vertical\")\n\n# Plot rasters\nlevelplot(grid_Im, margin = FALSE, main = \"Aridity index I_m\",\n          at = seq(-1, 1, 0.1), col.regions = viridis::viridis(20))\n\n\n\n\n\n\n\n\n\nCode\nlevelplot(grid_Imr, margin = FALSE, main = \"Aridity seasonality index I_{m,r}\",\n          at = seq(0, 2, 0.1), col.regions = viridis::viridis(20))\n\n\n\n\n\n\n\n\n\nCode\nlevelplot(grid_fs, margin = FALSE, main = \"Fraction precipitation as snow f_s\",\n          at = seq(0, 1, 0.05), col.regions = viridis::viridis(20))\n\n\n\n\n\n\n\n\n\nCode\n# 2b. Combined climate map -----------------------------------------------\n\ndf_array &lt;- data.frame(\n  lon = ClimateClassification$array_longitude,\n  lat = ClimateClassification$array_latitude,\n  col = rgb(\n    ClimateClassification$array_rgbColour[,1],\n    ClimateClassification$array_rgbColour[,2],\n    ClimateClassification$array_rgbColour[,3],\n    maxColorValue = 1\n  )\n)\n\nggplot(df_array, aes(x = lon, y = lat, color = col)) +\n  geom_point(size = 0.5) +\n  scale_color_identity() +\n  coord_equal() +\n  theme_minimal() +\n  labs(title = \"Climatic gradients from climate indices\")\n\n\n\n\n\n\n\n\n\nCode\n# 2c. RGB colour legend (3D scatterplot) ---------------------------------\n\ndf_legend &lt;- data.frame(\n  Im  = ClimateClassification$array_aridity_Im,\n  Imr = ClimateClassification$array_seasonalityOfAridity_Imr,\n  fs  = ClimateClassification$array_annualSnowFraction_fs,\n  col = df_array$col\n)\n\n# Using plotly for interactive 3D equivalent of MATLAB scatter3\nlibrary(plotly)\nlibrary(orca)\nplot_ly(df_legend, x = ~Im, y = ~Imr, z = ~fs,\n        type = \"scatter3d\", mode = \"markers\", \n        marker = list(color = df_legend$col, size = 2, opacity = 0.5)) %&gt;%\n  layout(scene = list(\n    xaxis = list(title = \"Aridity\"),\n    yaxis = list(title = \"Seasonality\"),\n    zaxis = list(title = \"Snow fraction\")\n  ))\n\n\n\n\n\n\nCode\n# plot_ly(df_legend, x = ~Im, y = ~Imr, z = ~fs,\n#         type = \"scatter3d\", mode = \"markers\", \n#         marker = list(color = \"grey\", size = 2, opacity = 0.5)) %&gt;%\n#   layout(scene = list(\n#     xaxis = list(title = \"Aridity\"),\n#     yaxis = list(title = \"Seasonality\"),\n#     zaxis = list(title = \"Snow fraction\")\n#   ))\n\n# 2d. GeoTIFF plot of the main map ---------------------------------------\n\n# geofile &lt;- \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Spatial data/ClimateClassification_mainMap_geoReferenced.tif\"\n# map_rast &lt;- rast(geofile)\n# \n# plot(map_rast, main = \"Climatic gradients from climate indices\")\n\n\nStack rasters and extract values for focal sites\n\n\nCode\n# combine the climate variables into a raster stack\n# add 1 to Im to force positive (needed for expansion factors)\nclimate_stack &lt;- c(grid_Im+1, grid_Imr, grid_fs)\nnames(climate_stack) &lt;- c(\"Im\", \"Imr\", \"fs\")\n\n\n# convert to tibble\nclimate_df &lt;- tidyterra::as_tibble(climate_stack)\n# hydroclidf_noNA &lt;- as_tibble(hydrocli) %&gt;% filter(!is.na(aridity))\nsummary(climate_df)\n\n\n       Im              Imr               fs        \n Min.   :0.000    Min.   :0.000    Min.   :0.000   \n 1st Qu.:0.360    1st Qu.:0.736    1st Qu.:0.000   \n Median :0.809    Median :1.270    Median :0.044   \n Mean   :0.805    Mean   :1.110    Mean   :0.200   \n 3rd Qu.:1.222    3rd Qu.:1.526    3rd Qu.:0.361   \n Max.   :1.880    Max.   :2.000    Max.   :1.000   \n NA's   :191986   NA's   :191986   NA's   :191986  \n\n\nCode\n# get site location data\nsitevec &lt;- vect(focalsites)\n\n# extract climate data for each site\nextracted_vals &lt;- extract(climate_stack, sitevec)\nrange(extracted_vals$Im)\n\n\n[1] 0.217410 1.304555\n\n\nCode\nrange(extracted_vals$Imr)\n\n\n[1] 0.6266317 1.5323583\n\n\nCode\nrange(extracted_vals$fs)\n\n\n[1] 0.0000000 0.4364088\n\n\nGet centroid from base hull (for envelope)\n\n\nCode\nhull &lt;- convhulln(extracted_vals[,-1])\nhull_vertices &lt;- extracted_vals[unique(as.vector(hull)), ]\ncentroid &lt;- colMeans(hull_vertices[,-1])\n\n\n\n\n2.5.2 Hydroclimatic envelope\nSubset global climate data using 3D convex hull fit to focal sites, with different percentage expansion factors.\n\n\nCode\nscale_factor &lt;- seq(from = 1, to = 2, by = 0.1)\nnew_layer_list_raw &lt;- list()\nnew_layer_list &lt;- list()\n\nfor (i in 1:length(scale_factor)) {\n  # Expand all original points relative to centroid\n  pts_expanded &lt;- sweep(sweep(extracted_vals[,-1], 2, centroid, \"-\") * scale_factor[i], 2, centroid, \"+\")\n  # recompute convex hull\n  hull_expanded &lt;- geometry::convhulln(pts_expanded)\n  # subset points/raster cells\n  points_in_hull &lt;- geometry::inhulln(hull_expanded, as.matrix(climate_df))\n  points_in_hull_num &lt;- as.numeric(points_in_hull)\n  # create layer and save in list (for 3-d scatterplots and hulls)\n  new_layer &lt;- rast(climate_stack[[1]], vals = points_in_hull_num)\n  names(new_layer) &lt;- paste(\"expand_\", scale_factor[i], sep = \"\")\n  new_layer_list_raw[[i]] &lt;- new_layer\n  # for mapping, we need to set the 0's (cells not in hydroclimate zone) to NA\n  points_in_hull_num[points_in_hull_num == 0] &lt;- NA\n  # create layer and save in list (for mapping)\n  new_layer &lt;- rast(climate_stack[[1]], vals = points_in_hull_num)\n  names(new_layer) &lt;- paste(\"expand_\", scale_factor[i], sep = \"\")\n  new_layer_list[[i]] &lt;- new_layer\n}\n\n\nDraw the map: global distribution of focal hydroclimatic conditions\n\n\nCode\nmypal &lt;- hcl.colors(length(scale_factor), palette = \"Emrld\")\nmaps::map(\"world\", col=\"grey\", fill=TRUE, lwd = 0.2, mar = c(0,0,0,5))\n# box()\nfor (i in rev(1:length(scale_factor))) {\n  plot(new_layer_list[[i]], add = TRUE, col = mypal[i], legend = FALSE)\n}\nmaps::map(\"world\", col = NA, fill=TRUE, add = TRUE, lwd = 0.2, mar = c(0,0,0,5))\nlegend(\"right\", legend = scale_factor, fill = mypal, title = \"Hydroclimatic\\nenvelope\\n(exp. factor)\", bty = \"n\", xpd = TRUE, inset = c(-0.05,0), cex = 0.8)\n\n\n\n\n\n\n\n\n\nWrite to file\n\n\nCode\n# color palette\nmypal &lt;- hcl.colors(length(scale_factor), palette = \"Emrld\")\n\n# write plot to file\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/Fig1_WorldMap_ClimateContext_REDO.jpg\", width = 8, height = 4, units = \"in\", res = 1000)\n# par(mar = c(0,0,0,10), xpd = TRUE)\nmaps::map(\"world\", col=\"grey\", fill=TRUE, lwd = 0.2, mar = c(0,0,0,5))\n# box()\nfor (i in rev(1:length(scale_factor))) {\n  plot(new_layer_list[[i]], add = TRUE, col = mypal[i], legend = FALSE)\n}\nmaps::map(\"world\", col = NA, fill=TRUE, add = TRUE, lwd = 0.2, mar = c(0,0,0,5))\nlegend(\"right\", legend = scale_factor, fill = mypal, title = \"Hydroclimatic\\nenvelope\\n(exp. factor)\", bty = \"n\", xpd = TRUE, inset = c(-0.05,0), cex = 0.8)\ndev.off()\n\n\nShow hydroclimatic envelope in 3D space\n\n\nCode\n# define color palette\nmycols &lt;- brewer.pal(7, \"Set2\")\ncoltib &lt;- tibble(basin = c(\"West Brook\", \"Staunton River\", \"Paine Run\", \"Flathead River\", \"Yellowstone River\", \"Snake River\", \"Donner und Blitzen River\"),\n                 color = brewer.pal(7, \"Set2\"))\n\n# reconfigure extracted values (focal sites)\nextracted_vals2 &lt;- tibble(extracted_vals) %&gt;%\n  mutate(basin = recode(focalsites$basin, \"Shields River\" = \"Yellowstone River\", \"Flathead\" = \"Flathead River\", \"Donner Blitzen\" = \"Donner und Blitzen River\")) %&gt;%\n  left_join(coltib) %&gt;%\n  mutate(Im = Im - 1)\n\n# color points in hull, expansion factor = 1.0\nmylayer &lt;- new_layer_list_raw[[1]]\nnames(mylayer) &lt;- \"myhc\"\nhydroclidf_1 &lt;- as_tibble(c(climate_stack, mylayer)) %&gt;%\n  filter(myhc == 1) %&gt;% mutate(Im = Im-1)\n\n# color points in hull, expansion factor = 1.5\nmylayer &lt;- new_layer_list_raw[[11]]\nnames(mylayer) &lt;- \"myhc\"\nhydroclidf_2 &lt;- as_tibble(c(climate_stack, mylayer)) %&gt;%\n  filter(myhc == 1) %&gt;% mutate(Im = Im-1)\n\n\n# Start with the base scatter of all points\np &lt;- plot_ly() %&gt;%\n  add_markers(\n    data = df_legend,\n    x = ~Im, y = ~Imr, z = ~fs,\n    marker = list(size = 1, opacity = 0.2, color = \"grey\"),\n    name = \"All points\"\n  ) %&gt;%\n  #Add convex hull mesh\n  # add_trace(\n  #   type = \"mesh3d\",\n  #   x = pts[hull,1], y = pts[hull,2], z = pts[hull,3],\n  #   i = hull[,1]-1, j = hull[,2]-1, k = hull[,3]-1,  # zero-based indexing\n  #   opacity = 0.2,\n  #   color = I(\"red\"),\n  #   name = \"Convex hull\"\n  # ) %&gt;%\n  # Add highlighted global points in hull\n  add_markers(\n    data = hydroclidf_1,\n    x = ~Im, y = ~Imr, z = ~fs,\n    marker = list(size = 1, opacity = 0.3, color = \"black\"),\n    name = \"All points\"\n  ) %&gt;%\n  #Add highlighted subset of points with different style\n  add_markers(\n    data = extracted_vals2,\n    x = ~Im, y = ~Imr, z = ~fs,\n    marker = list(size = 5, opacity = 0.8, color = extracted_vals2$color, symbol = \"circle\"),\n    name = \"Highlighted points\"\n  ) %&gt;%\n  layout(\n    scene = list(\n      xaxis = list(title = \"Aridity\"),\n      yaxis = list(title = \"Seasonality\"),\n      zaxis = list(title = \"Snow fraction\")\n    )\n  )\np\n\n\n\n\n\n\nStatic 3d scatterplot for Figure 1, no envelope\n\n\nCode\npar(mar = c(2,2,2,2), mgp = c(5,1,0))\nscatter3D(x = df_legend$Im, y = df_legend$Imr, z = df_legend$fs, \n          col = alpha(\"grey\", 0.2), cex = 0.15, pch = 16, bty = \"b2\",\n          xlab = \"\", ylab = \"\", zlab = \"\",\n          phi = 25, theta = -50, expand = 0.75, ticktype = \"detailed\")\nscatter3D(x = extracted_vals2$Im, y = extracted_vals2$Imr, z = extracted_vals2$fs-0.03, \n          col = \"black\", type = \"h\", add = TRUE, pch = NA)\nscatter3D(x = extracted_vals2$Im, y = extracted_vals2$Imr, z = extracted_vals2$fs, \n          bg = extracted_vals2$color, col = \"black\", cex = 1.5, pch = 21, add = TRUE)\n\n\n\n\n\n\n\n\n\nWrite 3d scatterplots to file\n\n\nCode\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/Fig1_3Dscatter_NoHull.jpg\", width = 5, height = 5, units = \"in\", res = 1000)\npar(mar = c(2,2,2,2), mgp = c(5,1,0))\nscatter3D(x = df_legend$Im, y = df_legend$Imr, z = df_legend$fs, \n          col = alpha(\"grey\", 0.2), cex = 0.15, pch = 16, bty = \"b2\",\n          xlab = \"\", ylab = \"\", zlab = \"\",\n          phi = 25, theta = -50, expand = 0.75, ticktype = \"detailed\")\nscatter3D(x = extracted_vals2$Im, y = extracted_vals2$Imr, z = extracted_vals2$fs-0.03, \n          col = \"black\", type = \"h\", add = TRUE, pch = NA)\nscatter3D(x = extracted_vals2$Im, y = extracted_vals2$Imr, z = extracted_vals2$fs, \n          bg = extracted_vals2$color, col = \"black\", cex = 1.5, pch = 21, add = TRUE)\ndev.off()\n\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/Fig1_3Dscatter_basehull.jpg\", width = 5, height = 5, units = \"in\", res = 1000)\npar(mar = c(2,2,2,2), mgp = c(5,1,0))\nscatter3D(x = df_legend$Im, y = df_legend$Imr, z = df_legend$fs, \n          col = alpha(\"grey\", 0.2), cex = 0.15, pch = 16, bty = \"b2\",\n          xlab = \"\", ylab = \"\", zlab = \"\",\n          phi = 25, theta = -50, expand = 0.75, ticktype = \"detailed\")\nscatter3D(x = hydroclidf_1$Im, y = hydroclidf_1$Imr, z = hydroclidf_1$fs, \n          col = alpha(\"black\", 0.4), cex = 0.2, pch = 16, add = TRUE)\nscatter3D(x = extracted_vals2$Im, y = extracted_vals2$Imr, z = extracted_vals2$fs, \n          bg = extracted_vals2$color, col = \"black\", cex = 1.5, pch = 21, add = TRUE)\ndev.off()\n\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/Fig1_3Dscatter_BIGhull.jpg\", width = 5, height = 5, units = \"in\", res = 1000)\npar(mar = c(2,2,2,2), mgp = c(5,1,0))\nscatter3D(x = df_legend$Im, y = df_legend$Imr, z = df_legend$fs, \n          col = alpha(\"grey\", 0.2), cex = 0.15, pch = 16, bty = \"b2\",\n          xlab = \"\", ylab = \"\", zlab = \"\",\n          phi = 25, theta = -50, expand = 0.75, ticktype = \"detailed\")\nscatter3D(x = hydroclidf_2$Im, y = hydroclidf_2$Imr, z = hydroclidf_2$fs, \n          col = alpha(\"black\", 0.4), cex = 0.2, pch = 16, add = TRUE)\nscatter3D(x = extracted_vals2$Im, y = extracted_vals2$Imr, z = extracted_vals2$fs, \n          bg = extracted_vals2$color, col = \"black\", cex = 1.5, pch = 21, add = TRUE)\ndev.off()\n\n\nView global and focal site distributions of climate data\n\n\nCode\npar(mfrow = c(3,1), mar = c(2.5,0.5,0.1,0.5), mgp = c(1.5,0.5,0), xpd = TRUE)\n\ndens &lt;- density(df_legend$Im)\nplot(dens, type = \"n\", xlab = \"Aridity\", ylab = \"\", main = \"\", bty = \"n\", xlim = c(-1, 1), axes = FALSE)\npolygon(dens, col = \"grey70\", border = NA)\nlines(dens, bty = \"n\")\npolygon(x = c(-10, -1, -1, -10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\npolygon(x = c(10, 1, 1, 10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\naxis(1)\npoints(x = jitter(extracted_vals2$Im, factor = 20), y = rep(0, times = dim(extracted_vals2)[1]), pch = 21, bg = extracted_vals2$color, cex = 2)\n\ndens &lt;- density(df_legend$Imr)\nplot(dens, type = \"n\", xlab = \"Seasonality\", ylab = \"\", main = \"\", bty = \"n\", xlim = c(0, 2), axes = FALSE)\npolygon(dens, col = \"grey70\", border = NA)\nlines(dens, bty = \"n\")\npolygon(x = c(-10, 0, 0, -10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\npolygon(x = c(10, 2, 2, 10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\naxis(1)\npoints(x = jitter(extracted_vals2$Imr, factor = 20), y = rep(0, times = dim(extracted_vals2)[1]), pch = 21, bg = extracted_vals2$color, cex = 2)\n\ndens &lt;- density(df_legend$fs)\nplot(dens, type = \"n\", xlab = \"Precipitation as snow\", ylab = \"\", main = \"\", bty = \"n\", xlim = c(0, 1), axes = FALSE)\npolygon(dens, col = \"grey70\", border = NA)\nlines(dens, bty = \"n\")\npolygon(x = c(-10, 0, 0, -10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\npolygon(x = c(10, 1, 1, 10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\naxis(1)\npoints(x = jitter(extracted_vals2$fs, factor = 20), y = rep(0, times = dim(extracted_vals2)[1]), pch = 21, bg = extracted_vals2$color, cex = 2)\n\n\n\n\n\n\n\n\n\nWrite to file\n\n\nCode\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/Fig1_ClimateDensityDistributions2.jpg\", width = 3, height = 3, units = \"in\", res = 1000)\npar(mfrow = c(3,1), mar = c(2.5,0.5,0.1,0.5), mgp = c(1.5,0.5,0), xpd = TRUE)\n\ndens &lt;- density(df_legend$Im)\nplot(dens, type = \"n\", xlab = \"Aridity\", ylab = \"\", main = \"\", bty = \"n\", xlim = c(-1, 1), axes = FALSE)\npolygon(dens, col = \"grey70\", border = NA)\nlines(dens, bty = \"n\")\npolygon(x = c(-10, -1, -1, -10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\npolygon(x = c(10, 1, 1, 10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\naxis(1)\npoints(x = jitter(extracted_vals2$Im, factor = 20), y = rep(0, times = dim(extracted_vals2)[1]), pch = 21, bg = extracted_vals2$color, cex = 2)\n\n\ndens &lt;- density(df_legend$Imr)\nplot(dens, type = \"n\", xlab = \"Seasonality\", ylab = \"\", main = \"\", bty = \"n\", xlim = c(0, 2), axes = FALSE)\npolygon(dens, col = \"grey70\", border = NA)\nlines(dens, bty = \"n\")\npolygon(x = c(-10, 0, 0, -10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\npolygon(x = c(10, 2, 2, 10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\naxis(1)\npoints(x = jitter(extracted_vals2$Imr, factor = 20), y = rep(0, times = dim(extracted_vals2)[1]), pch = 21, bg = extracted_vals2$color, cex = 2)\n\ndens &lt;- density(df_legend$fs)\nplot(dens, type = \"n\", xlab = \"Precipitation as snow\", ylab = \"\", main = \"\", bty = \"n\", xlim = c(0, 1), axes = FALSE)\npolygon(dens, col = \"grey70\", border = NA)\nlines(dens, bty = \"n\")\npolygon(x = c(-10, 0, 0, -10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\npolygon(x = c(10, 1, 1, 10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\naxis(1)\npoints(x = jitter(extracted_vals2$fs, factor = 20), y = rep(0, times = dim(extracted_vals2)[1]), pch = 21, bg = extracted_vals2$color, cex = 2)\n\ndev.off()\n\n\n\n\n2.5.3 Repeatability by climate\nPlot monthly estimates of repeatability by climate indices\n\n\nCode\nmysites &lt;- as_tibble(focalsites) %&gt;%\n  mutate(Im = extracted_vals$Im, \n         Imr = extracted_vals$Imr,\n         fs = extracted_vals$fs) %&gt;% \n  group_by(basin) %&gt;%\n  summarize(Im = mean(Im), Imr = mean(Imr), fs = mean(fs)) %&gt;%\n  ungroup() %&gt;%\n  filter(basin != \"Donner Blitzen\") %&gt;%\n  mutate(basin = ifelse(basin == \"Paine Run\", \"Paine\",\n                        ifelse(basin == \"Staunton River\", \"Staunton\", \n                               ifelse(basin == \"Snake River\", \"Snake\", \n                                      ifelse(basin == \"Shields River\", \"Yellowstone\", basin))))) %&gt;%\n  mutate(basin = factor(basin, levels = rev(c(\"West Brook\", \"Staunton\", \"Paine\", \"Flathead\", \"Yellowstone\", \"Snake\")))) %&gt;%\n  mutate(R = c(0.55, 0.56, 0.71, 0.94, 0.44, 0.47)) # grab median repeatability from later analyses\n\n\nPlot\n\n\nCode\nmyr &lt;- cor(mysites$Im, mysites$R)\nmysites %&gt;% ggplot(aes(x = Im, y = R)) +\n  geom_point(aes(fill = basin), shape = 21, size = 3) +\n  annotate(\"text\", x = Inf, y = Inf, hjust = 1.1, vjust = 1.5, \n           label = paste(\"Pearson's r = \", round(myr, digits = 2))) +\n  scale_fill_manual(values = rev(brewer.pal(6, \"Set2\"))) +\n  theme_bw() + theme(legend.position = \"none\", panel.grid = element_blank(), \n                     axis.text = element_text(color = \"black\")) +\n  xlab(\"Aridity\") + ylab(\"Median repeatability (R)\")\n\n\n\n\n\n\n\n\n\nCode\nmyr &lt;- cor(mysites$Imr, mysites$R)\nmysites %&gt;% ggplot(aes(x = Imr, y = R)) +\n  geom_point(aes(fill = basin), shape = 21, size = 3) +\n    annotate(\"text\", x = -Inf, y = Inf, hjust = -0.1, vjust = 1.5, \n           label = paste(\"Pearson's r = \", round(myr, digits = 2))) +\n  scale_fill_manual(values = rev(brewer.pal(6, \"Set2\"))) +\n  theme_bw() + theme(legend.position = \"none\", panel.grid = element_blank(), \n                     axis.text = element_text(color = \"black\")) +\n  xlab(\"Seasonality\") + ylab(\"Median repeatability (R)\")\n\n\n\n\n\n\n\n\n\nCode\nmyr &lt;- cor(mysites$fs, mysites$R)\nmysites %&gt;% ggplot(aes(x = fs, y = R)) +\n  geom_point(aes(fill = basin), shape = 21, size = 3) +\n    annotate(\"text\", x = -Inf, y = Inf, hjust = -0.1, vjust = 1.5, \n           label = paste(\"Pearson's r = \", round(myr, digits = 2))) +\n  scale_fill_manual(values = rev(brewer.pal(6, \"Set2\"))) +\n  theme_bw() + theme(legend.position = \"none\", panel.grid = element_blank(), \n                     axis.text = element_text(color = \"black\")) +\n  xlab(\"Precipitation as snow\") + ylab(\"Median repeatability (R)\")\n\n\n\n\n\n\n\n\n\nWrite to file\n\n\nCode\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/Repeatability_Aridity.jpg\", width = 4, height = 3.5, units = \"in\", res = 1000)\nmyr &lt;- cor(mysites$Im, mysites$R)\nmysites %&gt;% ggplot(aes(x = Im, y = R)) +\n  geom_point(aes(fill = basin), shape = 21, size = 3) +\n  annotate(\"text\", x = Inf, y = Inf, hjust = 1.1, vjust = 1.5, \n           label = paste(\"Pearson's r = \", round(myr, digits = 2))) +\n  scale_fill_manual(values = rev(brewer.pal(6, \"Set2\"))) +\n  theme_bw() + theme(legend.position = \"none\", panel.grid = element_blank(), \n                     axis.text = element_text(color = \"black\")) +\n  xlab(\"Aridity\") + ylab(\"Median repeatability (R)\")\ndev.off()\n\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/Repeatability_Seasonality.jpg\", width = 4, height = 3.5, units = \"in\", res = 1000)\nmyr &lt;- cor(mysites$Imr, mysites$R)\nmysites %&gt;% ggplot(aes(x = Imr, y = R)) +\n  geom_point(aes(fill = basin), shape = 21, size = 3) +\n    annotate(\"text\", x = -Inf, y = Inf, hjust = -0.1, vjust = 1.5, \n           label = paste(\"Pearson's r = \", round(myr, digits = 2))) +\n  scale_fill_manual(values = rev(brewer.pal(6, \"Set2\"))) +\n  theme_bw() + theme(legend.position = \"none\", panel.grid = element_blank(), \n                     axis.text = element_text(color = \"black\")) +\n  xlab(\"Seasonality\") + ylab(\"Median repeatability (R)\")\ndev.off()\n\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/Repeatability_SnowFraction.jpg\", width = 4, height = 3.5, units = \"in\", res = 1000)\nmyr &lt;- cor(mysites$fs, mysites$R)\nmysites %&gt;% ggplot(aes(x = fs, y = R)) +\n  geom_point(aes(fill = basin), shape = 21, size = 3) +\n    annotate(\"text\", x = -Inf, y = Inf, hjust = -0.1, vjust = 1.5, \n           label = paste(\"Pearson's r = \", round(myr, digits = 2))) +\n  scale_fill_manual(values = rev(brewer.pal(6, \"Set2\"))) +\n  theme_bw() + theme(legend.position = \"none\", panel.grid = element_blank(), \n                     axis.text = element_text(color = \"black\")) +\n  xlab(\"Precipitation as snow\") + ylab(\"Median repeatability (R)\")\ndev.off()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Flow and Climate Data</span>"
    ]
  },
  {
    "objectID": "SpaceTimeVar.html",
    "href": "SpaceTimeVar.html",
    "title": "3  Spatiotemporal Variation",
    "section": "",
    "text": "3.1 Data\nPurpose: Evaluate the extent and magnitude of spatial and temporal variation in headwater streamflow regimes.\nSite information\nCode\nsiteinfo &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_SiteInformation.csv\")\nsiteinfo_sp &lt;- st_as_sf(siteinfo, coords = c(\"long\", \"lat\"), crs = 4326)\nLittle g’s (headwater sites)\nCode\ndat_clean &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/LittleG_data_clean.csv\")\nBig G’s (reference gages)\nCode\ndat_clean_big &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/BigG_data_clean.csv\")\nClimate\nCode\nclimdf &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/Daymet_climate.csv\")\nclimdf_summ &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/Daymet_climate_summary.csv\")\nGet catchment shapefiles\nCode\nsheds_list &lt;- list()\nmyfiles &lt;- list.files(path = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/\", pattern = \".shp\")\nfor (i in 1:length(myfiles)) {\n  sheds_list[[i]] &lt;- st_read(paste(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/\", myfiles[i], sep = \"\"))\n}\nsheds &lt;- do.call(rbind, sheds_list) %&gt;% \n  mutate(site_id = ifelse(site_id == \"SP01\", \"SP07\", ifelse(site_id == \"SP07\", \"SP01\", site_id))) %&gt;%\n  left_join(siteinfo)\n#mapview(sheds %&gt;% arrange(desc(area_sqmi)), alpha.regions = 0.2)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Spatiotemporal Variation</span>"
    ]
  },
  {
    "objectID": "SpaceTimeVar.html#order-sites",
    "href": "SpaceTimeVar.html#order-sites",
    "title": "3  Spatiotemporal Variation",
    "section": "3.2 Order sites",
    "text": "3.2 Order sites\nFor colors, order sites from downstream to upstream (roughly) and by subbasin (if appropriate)\n\n\nCode\nwborder &lt;- c(\"West Brook NWIS\", \"West Brook Lower\", \"Mitchell Brook\", \"Jimmy Brook\", \"Obear Brook Lower\", \"West Brook Upper\", \"West Brook Reservoir\", \"Sanderson Brook\", \"Avery Brook\", \"West Whately Brook\")\npaineorder &lt;- c(\"Paine Run 10\", \"Paine Run 08\", \"Paine Run 07\", \"Paine Run 06\", \"Paine Run 02\", \"Paine Run 01\")\nstauntorder &lt;- c(\"Staunton River 10\", \"Staunton River 09\", \"Staunton River 07\", \"Staunton River 06\", \"Staunton River 03\", \"Staunton River 02\")\nflatorder &lt;- c(\"BigCreekLower\", \"LangfordCreekLower\", \"LangfordCreekUpper\", \"Big Creek NWIS\", \"BigCreekUpper\", \"HallowattCreekLower\", \"NicolaCreek\", \"WernerCreek\", \"Hallowat Creek NWIS\", \"CoalCreekLower\", \"CycloneCreekLower\", \"CycloneCreekMiddle\", \"CycloneCreekUpper\", \"CoalCreekMiddle\", \"CoalCreekNorth\", \"CoalCreekHeadwaters\", \"McGeeCreekLower\", \"McGeeCreekTrib\", \"McGeeCreekUpper\")\nyellorder &lt;- c(\"Shields River Valley Ranch\", \"Deep Creek\", \"Crandall Creek\", \"Buck Creek\", \"Dugout Creek\", \"Shields River ab Dugout\", \"Lodgepole Creek\", \"EF Duck Creek be HF\", \"EF Duck Creek ab HF\", \"Henrys Fork\")\nsnakeorder &lt;- c(\"Spread Creek Dam\", \"Rock Creek\", \"NF Spread Creek Lower\", \"NF Spread Creek Upper\", \"Grizzly Creek\", \"SF Spread Creek Lower\", \"Grouse Creek\", \"SF Spread Creek Upper\", \"Leidy Creek Mouth\")\ndonnerorder &lt;- c(\"Fish Creek NWIS\", \"Donner Blitzen ab Fish NWIS\", \"Donner Blitzen nr Burnt Car NWIS\", \"Donner Blitzen ab Indian NWIS\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Spatiotemporal Variation</span>"
    ]
  },
  {
    "objectID": "SpaceTimeVar.html#spaghetti-plots",
    "href": "SpaceTimeVar.html#spaghetti-plots",
    "title": "3  Spatiotemporal Variation",
    "section": "3.3 Spaghetti plots",
    "text": "3.3 Spaghetti plots\nView daily time series data by sub-basin. Note that we are using the “Super G” NWIS data for the reference gage (black line). Per Robert comment, entirely nested design is cute, but doesn’t reflect how the data is actually used.\nBig G NWIS sites/reference gages for each basin/subbasin:\n\n\nCode\ndat_clean_big %&gt;% group_by(region, basin, subbasin) %&gt;% summarize(site_name = unique(site_name)) %&gt;% ungroup() %&gt;% filter(!is.na(region)) %&gt;% kable()\n\n\n\n\n\n\n\n\n\n\n\nregion\nbasin\nsubbasin\nsite_name\n\n\n\n\nFlat\nFlathead\nFlathead\nNorth Fork Flathead River NWIS\n\n\nMass\nWest Brook\nWest Brook\nSouth River Conway NWIS\n\n\nOreg\nDonner Blitzen\nDonner Blitzen\nDonner Blitzen River nr Frenchglen NWIS\n\n\nShen\nPaine Run\nPaine Run\nSouth River Harriston NWIS\n\n\nShen\nPiney River\nPiney River\nBattle Run NWIS\n\n\nShen\nStaunton River\nStaunton River\nRapidan River NWIS\n\n\nShields\nShields River\nShields River\nYellowstone River Livingston NWIS\n\n\nSnake\nSnake River\nSnake River\nPacific Creek at Moran NWIS\n\n\n\n\n\n\n3.3.1 Interactive\n\nWest BrookPaine RunStaunton RiverFlatheadYellowstoneSnake RiverDonner Blitzen\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndat_clean %&gt;% \n  filter(basin == \"Flathead\") %&gt;% \n  bind_rows(dat_clean_big %&gt;% filter(basin == \"Flathead\", date &gt;= date(\"2017-07-29\"), date &lt;= date(\"2023-12-11\"))) %&gt;% \n  select(date, site_name, logYield) %&gt;% \n  spread(key = site_name, value = logYield) %&gt;% \n  relocate(\"North Fork Flathead River NWIS\", .after = last_col()) %&gt;% \n  dygraph() %&gt;% dyRangeSelector() %&gt;% dyAxis(\"y\", label = \"ln(Yield, mm)\") %&gt;% \n  #dyOptions(colors = c(brewer.pal(7, \"Dark2\"), \"black\")) %&gt;% \n  dySeries(\"North Fork Flathead River NWIS\", strokeBorderWidth = 1, strokeWidth = 1.5, color = \"black\")\n\n\n\n\n\n\n\n\n\n\nCode\ndat_clean %&gt;% \n  filter(basin == \"Shields River\") %&gt;% \n  bind_rows(dat_clean_big %&gt;% filter(basin == \"Shields River\", date &gt;= date(\"2015-04-01\"), date &lt;= date(\"2023-12-31\"))) %&gt;% \n  select(date, site_name, logYield) %&gt;% \n  spread(key = site_name, value = logYield) %&gt;% \n  relocate(\"Yellowstone River Livingston NWIS\", .after = last_col()) %&gt;% \n  dygraph() %&gt;% dyRangeSelector() %&gt;% dyAxis(\"y\", label = \"ln(Yield, mm)\") %&gt;% \n  #dyOptions(colors = c(brewer.pal(7, \"Dark2\"), \"black\")) %&gt;% \n  dySeries(\"Yellowstone River Livingston NWIS\", strokeBorderWidth = 1, strokeWidth = 1.5, color = \"black\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.3.2 Static\n\n3.3.2.1 Complete time series\nCreate time series data plots objects\n\n\nCode\npolycol &lt;- \"grey90\"\nmycols &lt;- brewer.pal(7, \"Set2\")\n\n### WEST BROOK\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"West Brook\") %&gt;%\n  mutate(site_name = factor(site_name, levels = wborder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"West Brook\", date &gt;= date(\"2020-01-01\"), date &lt;= date(\"2025-01-03\"))\n# color\npwb1 &lt;- ggplot() +\n  geom_rect(aes(xmin = ymd(\"2020-07-01\"), xmax = ymd(\"2020-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2021-07-01\"), xmax = ymd(\"2021-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2022-07-01\"), xmax = ymd(\"2022-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2023-07-01\"), xmax = ymd(\"2023-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2024-07-01\"), xmax = ymd(\"2024-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = wborder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  ylim(-3,2) +\n  with_outer_glow(annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"West Brook, MA\", hjust = 0, vjust = 1), colour = \"white\", expand = 10) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[1], fill = NA, linewidth = 1.5)\n                     )\n# greyscale\npwb2 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, group = site_name), color = \"grey\") +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"black\", size = 1) +\n  ylim(-3,2) +\n  annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"West Brook, MA\", hjust = 0, vjust = 1) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = \"black\"))\n\n\n### STAUNTON RIVER\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Staunton River\") %&gt;%\n  mutate(site_name = factor(site_name, levels = stauntorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Staunton River\", date &gt;= as_date(\"2018-11-07\"), date &lt;= as_date(\"2022-10-19\"))\n# color\npst1 &lt;- ggplot() +\n  geom_rect(aes(xmin = ymd(\"2019-07-01\"), xmax = ymd(\"2019-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2020-07-01\"), xmax = ymd(\"2020-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2021-07-01\"), xmax = ymd(\"2021-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2022-07-01\"), xmax = ymd(\"2022-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = stauntorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  with_outer_glow(annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Staunton River, VA\", hjust = 0, vjust = 1), colour = \"white\", expand = 10) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[2], fill = NA, linewidth = 1.5)\n                     )\n# greyscale\npst2 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, group = site_name), color = \"grey\") +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"black\", size = 1) +\n  annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Staunton River\", hjust = 0, vjust = 1) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\"), panel.border = element_rect(colour = mycols[2], fill = NA, linewidth = 2))\n\n\n### PAINE RUN\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Paine Run\") %&gt;%\n  mutate(site_name = factor(site_name, levels = paineorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Paine Run\", date &gt;= as_date(\"2018-11-07\"), date &lt;= as_date(\"2023-05-15\"))\n# color\nppa1 &lt;- ggplot() +\n  geom_rect(aes(xmin = ymd(\"2019-07-01\"), xmax = ymd(\"2019-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2020-07-01\"), xmax = ymd(\"2020-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2021-07-01\"), xmax = ymd(\"2021-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2022-07-01\"), xmax = ymd(\"2022-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = paineorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  with_outer_glow(annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Paine Run, VA\", hjust = 0, vjust = 1), colour = \"white\", expand = 10) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[3], fill = NA, linewidth = 1.5)\n                     )\n# greyscale\nppa2 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, group = site_name), color = \"grey\") +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"black\", size = 1) +\n  annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Paine Run\", hjust = 0, vjust = 1) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = \"black\"))\n\n\n### FLATHEAD\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Flathead\", date &gt;= date(\"2018-07-29\"), date &lt;= date(\"2023-08-11\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = flatorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Flathead\", date &gt;= date(\"2018-07-29\"), date &lt;= date(\"2023-08-11\"))\n# color\npfl1 &lt;- ggplot() +\n  geom_rect(aes(xmin = ymd(\"2018-07-29\"), xmax = ymd(\"2018-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2019-07-01\"), xmax = ymd(\"2019-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2020-07-01\"), xmax = ymd(\"2020-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2021-07-01\"), xmax = ymd(\"2021-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2022-07-01\"), xmax = ymd(\"2022-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2023-07-01\"), xmax = ymd(\"2023-08-11\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = flatorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  with_outer_glow(annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Flathead River, MT\", hjust = 0, vjust = 1), colour = \"white\", expand = 10) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[4], fill = NA, linewidth = 1.5)\n                     )\n# greyscale\npfl2 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, group = site_name), color = \"grey\") +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"black\", size = 1) +\n  annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Flathead River\", hjust = 0, vjust = 1) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = \"black\"))\n\n\n### YELLOWSTONE\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Shields River\", date &gt;= date(\"2016-06-01\"), date &lt;= date(\"2023-11-01\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = yellorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Shields River\", date &gt;= date(\"2016-06-01\"), date &lt;= date(\"2023-11-01\"))\n# color\npye1 &lt;- ggplot() +\n  geom_rect(aes(xmin = ymd(\"2016-07-01\"), xmax = ymd(\"2016-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2017-07-01\"), xmax = ymd(\"2017-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2018-07-01\"), xmax = ymd(\"2018-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2019-07-01\"), xmax = ymd(\"2019-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2020-07-01\"), xmax = ymd(\"2020-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2021-07-01\"), xmax = ymd(\"2021-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2022-07-01\"), xmax = ymd(\"2022-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2023-07-01\"), xmax = ymd(\"2023-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = yellorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  with_outer_glow(annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Yellowstone River, MT\", hjust = 0, vjust = 1), colour = \"white\", expand = 10) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[5], fill = NA, linewidth = 1.5)\n                     )\n# greyscale\npye2 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, group = site_name), color = \"grey\") +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"black\", size = 1) +\n  annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Yellowstone River, MT\", hjust = 0, vjust = 1) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = \"black\"))\n\n\n### SNAKE\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Snake River\", date &gt;= date(\"2016-06-01\"), date &lt;= date(\"2023-10-03\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = snakeorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Snake River\", date &gt;= date(\"2016-06-01\"), date &lt;= date(\"2023-10-03\"))\n# color\npsn1 &lt;- ggplot() +\n  geom_rect(aes(xmin = ymd(\"2016-07-01\"), xmax = ymd(\"2016-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2017-07-01\"), xmax = ymd(\"2017-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2018-07-01\"), xmax = ymd(\"2018-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2019-07-01\"), xmax = ymd(\"2019-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2020-07-01\"), xmax = ymd(\"2020-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2021-07-01\"), xmax = ymd(\"2021-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2022-07-01\"), xmax = ymd(\"2022-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2023-07-01\"), xmax = ymd(\"2023-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = snakeorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  with_outer_glow(annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Snake River, WY\", hjust = 0, vjust = 1), colour = \"white\", expand = 10) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[6], fill = NA, linewidth = 1.5)\n                     )\n# greyscale\npsn2 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, group = site_name), color = \"grey\") +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"black\", size = 1) +\n  annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Snake River, WY\", hjust = 0, vjust = 1) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = \"black\"))\n\n\n### DONNER BLITZEN\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Donner Blitzen\") %&gt;%\n  mutate(site_name = factor(site_name, levels = donnerorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Donner Blitzen\", date &gt;= date(\"2019-07-15\"), date &lt;= as_date(\"2022-10-30\"))\n# color\npdb1 &lt;- ggplot() +\n  geom_rect(aes(xmin = ymd(\"2019-07-15\"), xmax = ymd(\"2019-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2020-07-01\"), xmax = ymd(\"2020-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2021-07-01\"), xmax = ymd(\"2021-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2022-07-01\"), xmax = ymd(\"2022-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = donnerorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  with_outer_glow(annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Donner und Blitzen River, OR\", hjust = 0, vjust = 1), colour = \"white\", expand = 10) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[7], fill = NA, linewidth = 1.5)\n                     )\n# greyscale\npdb2 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, group = site_name), color = \"grey\") +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"black\", size = 1) +\n  annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Donner und Blitzen River\", hjust = 0, vjust = 1) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = \"black\"))\n\n\nGenerate combined plot\n\n\nCode\nannotate_figure(egg::ggarrange(pwb1, pst1, ppa1, pfl1, pye1, psn1, pdb1, ncol = 1), left = \"log(Yield, mm/day)\")\n\n\n\n\n\n\n\n\n\nWrite to file\n\n\nCode\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/EcoD_timeseries_new_noborder.jpg\", width = 5, height = 11, units = \"in\", res = 1000)\nannotate_figure(egg::ggarrange(pwb1, pst1, ppa1, pfl1, pye1, psn1, pdb1, ncol = 1), left = \"log(Yield, mm/day)\")\ndev.off()\n\n\n\n\n3.3.2.2 Summer 2020\nPlot time series just for summer 2020, for more detailed view\n\n\nCode\npolycol &lt;- \"grey90\"\nmycols &lt;- brewer.pal(7, \"Set2\")\n\n### WEST BROOK\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"West Brook\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = wborder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"West Brook\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\"))\n# same yaxis scale as main time series\npwb1 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = wborder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 7, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[1], fill = NA, linewidth = 1.5)\n                     )\n\n### STAUNTON RIVER\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Staunton River\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = stauntorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Staunton River\", , date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\"))\n# color\npst1 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = stauntorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 7, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[2], fill = NA, linewidth = 1.5)\n                     )\n\n### PAINE RUN\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Paine Run\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = paineorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Paine Run\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\"))\n# color\nppa1 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = paineorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 7, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[3], fill = NA, linewidth = 1.5)\n                     )\n\n### FLATHEAD\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Flathead\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = flatorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Flathead\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\"))\n# color\npfl1 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = flatorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 7, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[4], fill = NA, linewidth = 1.5)\n                     )\n\n### YELLOWSTONE\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Shields River\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = yellorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Shields River\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\"))\n# color\npye1 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = yellorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 7, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[5], fill = NA, linewidth = 1.5)\n                     )\n\n### SNAKE\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Snake River\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = snakeorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Snake River\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\"))\n# color\npsn1 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = snakeorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 7, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[6], fill = NA, linewidth = 1.5)\n                     )\n\n### DONNER BLITZEN\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Donner Blitzen\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = donnerorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Donner Blitzen\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\"))\n# color\npdb1 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = donnerorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 7, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[7], fill = NA, linewidth = 1.5)\n                     )\nannotate_figure(egg::ggarrange(pwb1, pst1, ppa1, pfl1, pye1, psn1, pdb1, ncol = 1))\n\n\n\n\n\n\n\n\n\nWrite to file\n\n\nCode\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/EcoD_timeseries_2020only.jpg\", width = 2, height = 11, units = \"in\", res = 1000)\nannotate_figure(egg::ggarrange(pwb1, pst1, ppa1, pfl1, pye1, psn1, pdb1, ncol = 1))\ndev.off()\n\n\n\n\n3.3.2.3 Summer range\nCreate function to plot interannual distribution of streamflow values, annual distributions of streamflow values, and scatterplot plot of\n\n\nCode\nportfolioplot &lt;- function(bas, orderr, wtryrs) {\n  # filter data\n  tempdat &lt;- dat_clean %&gt;% \n    filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% wtryrs) %&gt;%\n    mutate(site_name = factor(site_name, levels = orderr))\n  nsites &lt;- length(unique(tempdat$site_name))\n  tempdat_big &lt;- dat_clean_big %&gt;% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))\n\n  # calculate variability for reference gage\n  varbig &lt;- tempdat_big %&gt;% \n    group_by(WaterYear) %&gt;% \n    summarize(bigrange = range(logYield)[2]-range(logYield)[1],\n              bigsd = sd(logYield),\n              bigvar = var(logYield)) %&gt;%\n    ungroup()\n\n  # interannual\n  pint &lt;- ggplot() + \n    geom_density(data = tempdat, aes(x = logYield, y = ..scaled.., color = site_name, fill = site_name), size = 0.8) +\n    scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n    scale_fill_manual(values = alpha(cet_pal(nsites, name = \"i1\"), 0.1)) +\n    geom_density(data = tempdat_big, aes(x = logYield, y = ..scaled..), color = \"grey40\", fill = alpha(\"grey40\", 0.2), size = 0.8) +\n    xlab(\"Summer log(Yield, mm/day)\") + ylab(\"Scaled density\") +\n    theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), \n                       axis.text = element_text(color = \"black\"), legend.position = \"none\")\n  \n  return(pint)\n}\n\n\nPlot distributions of summer log(yield) for all basins\n\n\nCode\n# no borders\negg::ggarrange(\n  # West Brook\n  portfolioplot(bas = \"West Brook\", orderr = wborder, wtryrs = c(2020:2024)) + \n    theme(axis.title = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), \n          plot.margin = margin(t = 1, r = 7, b = 2, l = 1)),\n  # Staunton\n  portfolioplot(bas = \"Staunton River\", orderr = stauntorder, wtryrs = c(2019:2022)) + \n    theme(axis.title = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), \n          plot.margin = margin(t = 1, r = 7, b = 2, l = 1)),\n  # Paine\n  portfolioplot(bas = \"Paine Run\", orderr = paineorder, wtryrs = c(2019:2022)) + \n    theme(axis.title = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), \n          plot.margin = margin(t = 1, r = 7, b = 2, l = 1)),\n  # Flathead\n  portfolioplot(bas = \"Flathead\", orderr = flatorder, wtryrs = c(2018:2024)) + \n    theme(axis.title = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), \n          plot.margin = margin(t = 1, r = 7, b = 2, l = 1)),\n  # Yellowstone\n  portfolioplot(bas = \"Shields River\", orderr = yellorder, wtryrs = c(2016:2020,2022:2024)) + \n    theme(axis.title = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), \n          plot.margin = margin(t = 1, r = 7, b = 2, l = 1)),\n  # Snake\n  portfolioplot(bas = \"Snake River\", orderr = snakeorder, wtryrs = c(2016:2024)) + \n    theme(axis.title = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), \n          plot.margin = margin(t = 1, r = 7, b = 2, l = 1)),\n  # Donner Blitzen\n  portfolioplot(bas = \"Donner Blitzen\", orderr = donnerorder, wtryrs = c(2016:2024)) + \n    theme(axis.title = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), \n          plot.margin = margin(t = 1, r = 7, b = 2, l = 1)),\n  nrow = 7)\n\n\n\n\n\n\n\n\n\nCode\n#annotate_figure(p, left = \"Density\")\n\n# jpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/EcoD_summerdensity_all_noborder_wide.jpg\", width = 2.5, height = 11, units = \"in\", res = 1000)\n# annotate_figure(p1, left = \"Density\")\n# dev.off()\n\n\n\n\n\n3.3.3 Presentation figs\nTime series plots, West Brook and Flathead\n\n\nCode\n### WEST BROOK\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"West Brook\") %&gt;%\n  mutate(site_name = factor(site_name, levels = wborder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"West Brook\", date &gt;= date(\"2020-01-01\"), date &lt;= date(\"2025-01-03\"))\n# color\npwb1 &lt;- ggplot() +\n  geom_rect(aes(xmin = ymd(\"2020-07-01\"), xmax = ymd(\"2020-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2021-07-01\"), xmax = ymd(\"2021-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2022-07-01\"), xmax = ymd(\"2022-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2023-07-01\"), xmax = ymd(\"2023-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2024-07-01\"), xmax = ymd(\"2024-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = wborder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  ylim(-3,2) +\n  annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"West Brook, MA\", hjust = 0, vjust = 1) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[1], fill = NA, linewidth = 1.5)\n                     )\n\n### FLATHEAD\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Flathead\", date &gt;= date(\"2018-07-29\"), date &lt;= date(\"2023-08-11\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = flatorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Flathead\", date &gt;= date(\"2018-07-29\"), date &lt;= date(\"2023-08-11\"))\n# color\npfl1 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = flatorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  ylim(-3,2) +\n  annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Flathead River\", hjust = 0, vjust = 1) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = \"black\"))\n\np &lt;- annotate_figure(egg::ggarrange(pwb1, pfl1 + ylim(-2.4,1.72), ncol = 1), left = \"log(Yield, mm/day)\")\nprint(p)\n\n\n\n\n\n\n\n\n\nCode\n# jpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/EcoD_timeseries_WBFlat.jpg\", width = 8, height = 5, units = \"in\", res = 1000)\n# p\n# dev.off()\n\n\nNo headwater gages\n\n\nCode\n### WEST BROOK\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"West Brook\") %&gt;%\n  mutate(site_name = factor(site_name, levels = wborder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"West Brook\", date &gt;= date(\"2020-01-01\"), date &lt;= date(\"2025-01-03\"))\n# color\npwb1_nlg &lt;- ggplot() +\n  #geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = wborder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  ylim(-3,2) +\n  annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"The West Brook\", hjust = 0, vjust = 1) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = \"black\"))\n\n### FLATHEAD\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Flathead\", date &gt;= date(\"2018-07-29\"), date &lt;= date(\"2023-08-11\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = flatorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Flathead\", date &gt;= date(\"2018-07-29\"), date &lt;= date(\"2023-08-11\"))\n# color\npfl1_nlg &lt;- ggplot() +\n  #geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = flatorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  ylim(-2.4,1.72) +\n  annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Flathead River\", hjust = 0, vjust = 1) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = \"black\"))\n\np &lt;- annotate_figure(egg::ggarrange(pwb1_nlg, pfl1_nlg, ncol = 1), left = \"log(Yield, mm/day)\")\nprint(p)\n\n\n\n\n\n\n\n\n\nCode\n# jpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/EcoD_timeseries_WBFlat_nolittle.jpg\", width = 8, height = 5, units = \"in\", res = 1000)\n# p\n# dev.off()\n\n\nSummer log(yield) distributions for West Brook and Flathead\n\n\nCode\negg::ggarrange(portfolioplot(bas = \"West Brook\", orderr = wborder, wtryrs = c(2020:2024)) + theme(axis.title = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), plot.margin = margin(t = 1, r = 1, b = 2, l = 1)),\n               portfolioplot(bas = \"Flathead\", orderr = flatorder, wtryrs = c(2018:2024)) + theme(axis.title = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), plot.margin = margin(t = 1, r = 1, b = 2, l = 1)),\n               nrow = 2)\n\n\n\n\n\n\n\n\n\nCode\n# print(p)\n# jpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/EcoD_summerdensity_WBFlat.jpg\", width = 2.75, height = 5, units = \"in\", res = 1000)\n# p\n# dev.off()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Spatiotemporal Variation</span>"
    ]
  },
  {
    "objectID": "SpaceTimeVar.html#repeatability",
    "href": "SpaceTimeVar.html#repeatability",
    "title": "3  Spatiotemporal Variation",
    "section": "3.4 Repeatability",
    "text": "3.4 Repeatability\nHow repeatable is summer monthly mean flow among sites within headwater networks? I.e., are sites with higher than average yield always higher than average, or do “lines cross” frequently?\nCalculate reputability (R) using the rptR package (Stoffel et al. 2017). Also see related papers by Nakagawa and Schielzeth. Repeatibility is calculated on mean monthly flow z-scored by month and year, which removes the effect of monthly and interannual variation in water availability. Results are very similar to models fit using raw yield data with big G flow as a fixed effect.\n\n\nCode\nbasins &lt;- c(\"West Brook\", \"Paine Run\", \"Staunton River\", \"Flathead\", \"Shields River\", \"Snake River\", \"Donner Blitzen\")\nrptlist_summer &lt;- list()\nrptlist_summer_cov &lt;- list()\n\n# summer only\nfor (i in 1:length(basins)) {\n  # daily data\n  td &lt;- dat_clean %&gt;% filter(basin == basins[i], Month %in% c(7:9))\n  # summarize by month\n  td2 &lt;- td %&gt;%\n    group_by(subbasin, site_name, designation, CalendarYear, Month, MonthName) %&gt;%\n    summarize(logYield = mean(logYield)) %&gt;%\n    ungroup()\n  # big g data\n  tempdat_big &lt;- dat_clean_big %&gt;% \n    filter(basin == basins[i], date &gt;= min(td$date), date &lt;= max(td$date)) %&gt;%\n    group_by(site_name, CalendarYear, Month, MonthName) %&gt;%\n    summarize(logYield = mean(logYield)) %&gt;%\n    ungroup()\n  # join data\n  joined &lt;- td2 %&gt;% \n    left_join(tempdat_big %&gt;% select(CalendarYear, MonthName, logYield) %&gt;% rename(logYield_big = logYield)) %&gt;%\n    group_by(CalendarYear, Month) %&gt;%\n    mutate(logYield_z = scale(logYield)) %&gt;%\n    ungroup()\n  # calculate repeatability\n  rpt_znull &lt;- rptGaussian(logYield_z ~ 1 + (1|site_name), data = joined, grname = \"site_name\")\n  rpt_cov &lt;- rptGaussian(logYield ~ logYield_big + (1|site_name), data = joined, grname = \"site_name\")\n  # store in list\n  rptlist_summer[[i]] &lt;- tibble(basin =  basins[i], rboot = rpt_znull$R_boot$site_name, type = \"zscore\")\n  rptlist_summer_cov[[i]] &lt;- tibble(basin =  basins[i], rboot = rpt_cov$R_boot$site_name, type = \"cov\")\n}\nrpttib_summer &lt;- bind_rows(do.call(rbind, rptlist_summer), do.call(rbind, rptlist_summer_cov))\n\n\nGenerally, repeatibility appears to be greater for snowmelt-dominated basins, particularly in the summer. The “all data” plot is more difficult to interpret as we mostly have seasonal data in the snowmelt basins, particularly the Yellowstone and Snake. In actuality, I would expect the opposite pattern if we had complete time series data for all basins: low reputability for snowmelt basins and high repeatability for rainfall basins (for the same reasons as bow tie vs. wedge).\n\n\nCode\nrpttib_summer %&gt;% \n  filter(basin != \"Donner Blitzen\", type == \"zscore\") %&gt;%\n  mutate(basin = ifelse(basin == \"Paine Run\", \"Paine\",\n                        ifelse(basin == \"Staunton River\", \"Staunton\", \n                               ifelse(basin == \"Snake River\", \"Snake\", \n                                      ifelse(basin == \"Shields River\", \"Yellowstone\", basin))))) %&gt;%\n  mutate(basin = factor(basin, levels = rev(c(\"West Brook\", \"Staunton\", \"Paine\", \"Flathead\", \"Yellowstone\", \"Snake\")))) %&gt;%\n  ggplot(aes(x = rboot, y = basin)) +\n  geom_density_ridges(quantile_lines = TRUE, quantiles = 2, aes(fill = basin)) +\n  scale_fill_manual(values = rev(brewer.pal(6, \"Set2\"))) +\n  xlim(0,1) +\n  theme_bw() + theme(legend.position = \"none\", panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(color = \"black\")) +\n  xlab(\"Bootstrapped repeatability (R)\") + ylab(\"Basin\") + #ggtitle(\"Summer only (JAS)\") +\n  geom_text(data = rpttib_summer %&gt;% filter(basin != \"Donner Blitzen\", type == \"zscore\") %&gt;%\n  mutate(basin = ifelse(basin == \"Paine Run\", \"Paine\",\n                        ifelse(basin == \"Staunton River\", \"Staunton\", \n                               ifelse(basin == \"Snake River\", \"Snake\", \n                                      ifelse(basin == \"Shields River\", \"Yellowstone\", basin)))))%&gt;% group_by(basin) %&gt;% summarise(rboot = median(rboot)),\n            aes(label = round(rboot, digits = 2)), position = position_nudge(y = -0.15), colour = \"black\", size=3.5) \n\n\n\n\n\n\n\n\n\nWrite summer repeatability figure to file\n\n\nCode\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/MeanMonthlyFlow_SummerRepeatability.jpg\", width = 4, height = 3.5, units = \"in\", res = 1000)\nrpttib_summer %&gt;% \n  filter(basin != \"Donner Blitzen\", type == \"zscore\") %&gt;%\n  mutate(basin = ifelse(basin == \"Paine Run\", \"Paine\",\n                        ifelse(basin == \"Staunton River\", \"Staunton\", \n                               ifelse(basin == \"Snake River\", \"Snake\", \n                                      ifelse(basin == \"Shields River\", \"Yellowstone\", basin))))) %&gt;%\n  mutate(basin = factor(basin, levels = rev(c(\"West Brook\", \"Staunton\", \"Paine\", \"Flathead\", \"Yellowstone\", \"Snake\")))) %&gt;%\n  ggplot(aes(x = rboot, y = basin)) +\n  geom_density_ridges(quantile_lines = TRUE, quantiles = 2, aes(fill = basin)) +\n  scale_fill_manual(values = rev(brewer.pal(6, \"Set2\"))) +\n  xlim(0,1) +\n  theme_bw() + theme(legend.position = \"none\", panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(color = \"black\")) +\n  xlab(\"Bootstrapped repeatability (R)\") + ylab(\"Basin\") + #ggtitle(\"Summer only (JAS)\") +\n  geom_text(data = rpttib_summer %&gt;% filter(basin != \"Donner Blitzen\", type == \"zscore\") %&gt;%\n  mutate(basin = ifelse(basin == \"Paine Run\", \"Paine\",\n                        ifelse(basin == \"Staunton River\", \"Staunton\", \n                               ifelse(basin == \"Snake River\", \"Snake\", \n                                      ifelse(basin == \"Shields River\", \"Yellowstone\", basin)))))%&gt;% group_by(basin) %&gt;% summarise(rboot = median(rboot)),\n            aes(label = round(rboot, digits = 2)), position = position_nudge(y = -0.15), colour = \"black\", size=3.5) \ndev.off()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Spatiotemporal Variation</span>"
    ]
  },
  {
    "objectID": "SpaceTimeVar.html#fluvial-synchrograms",
    "href": "SpaceTimeVar.html#fluvial-synchrograms",
    "title": "3  Spatiotemporal Variation",
    "section": "3.5 Fluvial synchrograms",
    "text": "3.5 Fluvial synchrograms\nUse modified fluvial synchrograms to graphically explore the geography of spatial heterogeneity in summer streamflow (sensu Larsen et al. 2018 Ecology Letters). How does time series similarity (distance) among headwater sites change as a function of euclidean, watercourse, and flow-connected geographic distance? Given spatial dependencies in river networks (e.g., Peterson et al. 2013 Ecology Letters), we would expect flow regimes to be more similar among flow-connected sites located in close proximity (i.e., increasing time series distance with increasing geographic distance).\n\n3.5.1 Spatial data\n\n3.5.1.1 Flowline\nCrop flow line to area of interest:\n\n\nCode\n# West Brook\nmysheds &lt;- read_sf(dsn = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds\", layer = \"Mass_Watersheds\")\nmysheds &lt;- mysheds[mysheds$site_id == \"WBR\",]\nmynet &lt;- read_sf(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams\", layer = \"Mass_Streams\")\nst_crs(mynet) &lt;- st_crs(mysheds)\nmynet &lt;- st_intersection(mynet, mysheds)\nmynet &lt;- st_transform(mynet, crs = \"+proj=utm +zone=18\")\nst_write(mynet, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial/Mass_Streams_crop.shp\", append = FALSE)\n\n# Staunton\nmysheds &lt;- read_sf(dsn = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds\", layer = \"Shen_Watersheds\")\nmysheds &lt;- mysheds[mysheds$site_id == \"SR_10FL\",]\nmynet &lt;- read_sf(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams\", layer = \"Shen_Streams\")\nst_crs(mynet) &lt;- st_crs(mysheds)\nmynet &lt;- st_intersection(mynet, mysheds)\nmynet &lt;- st_transform(mynet, crs = \"+proj=utm +zone=18\")\nst_write(mynet, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial/Staunton_Streams_crop.shp\", append = FALSE)\n\n# Paine Run\nmysheds &lt;- read_sf(dsn = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds\", layer = \"Shen_Watersheds\")\nmysheds &lt;- mysheds[mysheds$site_id == \"PA_10FL\",]\nmynet &lt;- read_sf(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams\", layer = \"Shen_Streams\")\nst_crs(mynet) &lt;- st_crs(mysheds)\nmynet &lt;- st_intersection(mynet, mysheds)\nmynet &lt;- st_transform(mynet, crs = \"+proj=utm +zone=18\")\nst_write(mynet, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial/Paine_Streams_crop.shp\", append = FALSE)\n\n# Flathead\nmysheds &lt;- read_sf(dsn = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds\", layer = \"Flat_Watersheds\")\nmysheds &lt;- mysheds[mysheds$site_id == \"NFF\",]\nmynet &lt;- read_sf(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams\", layer = \"Flat_Streams\")\nst_crs(mynet) &lt;- st_crs(mysheds)\nmynet &lt;- st_intersection(mynet, mysheds)\nmynet &lt;- st_transform(mynet, crs = \"+proj=utm +zone=18\")\nst_write(mynet, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial/Flat_Streams_crop.shp\", append = FALSE)\n\n# Yellowstone\nmysheds &lt;- read_sf(dsn = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds\", layer = \"Shields_Watersheds\")\nmysheds &lt;- mysheds[mysheds$site_id == \"SRS\",]\nmynet &lt;- read_sf(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams\", layer = \"Shields_Streams\")\nst_crs(mynet) &lt;- st_crs(mysheds)\nmynet &lt;- st_intersection(mynet, mysheds)\nmynet &lt;- st_transform(mynet, crs = \"+proj=utm +zone=18\")\nst_write(mynet, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial/Yell_Streams_crop.shp\", append = FALSE)\n\n# Snake\nmysheds &lt;- read_sf(dsn = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds\", layer = \"Snake_Watersheds\")\nmysheds &lt;- mysheds[mysheds$site_id == \"SP11\",]\nmynet &lt;- read_sf(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams\", layer = \"Snake_Streams\")\nst_crs(mynet) &lt;- st_crs(mysheds)\nmynet &lt;- st_intersection(mynet, mysheds)\nmynet &lt;- st_transform(mynet, crs = \"+proj=utm +zone=18\")\nst_write(mynet, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial/Snake_Streams_crop.shp\", append = FALSE)\n\n# Donner-Blitzen\nmysheds &lt;- read_sf(dsn = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds\", layer = \"Oreg_Watersheds\")\nmysheds &lt;- mysheds[mysheds$site_id == \"DBF\",]\nmynet &lt;- read_sf(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams\", layer = \"Oreg_Streams\")\nst_crs(mynet) &lt;- st_crs(mysheds)\nmynet &lt;- st_intersection(mynet, mysheds)\nmynet &lt;- st_transform(mynet, crs = \"+proj=utm +zone=18\")\nst_write(mynet, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial/DonnerBlitzen_Streams_crop.shp\", append = FALSE)\n\n\nConvert flowline to riverdist network object:\n\n\nCode\n# West Brook\nflowline &lt;- line2network(path = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial\", layer = \"Mass_Streams_crop\")\n\n\n\n Units: metre \n\n Removed 2 segments with lengths shorter than the connectivity tolerance. \n\n\nCode\n# plot(flowline)\n# zoomtoseg(seg = c(4), rivers = flowline)\n# showends(seg = 4, rivers = flowline)\nflowline_wb &lt;- setmouth(seg = 4, vert = 1, rivers = flowline)\n\n# Staunton\nflowline &lt;- line2network(path = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial\", layer = \"Staunton_Streams_crop\")\n\n\n\n Units: metre \n\n\nCode\n# plot(flowline)\n# zoomtoseg(seg = c(2), rivers = flowline)\n# showends(seg = 2, rivers = flowline)\nflowline_st &lt;- setmouth(seg = 2, vert = 29, rivers = flowline)\n\n# Paine\nflowline &lt;- line2network(path = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial\", layer = \"Paine_Streams_crop\")\n\n\n\n Units: metre \n\n Removed 1 segments with lengths shorter than the connectivity tolerance. \n\n\nCode\n# plot(flowline)\n# zoomtoseg(seg = c(6), rivers = flowline)\n# showends(seg = 6, rivers = flowline)\nflowline_pa &lt;- setmouth(seg = 6, vert = 23, rivers = flowline)\n\n# Flathead\nflowline &lt;- line2network(path = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial\", layer = \"Flat_Streams_crop\")\n\n\n\n Units: metre \n\n Removed 28 segments with lengths shorter than the connectivity tolerance. \n\n\nCode\n# plot(flowline)\n# zoomtoseg(seg = c(6, 46, 59, 7), rivers = flowline)\n# showends(seg = 7, rivers = flowline)\nflowline_fl &lt;- setmouth(seg = 7, vert = 82, rivers = flowline)\n\n# Yellowstone\nflowline &lt;- line2network(path = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial\", layer = \"Yell_Streams_crop\")\n\n\n\n Units: metre \n\n Removed 2 segments with lengths shorter than the connectivity tolerance. \n\n\nCode\n# plot(flowline)\n# zoomtoseg(seg = c(6), rivers = flowline)\n# showends(seg = 6, rivers = flowline)\nflowline_ye &lt;- setmouth(seg = 6, vert = 197, rivers = flowline)\n\n# Snake\nflowline &lt;- line2network(path = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial\", layer = \"Snake_Streams_crop\")\n\n\n\n Units: metre \n\n Removed 3 segments with lengths shorter than the connectivity tolerance. \n\n\nCode\n# plot(flowline)\n# zoomtoseg(seg = c(22), rivers = flowline)\n# showends(seg = 22, rivers = flowline)\nflowline_sn &lt;- setmouth(seg = 22, vert = 88, rivers = flowline)\n\n# Donner Blitzen\nflowline &lt;- line2network(path = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial\", layer = \"DonnerBlitzen_Streams_crop\")\n\n\n\n Units: metre \n\n Removed 4 segments with lengths shorter than the connectivity tolerance. \n\n\nCode\n# plot(flowline)\n# zoomtoseg(seg = c(37,206, 209, 38), rivers = flowline)\n# showends(seg = 38, rivers = flowline)\nflowline_db &lt;- setmouth(seg = 38, vert = 20, rivers = flowline)\n\n\n\n\n3.5.1.2 Sites\nConvert focal sites to riverpoints, snapped to networks\n\nWest Brook\n\n\nCode\nmysites_wb &lt;- siteinfo %&gt;% filter(subbasin == \"West Brook\", site_name %in% unique(dat_clean$site_name))\nmysites_wb_sp &lt;- st_as_sf(mysites_wb, coords = c(\"long\", \"lat\"), crs = 4326)\nmysites_wb_sp &lt;- st_transform(mysites_wb_sp, crs = st_crs(mynet))\nmysites_wb_sp_xy &lt;- xy2segvert(x = st_coordinates(mysites_wb_sp)[,1], y = st_coordinates(mysites_wb_sp)[,2], rivers = flowline_wb)\nplot(flowline_wb)\nriverpoints(seg = mysites_wb_sp_xy$seg, vert = mysites_wb_sp_xy$vert, rivers = flowline_wb, pch = 16, col = \"blue\")\n\n\n\n\n\n\n\n\n\n\n\nStaunton\n\n\nCode\nmysites_st &lt;- siteinfo %&gt;% filter(subbasin == \"Staunton River\", site_name %in% unique(dat_clean$site_name))\nmysites_st_sp &lt;- st_as_sf(mysites_st, coords = c(\"long\", \"lat\"), crs = 4326)\nmysites_st_sp &lt;- st_transform(mysites_st_sp, crs = st_crs(mynet))\nmysites_st_sp_xy &lt;- xy2segvert(x = st_coordinates(mysites_st_sp)[,1], y = st_coordinates(mysites_st_sp)[,2], rivers = flowline_st)\nplot(flowline_st)\nriverpoints(seg = mysites_st_sp_xy$seg, vert = mysites_st_sp_xy$vert, rivers = flowline_st, pch = 16, col = \"blue\")\n\n\n\n\n\n\n\n\n\n\n\nPaine\n\n\nCode\nmysites_pa &lt;- siteinfo %&gt;% filter(subbasin == \"Paine Run\", site_name %in% unique(dat_clean$site_name))\nmysites_pa_sp &lt;- st_as_sf(mysites_pa, coords = c(\"long\", \"lat\"), crs = 4326)\nmysites_pa_sp &lt;- st_transform(mysites_pa_sp, crs = st_crs(mynet))\nmysites_pa_sp_xy &lt;- xy2segvert(x = st_coordinates(mysites_pa_sp)[,1], y = st_coordinates(mysites_pa_sp)[,2], rivers = flowline_pa)\nplot(flowline_pa)\nriverpoints(seg = mysites_pa_sp_xy$seg, vert = mysites_pa_sp_xy$vert, rivers = flowline_pa, pch = 16, col = \"blue\")\n\n\n\n\n\n\n\n\n\n\n\nFlathead\n\n\nCode\nmysites_fl &lt;- siteinfo %&gt;% filter(basin == \"Flathead\", site_name %in% unique(dat_clean$site_name))\nmysites_fl_sp &lt;- st_as_sf(mysites_fl, coords = c(\"long\", \"lat\"), crs = 4326)\nmysites_fl_sp &lt;- st_transform(mysites_fl_sp, crs = st_crs(mynet))\nmysites_fl_sp_xy &lt;- xy2segvert(x = st_coordinates(mysites_fl_sp)[,1], y = st_coordinates(mysites_fl_sp)[,2], rivers = flowline_fl)\nplot(flowline_fl)\nriverpoints(seg = mysites_fl_sp_xy$seg, vert = mysites_fl_sp_xy$vert, rivers = flowline_fl, pch = 16, col = \"blue\")\n\n\n\n\n\n\n\n\n\n\n\nYellowstone\n\n\nCode\nmysites_ye &lt;- siteinfo %&gt;% filter(subbasin == \"Shields River\", site_name %in% unique(dat_clean$site_name))\nmysites_ye_sp &lt;- st_as_sf(mysites_ye, coords = c(\"long\", \"lat\"), crs = 4326)\nmysites_ye_sp &lt;- st_transform(mysites_ye_sp, crs = st_crs(mynet))\nmysites_ye_sp_xy &lt;- xy2segvert(x = st_coordinates(mysites_ye_sp)[,1], y = st_coordinates(mysites_ye_sp)[,2], rivers = flowline_ye)\nplot(flowline_ye)\nriverpoints(seg = mysites_ye_sp_xy$seg, vert = mysites_ye_sp_xy$vert, rivers = flowline_ye, pch = 16, col = \"blue\")\n\n\n\n\n\n\n\n\n\n\n\nSnake\n\n\nCode\nmysites_sn &lt;- siteinfo %&gt;% filter(subbasin == \"Snake River\", site_name %in% unique(dat_clean$site_name))\nmysites_sn_sp &lt;- st_as_sf(mysites_sn, coords = c(\"long\", \"lat\"), crs = 4326)\nmysites_sn_sp &lt;- st_transform(mysites_sn_sp, crs = st_crs(mynet))\nmysites_sn_sp_xy &lt;- xy2segvert(x = st_coordinates(mysites_sn_sp)[,1], y = st_coordinates(mysites_sn_sp)[,2], rivers = flowline_sn)\nplot(flowline_sn)\nriverpoints(seg = mysites_sn_sp_xy$seg, vert = mysites_sn_sp_xy$vert, rivers = flowline_sn, pch = 16, col = \"blue\")\n\n\n\n\n\n\n\n\n\n\n\nDonner-Blitzen\n\n\nCode\nmysites_db &lt;- siteinfo %&gt;% filter(subbasin == \"Donner Blitzen\", site_name %in% unique(dat_clean$site_name))\nmysites_db_sp &lt;- st_as_sf(mysites_db, coords = c(\"long\", \"lat\"), crs = 4326)\nmysites_db_sp &lt;- st_transform(mysites_db_sp, crs = st_crs(mynet))\nmysites_db_sp_xy &lt;- xy2segvert(x = st_coordinates(mysites_db_sp)[,1], y = st_coordinates(mysites_db_sp)[,2], rivers = flowline_db)\nplot(flowline_db)\nriverpoints(seg = mysites_db_sp_xy$seg, vert = mysites_db_sp_xy$vert, rivers = flowline_db, pch = 16, col = \"blue\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.5.2 Pairwise distances\nCalculate pairwise geographic distances.\n\n3.5.2.1 Euclidean\n\n\nCode\n# West Brook\ndist_euclidean_wb &lt;- (st_distance(mysites_wb_sp, mysites_wb_sp)) / 1000\nattr(dist_euclidean_wb, \"units\") &lt;- NULL\nrow.names(dist_euclidean_wb) &lt;- mysites_wb$site_name\ncolnames(dist_euclidean_wb) &lt;- mysites_wb$site_name\ndist_euclidean_wb[upper.tri(dist_euclidean_wb, diag = TRUE)] &lt;- NA\nclass(dist_euclidean_wb) &lt;- \"matrix\"\n# dist_euclidean_wb\n\n# Stuanton\ndist_euclidean_st &lt;- (st_distance(mysites_st_sp, mysites_st_sp)) / 1000\nattr(dist_euclidean_st, \"units\") &lt;- NULL\nrow.names(dist_euclidean_st) &lt;- mysites_st$site_name\ncolnames(dist_euclidean_st) &lt;- mysites_st$site_name\ndist_euclidean_st[upper.tri(dist_euclidean_st, diag = TRUE)] &lt;- NA\nclass(dist_euclidean_st) &lt;- \"matrix\"\n# dist_euclidean_st\n\n# Paine\ndist_euclidean_pa &lt;- (st_distance(mysites_pa_sp, mysites_pa_sp)) / 1000\nattr(dist_euclidean_pa, \"units\") &lt;- NULL\nrow.names(dist_euclidean_pa) &lt;- mysites_pa$site_name\ncolnames(dist_euclidean_pa) &lt;- mysites_pa$site_name\ndist_euclidean_pa[upper.tri(dist_euclidean_pa, diag = TRUE)] &lt;- NA\nclass(dist_euclidean_pa) &lt;- \"matrix\"\n# dist_euclidean_pa\n\n# Flathead\ndist_euclidean_fl &lt;- (st_distance(mysites_fl_sp, mysites_fl_sp)) / 1000\nattr(dist_euclidean_fl, \"units\") &lt;- NULL\nrow.names(dist_euclidean_fl) &lt;- mysites_fl$site_name\ncolnames(dist_euclidean_fl) &lt;- mysites_fl$site_name\ndist_euclidean_fl[upper.tri(dist_euclidean_fl, diag = TRUE)] &lt;- NA\nclass(dist_euclidean_fl) &lt;- \"matrix\"\n# dist_euclidean_fl\n\n\n# Yellowstone\ndist_euclidean_ye &lt;- (st_distance(mysites_ye_sp, mysites_ye_sp)) / 1000\nattr(dist_euclidean_ye, \"units\") &lt;- NULL\nrow.names(dist_euclidean_ye) &lt;- mysites_ye$site_name\ncolnames(dist_euclidean_ye) &lt;- mysites_ye$site_name\ndist_euclidean_ye[upper.tri(dist_euclidean_ye, diag = TRUE)] &lt;- NA\nclass(dist_euclidean_ye) &lt;- \"matrix\"\n# dist_euclidean_ye\n\n# Snake\ndist_euclidean_sn &lt;- (st_distance(mysites_sn_sp, mysites_sn_sp)) / 1000\nattr(dist_euclidean_sn, \"units\") &lt;- NULL\nrow.names(dist_euclidean_sn) &lt;- mysites_sn$site_name\ncolnames(dist_euclidean_sn) &lt;- mysites_sn$site_name\ndist_euclidean_sn[upper.tri(dist_euclidean_sn, diag = TRUE)] &lt;- NA\nclass(dist_euclidean_sn) &lt;- \"matrix\"\n# dist_euclidean_sn\n\n# Donner Blitzen\ndist_euclidean_db &lt;- (st_distance(mysites_db_sp, mysites_db_sp)) / 1000\nattr(dist_euclidean_db, \"units\") &lt;- NULL\nrow.names(dist_euclidean_db) &lt;- mysites_db$site_name\ncolnames(dist_euclidean_db) &lt;- mysites_db$site_name\ndist_euclidean_db[upper.tri(dist_euclidean_db, diag = TRUE)] &lt;- NA\nclass(dist_euclidean_db) &lt;- \"matrix\"\n# dist_euclidean_db\n\n\n\n\n3.5.2.2 Watercourse\n\n\nCode\n# West Brook\ndist_watercourse_wb &lt;- riverdistancemat(mysites_wb_sp_xy$seg, mysites_wb_sp_xy$vert, flowline_wb) / 1000\nrow.names(dist_watercourse_wb) &lt;- mysites_wb$site_name\ncolnames(dist_watercourse_wb) &lt;- mysites_wb$site_name\ndist_watercourse_wb[upper.tri(dist_watercourse_wb, diag = TRUE)] &lt;- NA\n# dist_watercourse_wb\n\n# Staunton\ndist_watercourse_st &lt;- riverdistancemat(mysites_st_sp_xy$seg, mysites_st_sp_xy$vert, flowline_st) / 1000\nrow.names(dist_watercourse_st) &lt;- mysites_st$site_name\ncolnames(dist_watercourse_st) &lt;- mysites_st$site_name\ndist_watercourse_st[upper.tri(dist_watercourse_st, diag = TRUE)] &lt;- NA\n# dist_watercourse_st\n\n# Paine\ndist_watercourse_pa &lt;- riverdistancemat(mysites_pa_sp_xy$seg, mysites_pa_sp_xy$vert, flowline_pa) / 1000\nrow.names(dist_watercourse_pa) &lt;- mysites_pa$site_name\ncolnames(dist_watercourse_pa) &lt;- mysites_pa$site_name\ndist_watercourse_pa[upper.tri(dist_watercourse_pa, diag = TRUE)] &lt;- NA\n# dist_watercourse_pa\n\n# Flathead\ndist_watercourse_fl &lt;- riverdistancemat(mysites_fl_sp_xy$seg, mysites_fl_sp_xy$vert, flowline_fl) / 1000\nrow.names(dist_watercourse_fl) &lt;- mysites_fl$site_name\ncolnames(dist_watercourse_fl) &lt;- mysites_fl$site_name\ndist_watercourse_fl[upper.tri(dist_watercourse_fl, diag = TRUE)] &lt;- NA\n# dist_watercourse_fl\n\n# Yellowstone\ndist_watercourse_ye &lt;- riverdistancemat(mysites_ye_sp_xy$seg, mysites_ye_sp_xy$vert, flowline_ye) / 1000\nrow.names(dist_watercourse_ye) &lt;- mysites_ye$site_name\ncolnames(dist_watercourse_ye) &lt;- mysites_ye$site_name\ndist_watercourse_ye[upper.tri(dist_watercourse_ye, diag = TRUE)] &lt;- NA\n# dist_watercourse_ye\n\n# Snake\ndist_watercourse_sn &lt;- riverdistancemat(mysites_sn_sp_xy$seg, mysites_sn_sp_xy$vert, flowline_sn) / 1000\nrow.names(dist_watercourse_sn) &lt;- mysites_sn$site_name\ncolnames(dist_watercourse_sn) &lt;- mysites_sn$site_name\ndist_watercourse_sn[upper.tri(dist_watercourse_sn, diag = TRUE)] &lt;- NA\n# dist_watercourse_snake\n\n# Donner-Blitzen\ndist_watercourse_db &lt;- riverdistancemat(mysites_db_sp_xy$seg, mysites_db_sp_xy$vert, flowline_db) / 1000\nrow.names(dist_watercourse_db) &lt;- mysites_db$site_name\ncolnames(dist_watercourse_db) &lt;- mysites_db$site_name\ndist_watercourse_db[upper.tri(dist_watercourse_db, diag = TRUE)] &lt;- NA\n# dist_watercourse_db\n\n\n\n\n3.5.2.3 Flow-connected\n\n\nCode\n# West Brook\ndist_flowconn_wb &lt;- abs(upstreammat(mysites_wb_sp_xy$seg, mysites_wb_sp_xy$vert, flowline_wb, flowconnected = TRUE)) / 1000\nrow.names(dist_flowconn_wb) &lt;- mysites_wb$site_name\ncolnames(dist_flowconn_wb) &lt;- mysites_wb$site_name\ndist_flowconn_wb[upper.tri(dist_flowconn_wb, diag = TRUE)] &lt;- NA\n# dist_flowconn_wb\n\n# Staunton\ndist_flowconn_st &lt;- abs(upstreammat(mysites_st_sp_xy$seg, mysites_st_sp_xy$vert, flowline_st, flowconnected = TRUE)) / 1000\nrow.names(dist_flowconn_st) &lt;- mysites_st$site_name\ncolnames(dist_flowconn_st) &lt;- mysites_st$site_name\ndist_flowconn_st[upper.tri(dist_flowconn_st, diag = TRUE)] &lt;- NA\n# dist_flowconn_st\n\n# Paine\ndist_flowconn_pa &lt;- abs(upstreammat(mysites_pa_sp_xy$seg, mysites_pa_sp_xy$vert, flowline_pa, flowconnected = TRUE)) / 1000\nrow.names(dist_flowconn_pa) &lt;- mysites_pa$site_name\ncolnames(dist_flowconn_pa) &lt;- mysites_pa$site_name\ndist_flowconn_pa[upper.tri(dist_flowconn_pa, diag = TRUE)] &lt;- NA\n# dist_flowconn_pa\n\n# Flathead\ndist_flowconn_fl &lt;- abs(upstreammat(mysites_fl_sp_xy$seg, mysites_fl_sp_xy$vert, flowline_fl, flowconnected = TRUE)) / 1000\nrow.names(dist_flowconn_fl) &lt;- mysites_fl$site_name\ncolnames(dist_flowconn_fl) &lt;- mysites_fl$site_name\ndist_flowconn_fl[upper.tri(dist_flowconn_fl, diag = TRUE)] &lt;- NA\n# dist_flowconn_fl\n\n# Yellowstone\ndist_flowconn_ye &lt;- abs(upstreammat(mysites_ye_sp_xy$seg, mysites_ye_sp_xy$vert, flowline_ye, flowconnected = TRUE)) / 1000\nrow.names(dist_flowconn_ye) &lt;- mysites_ye$site_name\ncolnames(dist_flowconn_ye) &lt;- mysites_ye$site_name\ndist_flowconn_ye[upper.tri(dist_flowconn_ye, diag = TRUE)] &lt;- NA\n# dist_flowconn_ye\n\n# Snake\ndist_flowconn_sn &lt;- abs(upstreammat(mysites_sn_sp_xy$seg, mysites_sn_sp_xy$vert, flowline_sn, flowconnected = TRUE)) / 1000\nrow.names(dist_flowconn_sn) &lt;- mysites_sn$site_name\ncolnames(dist_flowconn_sn) &lt;- mysites_sn$site_name\ndist_flowconn_sn[upper.tri(dist_flowconn_sn, diag = TRUE)] &lt;- NA\n# dist_flowconn_sn\n\n# Donner Blitzen\ndist_flowconn_db &lt;- abs(upstreammat(mysites_db_sp_xy$seg, mysites_db_sp_xy$vert, flowline_db, flowconnected = TRUE)) / 1000\nrow.names(dist_flowconn_db) &lt;- mysites_db$site_name\ncolnames(dist_flowconn_db) &lt;- mysites_db$site_name\ndist_flowconn_db[upper.tri(dist_flowconn_db, diag = TRUE)] &lt;- NA\n# dist_flowconn_db\n\n\n\n\n\n3.5.3 Branching complexity\nRealized network/branching complexity, sensu Larsen et al. (2021)\nEuclidean distance ~ watercourse distance\n\n\nCode\ndisttib &lt;- tibble(basin = c(rep(\"West Brook\", times = length(as.numeric(dist_euclidean_wb / dist_watercourse_wb))),\n                            rep(\"Staunton River\", times = length(as.numeric(dist_euclidean_st / dist_watercourse_st))),\n                            rep(\"Paine Run\", times = length(as.numeric(dist_euclidean_pa / dist_watercourse_pa))),\n                            rep(\"Flathead River\", times = length(as.numeric(dist_euclidean_fl / dist_watercourse_fl))),\n                            rep(\"Yellowstone River\", times = length(as.numeric(dist_euclidean_ye / dist_watercourse_ye))),\n                            rep(\"Snake River\", times = length(as.numeric(dist_euclidean_sn / dist_watercourse_sn))),\n                            rep(\"Donner und Blitzen River\", times = length(as.numeric(dist_euclidean_db / dist_watercourse_db)))),\n       dist_euc = c(as.numeric(dist_euclidean_wb), \n                    as.numeric(dist_euclidean_st), \n                    as.numeric(dist_euclidean_pa), \n                    as.numeric(dist_euclidean_fl), \n                    as.numeric(dist_euclidean_ye), \n                    as.numeric(dist_euclidean_sn),\n                    as.numeric(dist_euclidean_db)),\n       dist_wat = c(as.numeric(dist_watercourse_wb), \n                    as.numeric(dist_watercourse_st),\n                    as.numeric(dist_watercourse_pa),\n                    as.numeric(dist_watercourse_fl),\n                    as.numeric(dist_watercourse_ye),\n                    as.numeric(dist_watercourse_sn),\n                    as.numeric(dist_watercourse_db)))\n\ndisttib %&gt;%\n  ggplot() +\n  geom_point(aes(x = dist_wat, y = dist_euc)) +\n  geom_abline(intercept = 0, slope = 1, linetype = 2) +\n  facet_wrap(~basin) +\n  xlab(\"Watercourse distance (km)\") + ylab(\"Euclidean distance (km)\") +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\n\nCode\nhull &lt;- disttib %&gt;% filter(!is.na(dist_euc), !is.na(dist_wat)) %&gt;% group_by(basin) %&gt;% slice(chull(dist_wat, dist_euc))\n\n\nggplot(data = disttib, aes(x = dist_wat, y = dist_euc, color = basin)) +\n  geom_point() +\n  geom_abline(intercept = 0, slope = 1, linetype = 2) +\n  geom_polygon(data = hull, aes(fill = basin), alpha = 0.5) +\n  #facet_wrap(~basin) +\n  xlab(\"Watercourse distance (km)\") + ylab(\"Euclidean distance (km)\") +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\n\nBoxplot of ratios (branching complexity)\n\n\nCode\ndedw_ratio &lt;- tibble(basin = c(rep(\"West Brook\", times = length(as.numeric(dist_euclidean_wb / dist_watercourse_wb))),\n                               rep(\"Staunton River\", times = length(as.numeric(dist_euclidean_st / dist_watercourse_st))),\n                               rep(\"Paine Run\", times = length(as.numeric(dist_euclidean_pa / dist_watercourse_pa))),\n                               rep(\"Flathead River\", times = length(as.numeric(dist_euclidean_fl / dist_watercourse_fl))),\n                               rep(\"Yellowstone River\", times = length(as.numeric(dist_euclidean_ye / dist_watercourse_ye))),\n                               rep(\"Snake River\", times = length(as.numeric(dist_euclidean_sn / dist_watercourse_sn))),\n                               rep(\"Donner und Blitzen River\", times = length(as.numeric(dist_euclidean_db / dist_watercourse_db)))),\n               dedw = c(as.numeric(dist_euclidean_wb / dist_watercourse_wb),\n                        as.numeric(dist_euclidean_st / dist_watercourse_st),\n                        as.numeric(dist_euclidean_pa / dist_watercourse_pa),\n                        as.numeric(dist_euclidean_fl / dist_watercourse_fl),\n                        as.numeric(dist_euclidean_ye / dist_watercourse_ye),\n                        as.numeric(dist_euclidean_sn / dist_watercourse_sn),\n                        as.numeric(dist_euclidean_db / dist_watercourse_db)))\n\n# plot\ndedw_ratio %&gt;% \n  mutate(basin = factor(basin, levels = c(\"West Brook\", \"Staunton River\", \"Paine Run\", \"Flathead River\", \"Yellowstone River\", \"Snake River\", \"Donner und Blitzen River\"))) %&gt;%\n  ggplot(aes(x = basin, y = dedw)) +\n  geom_boxplot(fill = \"grey\") +\n  ylab(\"Branching complexity (De/Dw)\") + xlab(\"Basin\") +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),\n        axis.text.x = element_text(angle = 45, hjust=1))\n\n\n\n\n\n\n\n\n\nCode\n#boxplot(dedw ~ basin, dedw, ylim = c(0,1), ylab = \"Branching complexity (De/Dw)\", labels = c(\"West Brook\"))\n\n\n\n\n3.5.4 Plot synchronograms\nCalculate Spearman’s r and time series distance\n\n\nCode\n## West Brook\n# basin objects\nmysites &lt;- mysites_wb\ndist_euclidean &lt;- dist_euclidean_wb\n# grab \nsitesss &lt;- mysites$site_name\ndat_clean2 &lt;- dat_clean %&gt;% filter(site_name %in% sitesss, Month %in% c(7:9))\nyrs &lt;- unique(dat_clean2$WaterYear)[c(1:4)]\n# set up empty arrays\nsynch_arr_sp &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\nsynch_arr_ts &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\n# fill arrays with Spearman's correlation coef and time series distance (euclidean)\nfor(k in 1:length(yrs)) {\n  for(i in 1:length(sitesss)) {\n    for(j in 1:length(sitesss)) {\n      dd &lt;- dat_clean2 %&gt;%\n        filter(WaterYear == yrs[k], site_name %in% c(sitesss[i], sitesss[j])) %&gt;%\n        select(date, site_name, logYield) %&gt;%\n        spread(key = site_name, value = logYield) \n      dd &lt;- dd[complete.cases(dd),]\n      if(dim(dd)[1] &lt;= 0.9*92 | dim(dd)[2] == 2) next\n      synch_arr_sp[i,j,k] &lt;- cor(dd[,sitesss[i]], dd[,sitesss[j]], use = \"complete.obs\", method = \"spearman\")\n      synch_arr_ts[i,j,k] &lt;- EuclideanDistance(unlist(dd[,sitesss[i]]), unlist(dd[,sitesss[j]]))\n    }\n  }\n}\n# set top triangles to NA\nfor(k in 1:length(yrs)) {\n  synch_arr_sp[,,k] &lt;- ifelse(synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE) == 0, NA, synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE))\n  synch_arr_ts[,,k] &lt;- ifelse(synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE) == 0, NA, synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE))\n}\nsynch_arr_sp_wb &lt;- synch_arr_sp\nsynch_arr_ts_wb &lt;- synch_arr_ts\n\n\n# Staunton\n# basin objects\nmysites &lt;- mysites_st\ndist_euclidean &lt;- dist_euclidean_st\n# grab \nsitesss &lt;- mysites$site_name\ndat_clean2 &lt;- dat_clean %&gt;% filter(site_name %in% sitesss, Month %in% c(7:9))\nyrs &lt;- unique(dat_clean2$WaterYear)[c(1:3)]\n# set up empty arrays\nsynch_arr_sp &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\nsynch_arr_ts &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\n# fill arrays with Spearman's correlation coef and time series distance (euclidean)\nfor(k in 1:length(yrs)) {\n  for(i in 1:length(sitesss)) {\n    for(j in 1:length(sitesss)) {\n      dd &lt;- dat_clean2 %&gt;%\n        filter(WaterYear == yrs[k], site_name %in% c(sitesss[i], sitesss[j])) %&gt;%\n        select(date, site_name, logYield) %&gt;%\n        spread(key = site_name, value = logYield) \n      dd &lt;- dd[complete.cases(dd),]\n      if(dim(dd)[1] &lt;= 0.9*92 | dim(dd)[2] == 2) next\n      synch_arr_sp[i,j,k] &lt;- cor(dd[,sitesss[i]], dd[,sitesss[j]], use = \"complete.obs\", method = \"spearman\")\n      synch_arr_ts[i,j,k] &lt;- EuclideanDistance(unlist(dd[,sitesss[i]]), unlist(dd[,sitesss[j]]))\n    }\n  }\n}\n# set top triangles to NA\nfor(k in 1:length(yrs)) {\n  synch_arr_sp[,,k] &lt;- ifelse(synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE) == 0, NA, synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE))\n  synch_arr_ts[,,k] &lt;- ifelse(synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE) == 0, NA, synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE))\n}\nsynch_arr_sp_st &lt;- synch_arr_sp\nsynch_arr_ts_st &lt;- synch_arr_ts\n\n\n# Paine\n# basin objects\nmysites &lt;- mysites_pa\ndist_euclidean &lt;- dist_euclidean_pa\n# grab \nsitesss &lt;- mysites$site_name\ndat_clean2 &lt;- dat_clean %&gt;% filter(site_name %in% sitesss, Month %in% c(7:9))\nyrs &lt;- unique(dat_clean2$WaterYear)[2]\n# set up empty arrays\nsynch_arr_sp &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\nsynch_arr_ts &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\n# fill arrays with Spearman's correlation coef and time series distance (euclidean)\nfor(k in 1:length(yrs)) {\n  for(i in 1:length(sitesss)) {\n    for(j in 1:length(sitesss)) {\n      dd &lt;- dat_clean2 %&gt;%\n        filter(WaterYear == yrs[k], site_name %in% c(sitesss[i], sitesss[j])) %&gt;%\n        select(date, site_name, logYield) %&gt;%\n        spread(key = site_name, value = logYield) \n      dd &lt;- dd[complete.cases(dd),]\n      if(dim(dd)[1] &lt;= 0.9*92 | dim(dd)[2] == 2) next\n      synch_arr_sp[i,j,k] &lt;- cor(dd[,sitesss[i]], dd[,sitesss[j]], use = \"complete.obs\", method = \"spearman\")\n      synch_arr_ts[i,j,k] &lt;- EuclideanDistance(unlist(dd[,sitesss[i]]), unlist(dd[,sitesss[j]]))\n    }\n  }\n}\n# set top triangles to NA\nfor(k in 1:length(yrs)) {\n  synch_arr_sp[,,k] &lt;- ifelse(synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE) == 0, NA, synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE))\n  synch_arr_ts[,,k] &lt;- ifelse(synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE) == 0, NA, synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE))\n}\nsynch_arr_sp_pa &lt;- synch_arr_sp\nsynch_arr_ts_pa &lt;- synch_arr_ts\n\n\n# Flathead\n# basin objects\nmysites &lt;- mysites_fl\ndist_euclidean &lt;- dist_euclidean_fl\n# grab \nsitesss &lt;- mysites$site_name\ndat_clean2 &lt;- dat_clean %&gt;% filter(site_name %in% sitesss, Month %in% c(7:9))\nyrs &lt;- unique(dat_clean2$WaterYear)[c(2:5)]\n# set up empty arrays\nsynch_arr_sp &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\nsynch_arr_ts &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\n# fill arrays with Spearman's correlation coef and time series distance (euclidean)\nfor(k in 1:length(yrs)) {\n  for(i in 1:length(sitesss)) {\n    for(j in 1:length(sitesss)) {\n      dd &lt;- dat_clean2 %&gt;%\n        filter(WaterYear == yrs[k], site_name %in% c(sitesss[i], sitesss[j])) %&gt;%\n        select(date, site_name, logYield) %&gt;%\n        spread(key = site_name, value = logYield) \n      dd &lt;- dd[complete.cases(dd),]\n      if(dim(dd)[1] &lt;= 0.9*92 | dim(dd)[2] == 2) next\n      synch_arr_sp[i,j,k] &lt;- cor(dd[,sitesss[i]], dd[,sitesss[j]], use = \"complete.obs\", method = \"spearman\")\n      synch_arr_ts[i,j,k] &lt;- EuclideanDistance(unlist(dd[,sitesss[i]]), unlist(dd[,sitesss[j]]))\n    }\n  }\n}\n# set top triangles to NA\nfor(k in 1:length(yrs)) {\n  synch_arr_sp[,,k] &lt;- ifelse(synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE) == 0, NA, synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE))\n  synch_arr_ts[,,k] &lt;- ifelse(synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE) == 0, NA, synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE))\n}\nsynch_arr_sp_fl &lt;- synch_arr_sp\nsynch_arr_ts_fl &lt;- synch_arr_ts\n\n\n# Yellowstone\n# basin objects\nmysites &lt;- mysites_ye\ndist_euclidean &lt;- dist_euclidean_ye\n# grab \nsitesss &lt;- mysites$site_name\ndat_clean2 &lt;- dat_clean %&gt;% filter(site_name %in% sitesss, Month %in% c(7:9))\nyrs &lt;- unique(dat_clean2$WaterYear)[c(2,3,5)]\n# set up empty arrays\nsynch_arr_sp &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\nsynch_arr_ts &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\n# fill arrays with Spearman's correlation coef and time series distance (euclidean)\nfor(k in 1:length(yrs)) {\n  for(i in 1:length(sitesss)) {\n    for(j in 1:length(sitesss)) {\n      dd &lt;- dat_clean2 %&gt;%\n        filter(WaterYear == yrs[k], site_name %in% c(sitesss[i], sitesss[j])) %&gt;%\n        select(date, site_name, logYield) %&gt;%\n        spread(key = site_name, value = logYield) \n      dd &lt;- dd[complete.cases(dd),]\n      if(dim(dd)[1] &lt;= 0.9*92 | dim(dd)[2] == 2) next\n      synch_arr_sp[i,j,k] &lt;- cor(dd[,sitesss[i]], dd[,sitesss[j]], use = \"complete.obs\", method = \"spearman\")\n      synch_arr_ts[i,j,k] &lt;- EuclideanDistance(unlist(dd[,sitesss[i]]), unlist(dd[,sitesss[j]]))\n    }\n  }\n}\n# set top triangles to NA\nfor(k in 1:length(yrs)) {\n  synch_arr_sp[,,k] &lt;- ifelse(synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE) == 0, NA, synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE))\n  synch_arr_ts[,,k] &lt;- ifelse(synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE) == 0, NA, synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE))\n}\nsynch_arr_sp_ye &lt;- synch_arr_sp\nsynch_arr_ts_ye &lt;- synch_arr_ts\n\n\n# Snake\n# basin objects\nmysites &lt;- mysites_sn\ndist_euclidean &lt;- dist_euclidean_sn\n# grab \nsitesss &lt;- mysites$site_name\ndat_clean2 &lt;- dat_clean %&gt;% filter(site_name %in% sitesss, Month %in% c(7:9))\nyrs &lt;- unique(dat_clean2$WaterYear)[c(1,3,4)]\n# set up empty arrays\nsynch_arr_sp &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\nsynch_arr_ts &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\n# fill arrays with Spearman's correlation coef and time series distance (euclidean)\nfor(k in 1:length(yrs)) {\n  for(i in 1:length(sitesss)) {\n    for(j in 1:length(sitesss)) {\n      dd &lt;- dat_clean2 %&gt;%\n        filter(WaterYear == yrs[k], site_name %in% c(sitesss[i], sitesss[j])) %&gt;%\n        select(date, site_name, logYield) %&gt;%\n        spread(key = site_name, value = logYield) \n      dd &lt;- dd[complete.cases(dd),]\n      if(dim(dd)[1] &lt;= 0.9*92 | dim(dd)[2] == 2) next\n      synch_arr_sp[i,j,k] &lt;- cor(dd[,sitesss[i]], dd[,sitesss[j]], use = \"complete.obs\", method = \"spearman\")\n      synch_arr_ts[i,j,k] &lt;- EuclideanDistance(unlist(dd[,sitesss[i]]), unlist(dd[,sitesss[j]]))\n    }\n  }\n}\n# set top triangles to NA\nfor(k in 1:length(yrs)) {\n  synch_arr_sp[,,k] &lt;- ifelse(synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE) == 0, NA, synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE))\n  synch_arr_ts[,,k] &lt;- ifelse(synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE) == 0, NA, synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE))\n}\nsynch_arr_sp_sn &lt;- synch_arr_sp\nsynch_arr_ts_sn &lt;- synch_arr_ts\n\n\n# Donner Blitzen\n# basin objects\nmysites &lt;- mysites_db\ndist_euclidean &lt;- dist_euclidean_db\n# grab \nsitesss &lt;- mysites$site_name\ndat_clean2 &lt;- dat_clean %&gt;% filter(site_name %in% sitesss, Month %in% c(7:9))\nyrs &lt;- unique(dat_clean2$WaterYear)[c(2:4)]\n# set up empty arrays\nsynch_arr_sp &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\nsynch_arr_ts &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\n# fill arrays with Spearman's correlation coef and time series distance (euclidean)\nfor(k in 1:length(yrs)) {\n  for(i in 1:length(sitesss)) {\n    for(j in 1:length(sitesss)) {\n      dd &lt;- dat_clean2 %&gt;%\n        filter(WaterYear == yrs[k], site_name %in% c(sitesss[i], sitesss[j])) %&gt;%\n        select(date, site_name, logYield) %&gt;%\n        spread(key = site_name, value = logYield) \n      dd &lt;- dd[complete.cases(dd),]\n      if(dim(dd)[1] &lt;= 0.9*92 | dim(dd)[2] == 2) next\n      synch_arr_sp[i,j,k] &lt;- cor(dd[,sitesss[i]], dd[,sitesss[j]], use = \"complete.obs\", method = \"spearman\")\n      synch_arr_ts[i,j,k] &lt;- EuclideanDistance(unlist(dd[,sitesss[i]]), unlist(dd[,sitesss[j]]))\n    }\n  }\n}\n# set top triangles to NA\nfor(k in 1:length(yrs)) {\n  synch_arr_sp[,,k] &lt;- ifelse(synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE) == 0, NA, synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE))\n  synch_arr_ts[,,k] &lt;- ifelse(synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE) == 0, NA, synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE))\n}\nsynch_arr_sp_db &lt;- synch_arr_sp\nsynch_arr_ts_db &lt;- synch_arr_ts\n\n\nCreate plotting function\n\n\nCode\nfluvsynchfun &lt;- function(subbas, spear, ts, dist_euc, dist_wat, dist_flow) {\n  synch_arr_sp &lt;- spear\n  synch_arr_ts &lt;- ts\n  dist_euclidean &lt;- dist_euc\n  dist_watercourse &lt;- dist_wat\n  dist_flowconn &lt;- dist_flow\n  \n  synchtib &lt;- tibble(basin = rep(subbas, times = length(as.numeric(synch_arr_sp))),\n                   wateryear = sort(rep(as.numeric(dimnames(synch_arr_sp)[[3]]), times = dim(synch_arr_sp)[1]*dim(synch_arr_sp)[2])),\n                   synch_sp = as.numeric(synch_arr_sp),\n                   synch_ts = as.numeric(synch_arr_ts),\n                   euclidean = rep(as.numeric(dist_euclidean), times = dim(synch_arr_sp)[3]),\n                   watercourse = rep(as.numeric(dist_watercourse), times = dim(synch_arr_sp)[3]),\n                   flowconnected = rep(as.numeric(dist_flowconn), times = dim(synch_arr_sp)[3])) %&gt;% \n  gather(euclidean:flowconnected, key = \"distance\", value = \"value\")\n\n# Spearman correlation\nfs_sp &lt;- synchtib %&gt;%\n  mutate(distance = factor(distance, levels = c(\"flowconnected\", \"watercourse\", \"euclidean\"))) %&gt;%\n  ggplot(aes(x = value, y = synch_sp, color = distance, fill = distance, group = distance)) +\n  geom_smooth(alpha = 0.2, se = FALSE, span = 1) +\n  geom_point(alpha = 0.5) +\n  scale_color_manual(values = c(\"blue\", \"purple\", \"gold1\")) +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"gold1\")) +\n  facet_wrap(~wateryear, nrow = 1) +\n  ylab(\"Spearman's corr\") + xlab(\"Distance (km)\") +\n  #coord_cartesian(ylim = c(0,1)) +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title.x=element_blank())\n\n# Time series distance (euclidean)\nfs_ts &lt;- synchtib %&gt;%\n  mutate(distance = factor(distance, levels = c(\"flowconnected\", \"watercourse\", \"euclidean\"))) %&gt;%\n  ggplot(aes(x = value, y = synch_ts, color = distance, fill = distance, group = distance)) +\n  geom_smooth(alpha = 0.2, se = FALSE, span = 1) +\n  geom_point(alpha = 0.5) +\n  scale_color_manual(values = c(\"blue\", \"purple\", \"gold1\")) +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"gold1\")) +\n  facet_wrap(~wateryear, nrow = 1) +\n  ylab(\"TS distance\") + xlab(\"Distance (km)\") +\n  #coord_cartesian(ylim = c(0,20)) +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title.x=element_blank())\n\n# \n# # Spearman correlation\n# fs_sp2 &lt;- synchtib %&gt;%\n#   filter(distance %in% c(\"dist_flo\")) %&gt;%\n#   mutate(distance = factor(distance, levels = c(\"dist_flo\", \"dist_dis\"))) %&gt;%\n#   ggplot(aes(x = value, y = synch_sp, color = distance, fill = distance, group = distance)) +\n#   geom_smooth(alpha = 0.2) +\n#   geom_point(alpha = 0.5) +\n#   scale_color_manual(values = c(\"blue\", \"darkorange\")) +\n#   scale_fill_manual(values = c(\"blue\", \"darkorange\")) +\n#   facet_wrap(~wateryear, nrow = 1) +\n#   ylab(\"Spearman's corr.\") + xlab(\"Distance (km)\") +\n#   coord_cartesian(ylim = c(0,1)) +\n#   theme_bw() +\n#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title.x=element_blank())\n# \n# # Time series distance (euclidean)\n# fs_ts2 &lt;- synchtib %&gt;%\n#   filter(distance %in% c(\"dist_flo\", \"dist_dis\")) %&gt;%\n#   mutate(distance = factor(distance, levels = c(\"dist_flo\", \"dist_dis\"))) %&gt;%\n#   ggplot(aes(x = value, y = synch_ts, color = distance, fill = distance, group = distance)) +\n#   geom_smooth(alpha = 0.2) +\n#   geom_point(alpha = 0.5) +\n#   scale_color_manual(values = c(\"blue\", \"darkorange\")) +\n#   scale_fill_manual(values = c(\"blue\", \"darkorange\")) +\n#   facet_wrap(~wateryear, nrow = 1) +\n#   ylab(\"TS distance\") + xlab(\"Distance (km)\") +\n#   coord_cartesian(ylim = c(0,20)) +\n#   theme_bw() +\n#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title.x=element_blank())\n# \nmyplot &lt;- ggarrange(fs_sp, fs_ts, ncol = 1)\nannotate_figure(myplot, bottom = text_grob(\"Distance (km)\"))\n}\n\n\nPlot fluvial synchrograms\n\nWest BrookStauntonPaineFlatheadYellowstoneSnakeDonner-Blitzen\n\n\n\n\nCode\nfluvsynchfun(subbas = \"West Brook\", spear = synch_arr_sp_wb, ts = synch_arr_ts_wb,\n             dist_euc = dist_euclidean_wb, dist_wat = dist_watercourse_wb, dist_flow = dist_flowconn_wb)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfluvsynchfun(subbas = \"Staunton River\", spear = synch_arr_sp_st, ts = synch_arr_ts_st,\n             dist_euc = dist_euclidean_st, dist_wat = dist_watercourse_st, dist_flow = dist_flowconn_st)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfluvsynchfun(subbas = \"Paine Run\", spear = synch_arr_sp_pa, ts = synch_arr_ts_pa,\n             dist_euc = dist_euclidean_pa, dist_wat = dist_watercourse_pa, dist_flow = dist_flowconn_pa)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfluvsynchfun(subbas = \"Flathead River\", spear = synch_arr_sp_fl, ts = synch_arr_ts_fl,\n             dist_euc = dist_euclidean_fl, dist_wat = dist_watercourse_fl, dist_flow = dist_flowconn_fl)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfluvsynchfun(subbas = \"Yellowstone River\", spear = synch_arr_sp_ye, ts = synch_arr_ts_ye,\n             dist_euc = dist_euclidean_ye, dist_wat = dist_watercourse_ye, dist_flow = dist_flowconn_ye)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfluvsynchfun(subbas = \"Snake River\", spear = synch_arr_sp_sn, ts = synch_arr_ts_sn,\n             dist_euc = dist_euclidean_sn, dist_wat = dist_watercourse_sn, dist_flow = dist_flowconn_sn)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfluvsynchfun(subbas = \"Donner und Blitzen River\", spear = synch_arr_sp_db, ts = synch_arr_ts_db,\n             dist_euc = dist_euclidean_db, dist_wat = dist_watercourse_db, dist_flow = dist_flowconn_db)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsynchtib &lt;- tibble(basin = c(rep(\"West Brook\", times = length(as.numeric(synch_mat))),\n                             rep(\"Snake River\", times = length(as.numeric(synch_mat_snake)))),\n                   synch_sp = c(as.numeric(synch_mat_sp), as.numeric(synch_mat_snake_sp)),\n                   synch_ts = c(as.numeric(synch_mat_ts), as.numeric(synch_mat_snake_ts)),\n                   dist_euc = c(as.numeric(dist_euclidean), as.numeric(dist_euclidean_snake)),\n                   dist_wat = c(as.numeric(dist_watercourse), as.numeric(dist_watercourse_snake)),\n                   dist_flo = c(as.numeric(dist_flowconn), as.numeric(dist_flowconn_snake)),\n                   dist_dis = c(as.numeric(dist_flowdisconn), as.numeric(dist_flowdisconn_snake))) %&gt;% \n  gather(dist_euc:dist_dis, key = \"distance\", value = \"value\")\n\n# Spearman correlation\nsynchtib %&gt;%\n  filter(!distance %in% c(\"dist_dis\")) %&gt;%\n  mutate(distance = factor(distance, levels = c(\"dist_flo\", \"dist_wat\", \"dist_euc\"))) %&gt;%\n  ggplot(aes(x = value, y = synch_sp, color = distance, fill = distance, group = distance)) +\n  geom_smooth(alpha = 0.3) +\n  geom_point(aes(x = jitter(value, factor = 300), y = jitter(synch_sp, factor = 300))) +\n  scale_color_manual(values = c(\"blue\", \"purple\", \"gold1\")) +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"gold1\")) +\n  facet_wrap(~basin, scales = \"free_x\") +\n  ylab(\"Spearman's correlation\") + xlab(\"Distance (km)\") +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n# Time series distance (euclidean)\nsynchtib %&gt;%\n  filter(!distance %in% c(\"dist_dis\")) %&gt;%\n  mutate(distance = factor(distance, levels = c(\"dist_flo\", \"dist_wat\", \"dist_euc\")))%&gt;%\n  ggplot(aes(x = value, y = synch_ts, color = distance, fill = distance, group = distance)) +\n  geom_smooth(alpha = 0.3) +\n  geom_point(aes(x = jitter(value, factor = 200), y = jitter(synch_ts, factor = 200))) +\n  scale_color_manual(values = c(\"blue\", \"purple\", \"gold1\")) +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"gold1\")) +\n  facet_wrap(~basin, scales = \"free_x\") +\n  ylab(\"Time series distance\") + xlab(\"Distance (km)\") +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n\n# Spearman correlation\nsynchtib %&gt;%\n  filter(distance %in% c(\"dist_flo\", \"dist_dis\")) %&gt;%\n  mutate(distance = factor(distance, levels = c(\"dist_flo\", \"dist_dis\"))) %&gt;%\n  ggplot(aes(x = value, y = synch_sp, color = distance, fill = distance, group = distance)) +\n  geom_smooth(alpha = 0.3) +\n  geom_point(aes(x = jitter(value, factor = 300), y = jitter(synch_sp, factor = 300))) +\n  scale_color_manual(values = c(\"blue\", \"darkorange\")) +\n  scale_fill_manual(values = c(\"blue\", \"darkorange\")) +\n  facet_wrap(~basin, scales = \"free_x\") +\n  ylab(\"Spearman's correlation\") + xlab(\"Distance (km)\") +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n# Time series distance (euclidean)\nsynchtib %&gt;%\n  filter(distance %in% c(\"dist_flo\", \"dist_dis\")) %&gt;%\n  mutate(distance = factor(distance, levels = c(\"dist_flo\", \"dist_dis\"))) %&gt;%\n  ggplot(aes(x = value, y = synch_ts, color = distance, fill = distance, group = distance)) +\n  geom_smooth(alpha = 0.3) +\n  geom_point(aes(x = jitter(value, factor = 200), y = jitter(synch_ts, factor = 200))) +\n  scale_color_manual(values = c(\"blue\", \"darkorange\")) +\n  scale_fill_manual(values = c(\"blue\", \"darkorange\")) +\n  facet_wrap(~basin, scales = \"free_x\") +\n  ylab(\"Time series distance\") + xlab(\"Distance (km)\") +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n\n\n\nCode\ntibble(basin = c(rep(\"West Brook\", times = length(as.numeric(synch_mat))),\n                 rep(\"Snake River\", times = length(as.numeric(synch_mat_snake)))),\n       synch_sp = c(as.numeric(synch_mat_sp), as.numeric(synch_mat_snake_sp)),\n       synch_ts = c(as.numeric(synch_mat_ts), as.numeric(synch_mat_snake_ts)),\n       dist_euc = c(as.numeric(dist_euclidean), as.numeric(dist_euclidean_snake)),\n       dist_wat = c(as.numeric(dist_watercourse), as.numeric(dist_watercourse_snake)),\n       dist_flo = c(as.numeric(dist_flowconn), as.numeric(dist_flowconn_snake)),\n       dist_dis = c(as.numeric(dist_flowdisconn), as.numeric(dist_flowdisconn_snake))) %&gt;%\n  mutate(dedw = dist_euc / dist_wat) %&gt;%\n  ggplot(aes(x = dedw, y = synch_ts)) +\n  geom_smooth(alpha = 0.3, method = \"lm\") +\n  geom_point(aes(x = dedw, y = synch_ts)) +\n  facet_wrap(~basin, scales = \"free_x\") +\n  ylab(\"Time series distance\") + xlab(\"de/dw\") +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\ntibble(basin = c(rep(\"West Brook\", times = length(as.numeric(synch_mat))),\n                 rep(\"Snake River\", times = length(as.numeric(synch_mat_snake)))),\n       synch_sp = c(as.numeric(synch_mat_sp), as.numeric(synch_mat_snake_sp)),\n       synch_ts = c(as.numeric(synch_mat_ts), as.numeric(synch_mat_snake_ts)),\n       dist_euc = c(as.numeric(dist_euclidean), as.numeric(dist_euclidean_snake)),\n       dist_wat = c(as.numeric(dist_watercourse), as.numeric(dist_watercourse_snake)),\n       dist_flo = c(as.numeric(dist_flowconn), as.numeric(dist_flowconn_snake)),\n       dist_dis = c(as.numeric(dist_flowdisconn), as.numeric(dist_flowdisconn_snake))) %&gt;%\n  mutate(dedw = dist_euc / dist_wat) %&gt;%\n  ggplot(aes(x = dedw, y = synch_sp)) +\n  geom_smooth(alpha = 0.3, method = \"lm\") +\n  geom_point(aes(x = dedw, y = synch_sp)) +\n  facet_wrap(~basin, scales = \"free_x\") +\n  ylab(\"Spearman correlation\") + xlab(\"de/dw\") +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n\n\n\n3.5.5 Combined figure\nPlotting function\n\n\nCode\nfluvsynchfun_mod &lt;- function(subbas, spear, ts, dist_euc, dist_wat, dist_flow) {\n  synch_arr_sp &lt;- spear\n  synch_arr_ts &lt;- ts\n  dist_euclidean &lt;- dist_euc\n  dist_watercourse &lt;- dist_wat\n  dist_flowconn &lt;- dist_flow\n  \n  synchtib &lt;- tibble(basin = rep(subbas, times = length(as.numeric(synch_arr_sp))),\n                   wateryear = sort(rep(as.numeric(dimnames(synch_arr_sp)[[3]]), times = dim(synch_arr_sp)[1]*dim(synch_arr_sp)[2])),\n                   synch_sp = as.numeric(synch_arr_sp),\n                   synch_ts = as.numeric(synch_arr_ts),\n                   euclidean = rep(as.numeric(dist_euclidean), times = dim(synch_arr_sp)[3]),\n                   watercourse = rep(as.numeric(dist_watercourse), times = dim(synch_arr_sp)[3]),\n                   flowconnected = rep(as.numeric(dist_flowconn), times = dim(synch_arr_sp)[3])) %&gt;% \n  gather(euclidean:flowconnected, key = \"distance\", value = \"value\")\n\n# Spearman correlation\n# fs_sp &lt;- synchtib %&gt;%\n#   filter(distance != \"watercourse\") %&gt;%\n#   mutate(distance = factor(distance, levels = c(\"flowconnected\", \"watercourse\", \"euclidean\"))) %&gt;%\n#   ggplot(aes(x = value, y = synch_sp, color = distance, fill = distance, group = distance)) +\n#   geom_smooth(alpha = 0.2, se = FALSE) +\n#   geom_point(alpha = 0.5) +\n#   scale_color_manual(values = c(\"blue\", \"purple\")) +\n#   scale_fill_manual(values = c(\"blue\", \"purple\")) +\n#   facet_wrap(~wateryear, nrow = 1) +\n#   ylab(\"Spearman's corr\") + xlab(\"Distance (km)\") +\n#   #coord_cartesian(ylim = c(0,1)) +\n#   theme_bw() +\n#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title.x=element_blank())\n\n# Time series distance (euclidean)\nfs_ts &lt;- synchtib %&gt;%\n  filter(distance != \"watercourse\") %&gt;%\n  mutate(distance = factor(distance, levels = c(\"euclidean\", \"flowconnected\"))) %&gt;%\n  ggplot(aes(x = value, y = synch_ts, color = distance, fill = distance, group = distance)) +\n  geom_smooth(alpha = 0.2, span = 1, span = 1) +\n  geom_point(alpha = 0.2) +\n  scale_color_manual(values = c(\"blue\", \"darkorange\")) +\n  scale_fill_manual(values = c(\"blue\", \"darkorange\")) +\n  ggh4x::facet_wrap2(~wateryear, nrow = 1, ncol = 4, trim_blank = FALSE) +\n  ylab(\"\") + xlab(\"\") + ggtitle(subbas) +\n  #coord_cartesian(ylim = c(0,20)) +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), \n        axis.title.x=element_blank(), axis.title.y = element_blank())\n\n# myplot &lt;- ggarrange(fs_sp, fs_ts, ncol = 1)\n# annotate_figure(myplot, bottom = text_grob(\"Distance (km)\"))\nprint(fs_ts)\n}\n\n\n\n\nCode\nggarrange(fluvsynchfun_mod(subbas = \"West Brook\", spear = synch_arr_sp_wb, ts = synch_arr_ts_wb,\n                                dist_euc = dist_euclidean_wb, dist_wat = dist_watercourse_wb, dist_flow = dist_flowconn_wb),\n               fluvsynchfun_mod(subbas = \"Staunton River\", spear = synch_arr_sp_st, ts = synch_arr_ts_st,\n                                dist_euc = dist_euclidean_st, dist_wat = dist_watercourse_st, dist_flow = dist_flowconn_st),\n               fluvsynchfun_mod(subbas = \"Paine Run\", spear = synch_arr_sp_pa, ts = synch_arr_ts_pa,\n                                dist_euc = dist_euclidean_pa, dist_wat = dist_watercourse_pa, dist_flow = dist_flowconn_pa),\n               fluvsynchfun_mod(subbas = \"Flathead River\", spear = synch_arr_sp_fl, ts = synch_arr_ts_fl,\n                                dist_euc = dist_euclidean_fl, dist_wat = dist_watercourse_fl, dist_flow = dist_flowconn_fl),\n               fluvsynchfun_mod(subbas = \"Yellowstone River\", spear = synch_arr_sp_ye, ts = synch_arr_ts_ye,\n                                dist_euc = dist_euclidean_ye, dist_wat = dist_watercourse_ye, dist_flow = matrix(NA, nrow = nrow(dist_flowconn_ye), ncol = ncol(dist_flowconn_ye))),\n               fluvsynchfun_mod(subbas = \"Snake River\", spear = synch_arr_sp_sn, ts = synch_arr_ts_sn,\n                                dist_euc = dist_euclidean_sn, dist_wat = dist_watercourse_sn, dist_flow = dist_flowconn_sn),\n               fluvsynchfun_mod(subbas = \"Donner und Blitzen River\", spear = synch_arr_sp_db, ts = synch_arr_ts_db,\n                                dist_euc = dist_euclidean_db, dist_wat = dist_watercourse_db, dist_flow = dist_flowconn_db),\n               ncol = 1\n               )\n\n\n\n\n\n\n\n\n\nCode\n# jpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/FluvialSynchrograms.jpg\", width = 7, height = 12, units = \"in\", res = 1000)\n# annotate_figure(p1, bottom = \"Distance (km)\", left = \"Time series distance\")\n# dev.off()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Spatiotemporal Variation</span>"
    ]
  },
  {
    "objectID": "VarByClimate.html",
    "href": "VarByClimate.html",
    "title": "4  Variation by Climate",
    "section": "",
    "text": "4.1 Data\nPurpose: Quantify the effect of interannual variation in climatic conditions (water availability) on spatialy variability in headwater flow regimes.\nSite information\nCode\nsiteinfo &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_SiteInformation.csv\")\nsiteinfo_sp &lt;- st_as_sf(siteinfo, coords = c(\"long\", \"lat\"), crs = 4326)\nLittle g’s (headwater sites)\nCode\ndat_clean &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/LittleG_data_clean.csv\")\nBig G’s (reference gages)\nCode\ndat_clean_big &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/BigG_data_clean.csv\")\nWater availability. In western, snowmelt-dominated basins, annual (water year) total yield is strongly related to summer total yield. But in eastern, rain-dominated basins, the relationship is much weaker, suggesting “faster” response to climate forcing in rain-dominated basins. Use total summer yield (percentile) as metric of interannual variation in water availability.\nCode\nwateravail &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/BigG_wateravailability_annual.csv\") %&gt;%\n  filter(!is.na(totalyield), !is.na(totalyield_sum)) %&gt;%\n  group_by(site_name) %&gt;%\n  mutate(tyz_perc = percentile(totalyield_z),\n         tyz_sum_perc = percentile(totalyield_sum_z)) %&gt;%\n  mutate(tyz_perc = ifelse(is.na(tyz_perc), 0, tyz_perc),\n         tyz_sum_perc = ifelse(is.na(tyz_sum_perc), 0, tyz_sum_perc))\n\nwateravail %&gt;% \n  filter(basin != \"Piney River\") %&gt;%\n  mutate(basin = ifelse(basin == \"Shields River\", \"Yellowstone River\", basin)) %&gt;%\n  mutate(basin = factor(basin, levels = c(\"West Brook\", \"Staunton River\", \"Paine Run\", \"Flathead\", \"Yellowstone River\", \"Snake River\", \"Donner Blitzen\"))) %&gt;%\n  ggplot(aes(x = tyz_perc, y = tyz_sum_perc)) + \n  geom_point() + \n  geom_smooth(method = \"lm\") +\n  xlab(\"Total annual yield (percentile)\") + ylab(\"Total summer yield (percentile)\") + \n  facet_wrap(~basin) + theme_bw()\nOrder sites\nCode\nwborder &lt;- c(\"West Brook NWIS\", \"West Brook Lower\", \"Mitchell Brook\", \"Jimmy Brook\", \"Obear Brook Lower\", \"West Brook Upper\", \"West Brook Reservoir\", \"Sanderson Brook\", \"Avery Brook\", \"West Whately Brook\")\npaineorder &lt;- c(\"Paine Run 10\", \"Paine Run 08\", \"Paine Run 07\", \"Paine Run 06\", \"Paine Run 02\", \"Paine Run 01\")\nstauntorder &lt;- c(\"Staunton River 10\", \"Staunton River 09\", \"Staunton River 07\", \"Staunton River 06\", \"Staunton River 03\", \"Staunton River 02\")\nflatorder &lt;- c(\"BigCreekLower\", \"LangfordCreekLower\", \"LangfordCreekUpper\", \"Big Creek NWIS\", \"BigCreekUpper\", \"HallowattCreekLower\", \"NicolaCreek\", \"WernerCreek\", \"Hallowat Creek NWIS\", \"CoalCreekLower\", \"CycloneCreekLower\", \"CycloneCreekMiddle\", \"CycloneCreekUpper\", \"CoalCreekMiddle\", \"CoalCreekNorth\", \"CoalCreekHeadwaters\", \"McGeeCreekLower\", \"McGeeCreekTrib\", \"McGeeCreekUpper\")\nyellorder &lt;- c(\"Shields River Valley Ranch\", \"Deep Creek\", \"Crandall Creek\", \"Buck Creek\", \"Dugout Creek\", \"Shields River ab Dugout\", \"Lodgepole Creek\", \"EF Duck Creek be HF\", \"EF Duck Creek ab HF\", \"Henrys Fork\")\nsnakeorder &lt;- c(\"Spread Creek Dam\", \"Rock Creek\", \"NF Spread Creek Lower\", \"NF Spread Creek Upper\", \"Grizzly Creek\", \"SF Spread Creek Lower\", \"Grouse Creek\", \"SF Spread Creek Upper\", \"Leidy Creek Mouth\")\ndonnerorder &lt;- c(\"Fish Creek NWIS\", \"Donner Blitzen ab Fish NWIS\", \"Donner Blitzen nr Burnt Car NWIS\", \"Donner Blitzen ab Indian NWIS\")\nGet catchment shapefiles\nCode\nsheds_list &lt;- list()\nmyfiles &lt;- list.files(path = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/\", pattern = \".shp\")\nfor (i in 1:length(myfiles)) {\n  sheds_list[[i]] &lt;- st_read(paste(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/\", myfiles[i], sep = \"\"))\n}\nsheds &lt;- do.call(rbind, sheds_list) %&gt;% \n  mutate(site_id = ifelse(site_id == \"SP01\", \"SP07\", ifelse(site_id == \"SP07\", \"SP01\", site_id))) %&gt;%\n  left_join(siteinfo)\n#mapview(sheds %&gt;% arrange(desc(area_sqmi)), alpha.regions = 0.2)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Variation by Climate</span>"
    ]
  },
  {
    "objectID": "VarByClimate.html#median-summer-flow",
    "href": "VarByClimate.html#median-summer-flow",
    "title": "4  Variation by Climate",
    "section": "4.2 Median summer flow",
    "text": "4.2 Median summer flow\nPlot maps of median summer flow across years/networks\n\nWest BrookPaine RunStaunton RiverFlatheadYellowstoneSnakeDonner Blitzen\n\n\n\n\nCode\nbas &lt;- \"West Brook\"\norderr &lt;- wborder\nwtryrs &lt;- c(2020:2024)\n\n# sheds and network\nmysheds &lt;- vect(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Mass_Watersheds.shp\")\nmysheds &lt;- mysheds[mysheds$site_id == \"WBR\",]\nmynet &lt;- vect(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Mass_Streams.shp\")\ncrs(mynet) &lt;- crs(mysheds)\nmynet &lt;- crop(mynet, mysheds)\n\n# get lakes\nlakes &lt;- get_waterbodies(AOI = siteinfo_sp %&gt;% filter(site_name == \"West Brook NWIS\"), buffer = 10000)\nlakes &lt;- lakes %&gt;% filter(gnis_name %in% c(\"Northampton Reservoir Upper\", \"Northampton Reservoir\"))\n#st_write(lakes, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Study area maps/lakes/lakes_WestBrook.shp\")\n\n# little g points\nmylittleg &lt;- siteinfo_sp %&gt;% filter(site_name %in% wborder) %&gt;% mutate(site_name = factor(site_name, levels = wborder))\n\n\n# filter data\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == bas, !is.na(logYield), Month %in% c(7:9)) %&gt;%\n  mutate(site_name = factor(site_name, levels = orderr))\nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == bas, !is.na(logYield), Month %in% c(7:9))\n\n# calculate variability for reference gage\nvarbig &lt;- tempdat_big %&gt;% \n  group_by(WaterYear) %&gt;% \n  summarize(bigrange = range(logYield)[2]-range(logYield)[1],\n            bigsd = sd(logYield),\n            bigvar = var(logYield)) %&gt;%\n  ungroup()\n\n# calculate total summer water availability from reference gage\n#summerflow &lt;- tempdat_big %&gt;% group_by(WaterYear) %&gt;% summarize(summeryield = sum(Yield_mm), summeryield_log = log(sum(Yield_mm))) %&gt;% ungroup()\n#wateravail2 &lt;- wateravail %&gt;% select(basin, WaterYear, totalyield, totalyield_z)\n\n# calculate relative variation\npedat &lt;- tempdat %&gt;% \n  group_by(basin, WaterYear) %&gt;% \n  summarize(nsites = length(unique(site_name)),\n            littlerange = range(logYield)[2]-range(logYield)[1],\n            littlesd = sd(logYield),\n            littlevar = var(logYield)) %&gt;% \n  ungroup() %&gt;% \n  left_join(varbig) %&gt;%\n  mutate(pe_range = ((littlerange-bigrange)/bigrange),\n         pe_sd = ((littlesd-bigsd)/bigsd),\n         pe_var = ((littlevar-bigvar)/bigvar)) %&gt;%\n  left_join(wateravail %&gt;% select(basin, WaterYear, totalyield, totalyield_z, totalyield_sum, totalyield_sum_z, tyz_perc, tyz_sum_perc)) %&gt;% \n  filter(WaterYear %in% wtryrs) %&gt;%\n  mutate(wylab = substr(WaterYear, 3, 4)) %&gt;%\n  arrange(totalyield_sum_z)\n  \n# calculate annual median summer flow\nannmed &lt;- tempdat %&gt;%\n  #filter(WaterYear %in% c(lowyr, highyr)) %&gt;%\n  group_by(site_name, WaterYear) %&gt;%\n  summarize(medlogYield = median(logYield, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n# calculate long-term median of summer median flow, to center color scheme\nannmed_big &lt;- tempdat_big %&gt;%\n  group_by(site_name, WaterYear) %&gt;%\n  summarize(medlogYield = median(logYield, na.rm = TRUE)) %&gt;%\n  ungroup()\nannmed_big &lt;- median(annmed_big$medlogYield)\n\n# arrange years by total annual yield\nwtryrs_arranged &lt;- as.numeric(unlist(pedat %&gt;% select(WaterYear)))\n\n\n# plot it\nplotlist_wb &lt;- list()\nfor(i in 1:length(wtryrs_arranged)) {\n  mylittleg &lt;- siteinfo_sp %&gt;% filter(site_name %in% orderr) %&gt;% left_join(annmed %&gt;% filter(WaterYear == wtryrs_arranged[i]))\n  mylittleg_sheds &lt;- sheds %&gt;% filter(site_name %in% orderr) %&gt;% left_join(annmed %&gt;% filter(WaterYear == wtryrs_arranged[i])) %&gt;% arrange(desc(area_sqmi))\n  plotlist_wb[[i]] &lt;- local({\n    i &lt;- i\n    ggplot() +\n      geom_sf(data = st_as_sf(mysheds), color = \"black\", fill = \"white\", linewidth = 0.4) + \n      geom_sf(data = mylittleg_sheds, aes(fill = medlogYield), color = \"black\") +\n      scale_fill_viridis(option = \"G\", direction = 1, limits = range(annmed$medlogYield), na.value = \"grey\") +\n      #scale_fill_gradientn(colours = rev(hcl.colors(100, \"Zissou1\")), limits = range(annmed$medlogYield), na.value = \"grey\") +\n      #scale_fill_gradientn(colours = cet_pal(100, name = \"l16\"), limits = range(annmed$medlogYield), na.value = \"grey\") +\n      geom_sf(data = st_as_sf(mynet), color = \"white\", linewidth = 1, lineend = \"round\") +\n      geom_sf(data = st_as_sf(mynet), color = \"royalblue4\", linewidth = 0.6, lineend = \"round\") +\n      geom_sf(data = lakes, color = \"white\", fill = \"lightskyblue1\", linewidth = 0.7) +\n      geom_sf(data = lakes, color = \"royalblue4\", fill = \"lightskyblue1\", linewidth = 0.5) +\n      geom_sf(data = mylittleg, shape = 21, fill = \"white\", size = 2) +\n      labs(fill = \"Median\\nsummer\\nlog(Yield)\") + #annotation_scale() +\n      coord_sf(xlim = range(st_coordinates(mylittleg_sheds)[,1]), ylim = range(st_coordinates(mylittleg_sheds)[,2])) +\n      theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = \"none\", axis.text = element_blank()) +\n      annotate(\"label\", x = Inf, y = Inf, label = paste(pedat$WaterYear[i], \" (\", pedat$tyz_sum_perc[i], \"%)\", sep = \"\"), vjust = 1.15, hjust = 1.05, size = 5)})\n}\nggarrange(plotlist = plotlist_wb, common.legend = TRUE, legend = \"right\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nbas &lt;- \"Paine Run\"\norderr &lt;- paineorder\nwtryrs &lt;- c(2019:2022)\n\nmysheds &lt;- vect(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Shen_Watersheds.shp\")\nmysheds &lt;- mysheds[mysheds$site_id == \"PA_10FL\",]\nmynet &lt;- vect(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Shen_Streams.shp\")\ncrs(mynet) &lt;- crs(mysheds)\nmynet &lt;- crop(mynet, mysheds)\n\n# hillshade\nmyrast &lt;- rast(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Spatial data/Elevation/Shenandoah_DEM_10m_nc.tif\")\nmyrast &lt;- mask(crop(myrast, mysheds), mysheds)\nslo &lt;- terrain(myrast, \"slope\", unit = \"radians\") \nasp &lt;- terrain(myrast, \"aspect\", unit = \"radians\")\nhill &lt;- shade(slope = slo, aspect = asp, angle = 40, direction = 270)\nhilldf &lt;- as.data.frame(hill, xy = TRUE)\n\n# little g points\nmylittleg &lt;- siteinfo_sp %&gt;% filter(site_name %in% orderr)\n\n\n# filter data\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == bas, !is.na(logYield), Month %in% c(7:9)) %&gt;%\n  mutate(site_name = factor(site_name, levels = orderr))\nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))\n\n  # calculate variability for reference gage\nvarbig &lt;- tempdat_big %&gt;% \n  group_by(WaterYear) %&gt;% \n  summarize(bigrange = range(logYield)[2]-range(logYield)[1],\n            bigsd = sd(logYield),\n            bigvar = var(logYield)) %&gt;%\n  ungroup()\n\n# calculate total summer water availability from reference gage\n#summerflow &lt;- tempdat_big %&gt;% group_by(WaterYear) %&gt;% summarize(summeryield = sum(Yield_mm), summeryield_log = log(sum(Yield_mm))) %&gt;% ungroup()\n#wateravail2 &lt;- wateravail %&gt;% select(basin, WaterYear, totalyield, totalyield_z)\n\n# calculate relative variation\npedat &lt;- tempdat %&gt;% \n  group_by(basin, WaterYear) %&gt;% \n  summarize(nsites = length(unique(site_name)),\n            littlerange = range(logYield)[2]-range(logYield)[1],\n            littlesd = sd(logYield),\n            littlevar = var(logYield)) %&gt;% \n  ungroup() %&gt;% \n  left_join(varbig) %&gt;%\n  mutate(pe_range = ((littlerange-bigrange)/bigrange),\n         pe_sd = ((littlesd-bigsd)/bigsd),\n         pe_var = ((littlevar-bigvar)/bigvar)) %&gt;%\n  left_join(wateravail %&gt;% select(basin, WaterYear, totalyield, totalyield_z, totalyield_sum, totalyield_sum_z, tyz_perc, tyz_sum_perc)) %&gt;% \n  filter(WaterYear %in% wtryrs) %&gt;%\n  mutate(wylab = substr(WaterYear, 3, 4)) %&gt;%\n  arrange(totalyield_sum_z)\n  \n# calculate annual median summer flow\nannmed &lt;- tempdat %&gt;%\n  #filter(WaterYear %in% c(lowyr, highyr)) %&gt;%\n  group_by(site_name, WaterYear) %&gt;%\n  summarize(medlogYield = median(logYield, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n# arrange years by total annual yield\nwtryrs_arranged &lt;- as.numeric(unlist(pedat %&gt;% select(WaterYear)))\n\n# plot it\nplotlist_pa &lt;- list()\nfor(i in 1:length(wtryrs_arranged)) {\n  mylittleg &lt;- siteinfo_sp %&gt;% filter(site_name %in% orderr) %&gt;% left_join(annmed %&gt;% filter(WaterYear == wtryrs_arranged[i]))\n  mylittleg_sheds &lt;- sheds %&gt;% filter(site_name %in% orderr) %&gt;% left_join(annmed %&gt;% filter(WaterYear == wtryrs_arranged[i])) %&gt;% arrange(desc(area_sqmi))\n  plotlist_pa[[i]] &lt;- local({\n    i &lt;- i\n    ggplot() +\n      geom_sf(data = st_as_sf(mysheds), color = \"black\", fill = \"white\", linewidth = 0.4) + \n      geom_sf(data = mylittleg_sheds, aes(fill = medlogYield), color = \"black\") +\n      scale_fill_viridis(option = \"G\", direction = 1, limits = range(annmed$medlogYield), na.value = \"grey\") +\n      geom_sf(data = st_as_sf(mynet), color = \"white\", linewidth = 1, lineend = \"round\") +\n      geom_sf(data = st_as_sf(mynet), color = \"royalblue4\", linewidth = 0.6, lineend = \"round\") +\n      geom_sf(data = mylittleg, shape = 21, fill = \"white\", size = 2) +\n      labs(fill = \"Median\\nsummer\\nlog(Yield)\") + #annotation_scale() +\n      coord_sf(xlim = range(st_coordinates(mylittleg_sheds)[,1]), ylim = range(st_coordinates(mylittleg_sheds)[,2])) +\n      theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = \"none\", axis.text = element_blank()) +\n      annotate(\"label\", x = -Inf, y = Inf, label = paste(pedat$WaterYear[i], \" (\", pedat$tyz_sum_perc[i], \"%)\", sep = \"\"), vjust = 1.15, hjust = -0.05, size = 5)})\n}\nggarrange(plotlist = plotlist_pa, common.legend = TRUE, legend = \"right\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nbas &lt;- \"Staunton River\"\norderr &lt;- stauntorder\nwtryrs &lt;- c(2019:2022)\n\nmysheds &lt;- vect(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Shen_Watersheds.shp\")\nmysheds &lt;- mysheds[mysheds$site_id == \"SR_10FL\",]\nmynet &lt;- vect(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Shen_Streams.shp\")\ncrs(mynet) &lt;- crs(mysheds)\nmynet &lt;- crop(mynet, mysheds)\n\n# little g points\nmylittleg &lt;- siteinfo_sp %&gt;% filter(site_name %in% orderr)\n\n# filter data\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == bas, !is.na(logYield), Month %in% c(7:9)) %&gt;%\n  mutate(site_name = factor(site_name, levels = orderr))\nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))\n\n  # calculate variability for reference gage\nvarbig &lt;- tempdat_big %&gt;% \n  group_by(WaterYear) %&gt;% \n  summarize(bigrange = range(logYield)[2]-range(logYield)[1],\n            bigsd = sd(logYield),\n            bigvar = var(logYield)) %&gt;%\n  ungroup()\n\n# calculate total summer water availability from reference gage\n#summerflow &lt;- tempdat_big %&gt;% group_by(WaterYear) %&gt;% summarize(summeryield = sum(Yield_mm), summeryield_log = log(sum(Yield_mm))) %&gt;% ungroup()\n#wateravail2 &lt;- wateravail %&gt;% select(basin, WaterYear, totalyield, totalyield_z)\n\n# calculate relative variation\npedat &lt;- tempdat %&gt;% \n  group_by(basin, WaterYear) %&gt;% \n  summarize(nsites = length(unique(site_name)),\n            littlerange = range(logYield)[2]-range(logYield)[1],\n            littlesd = sd(logYield),\n            littlevar = var(logYield)) %&gt;% \n  ungroup() %&gt;% \n  left_join(varbig) %&gt;%\n  mutate(pe_range = ((littlerange-bigrange)/bigrange),\n         pe_sd = ((littlesd-bigsd)/bigsd),\n         pe_var = ((littlevar-bigvar)/bigvar)) %&gt;%\n  left_join(wateravail %&gt;% select(basin, WaterYear, totalyield, totalyield_z, totalyield_sum, totalyield_sum_z, tyz_perc, tyz_sum_perc)) %&gt;% \n  filter(WaterYear %in% wtryrs) %&gt;%\n  mutate(wylab = substr(WaterYear, 3, 4)) %&gt;%\n  arrange(totalyield_sum_z)\n  \n# calculate annual median summer flow\nannmed &lt;- tempdat %&gt;%\n  #filter(WaterYear %in% c(lowyr, highyr)) %&gt;%\n  group_by(site_name, WaterYear) %&gt;%\n  summarize(medlogYield = median(logYield, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n# arrange years by total annual yield\nwtryrs_arranged &lt;- as.numeric(unlist(pedat %&gt;% select(WaterYear)))\n\n# plot it\nplotlist_st &lt;- list()\nfor(i in 1:length(wtryrs_arranged)) {\n  mylittleg &lt;- siteinfo_sp %&gt;% filter(site_name %in% orderr) %&gt;% left_join(annmed %&gt;% filter(WaterYear == wtryrs_arranged[i]))\n  mylittleg_sheds &lt;- sheds %&gt;% filter(site_name %in% orderr) %&gt;% left_join(annmed %&gt;% filter(WaterYear == wtryrs_arranged[i])) %&gt;% arrange(desc(area_sqmi))\n  plotlist_st[[i]] &lt;- local({\n    i &lt;- i\n    ggplot() +\n      geom_sf(data = st_as_sf(mysheds), color = \"black\", fill = \"white\", linewidth = 0.4) + \n      geom_sf(data = mylittleg_sheds, aes(fill = medlogYield), color = \"black\") +\n      scale_fill_viridis(option = \"G\", direction = 1, limits = range(annmed$medlogYield), na.value = \"grey\") +\n      geom_sf(data = st_as_sf(mynet), color = \"white\", linewidth = 1, lineend = \"round\") +\n      geom_sf(data = st_as_sf(mynet), color = \"royalblue4\", linewidth = 0.6, lineend = \"round\") +\n      geom_sf(data = mylittleg, shape = 21, fill = \"white\", size = 2) +\n      labs(fill = \"Median\\nsummer\\nlog(Yield)\") + #annotation_scale() +\n      coord_sf(xlim = range(st_coordinates(mylittleg_sheds)[,1]), ylim = range(st_coordinates(mylittleg_sheds)[,2])) +\n      theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = \"none\", axis.text = element_blank()) +\n      annotate(\"label\", x = Inf, y = Inf, label = paste(pedat$WaterYear[i], \" (\", pedat$tyz_sum_perc[i], \"%)\", sep = \"\"), vjust = 1.15, hjust = 1.05, size = 5)})\n}\nggarrange(plotlist = plotlist_st, common.legend = TRUE, legend = \"right\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nbas &lt;- \"Flathead\"\norderr &lt;- flatorder\nwtryrs &lt;- c(2018:2024)\n\nmysheds &lt;- vect(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Flat_Watersheds.shp\")\nmysheds &lt;- mysheds[mysheds$site_id == \"NFF\",]\nmynet &lt;- vect(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Flat_Streams.shp\")\ncrs(mynet) &lt;- crs(mysheds)\nmynet &lt;- crop(mynet, mysheds)\n\n# get lakes\nlakes &lt;- get_waterbodies(AOI = siteinfo_sp %&gt;% filter(site_name == \"North Fork Flathead River NWIS\"), buffer = 100000)\nlakes &lt;- st_transform(lakes, crs(mysheds))\nlakes &lt;- st_intersection(lakes, st_as_sf(mysheds))\nlakes &lt;- lakes %&gt;% filter(gnis_name %in% c(\"Moose Lake\", \"Mud Lake\"))\n\n# points\nmylittleg &lt;- siteinfo_sp %&gt;% filter(site_name %in% flatorder) %&gt;% mutate(site_name = factor(site_name, levels = flatorder))\nst_geometry(mylittleg)[mylittleg$site_name == \"BigCreekUpper\"] &lt;- st_point(c(-114.31506, 48.57672))\nst_geometry(mylittleg)[mylittleg$site_name == \"HallowattCreekLower\"] &lt;- st_point(c(-114.31914, 48.57256))\n\n\n# filter data\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == bas, !is.na(logYield), Month %in% c(7:9)) %&gt;%\n  mutate(site_name = factor(site_name, levels = orderr))\nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))\n\n  # calculate variability for reference gage\nvarbig &lt;- tempdat_big %&gt;% \n  group_by(WaterYear) %&gt;% \n  summarize(bigrange = range(logYield)[2]-range(logYield)[1],\n            bigsd = sd(logYield),\n            bigvar = var(logYield)) %&gt;%\n  ungroup()\n\n# calculate total summer water availability from reference gage\n#summerflow &lt;- tempdat_big %&gt;% group_by(WaterYear) %&gt;% summarize(summeryield = sum(Yield_mm), summeryield_log = log(sum(Yield_mm))) %&gt;% ungroup()\n#wateravail2 &lt;- wateravail %&gt;% select(basin, WaterYear, totalyield, totalyield_z)\n\n# calculate relative variation\npedat &lt;- tempdat %&gt;% \n  group_by(basin, WaterYear) %&gt;% \n  summarize(nsites = length(unique(site_name)),\n            littlerange = range(logYield)[2]-range(logYield)[1],\n            littlesd = sd(logYield),\n            littlevar = var(logYield)) %&gt;% \n  ungroup() %&gt;% \n  left_join(varbig) %&gt;%\n  mutate(pe_range = ((littlerange-bigrange)/bigrange),\n         pe_sd = ((littlesd-bigsd)/bigsd),\n         pe_var = ((littlevar-bigvar)/bigvar)) %&gt;%\n  left_join(wateravail %&gt;% select(basin, WaterYear, totalyield, totalyield_z, totalyield_sum, totalyield_sum_z, tyz_perc, tyz_sum_perc)) %&gt;% \n  filter(WaterYear %in% wtryrs) %&gt;%\n  mutate(wylab = substr(WaterYear, 3, 4)) %&gt;%\n  arrange(totalyield_sum_z)\n  \n# calculate annual median summer flow\nannmed &lt;- tempdat %&gt;%\n  #filter(WaterYear %in% c(lowyr, highyr)) %&gt;%\n  group_by(site_name, WaterYear) %&gt;%\n  summarize(medlogYield = median(logYield, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n# arrange years by total annual yield\nwtryrs_arranged &lt;- as.numeric(unlist(pedat %&gt;% select(WaterYear)))\n\n# plot it\nplotlist_fl &lt;- list()\nfor(i in 1:length(wtryrs_arranged)) {\n  mylittleg &lt;- siteinfo_sp %&gt;% filter(site_name %in% orderr) %&gt;% left_join(annmed %&gt;% filter(WaterYear == wtryrs_arranged[i]))\n  mylittleg_sheds &lt;- sheds %&gt;% filter(site_name %in% orderr) %&gt;% left_join(annmed %&gt;% filter(WaterYear == wtryrs_arranged[i])) %&gt;% arrange(desc(area_sqmi))\n  plotlist_fl[[i]] &lt;- local({\n    i &lt;- i\n    ggplot() +\n      geom_sf(data = st_as_sf(mysheds), color = \"black\", fill = \"white\", linewidth = 0.4) + \n      geom_sf(data = mylittleg_sheds, aes(fill = medlogYield), color = \"black\") +\n      scale_fill_viridis(option = \"G\", direction = 1, limits = range(annmed$medlogYield), na.value = \"grey\") +\n      geom_sf(data = st_as_sf(mynet), color = \"white\", linewidth = 1, lineend = \"round\") +\n      geom_sf(data = st_as_sf(mynet), color = \"royalblue4\", linewidth = 0.6, lineend = \"round\") +\n      geom_sf(data = mylittleg, shape = 21, fill = \"white\", size = 2) +\n      labs(fill = \"Median\\nsummer\\nlog(Yield)\") + #annotation_scale() +\n      coord_sf(xlim = range(st_coordinates(mylittleg_sheds)[,1]), ylim = range(st_coordinates(mylittleg_sheds)[,2])) +\n      theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = \"none\", axis.text = element_blank()) +\n      annotate(\"label\", x = Inf, y = Inf, label = paste(pedat$WaterYear[i], \" (\", pedat$tyz_sum_perc[i], \"%)\", sep = \"\"), vjust = 1.15, hjust = 1.05, size = 5)})\n}\nggarrange(plotlist = plotlist_fl, common.legend = TRUE, legend = \"right\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nbas &lt;- \"Shields River\"\norderr &lt;- yellorder\nwtryrs &lt;- c(2016:2020,2022:2024)\n\nmysheds &lt;- vect(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Shields_Watersheds.shp\")\nmysheds &lt;- mysheds[mysheds$site_id %in% c(\"SRS\", \"DU01\"),]\nmynet &lt;- vect(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Shields_Streams.shp\")\ncrs(mynet) &lt;- crs(mysheds)\nmynet &lt;- crop(mynet, mysheds)\n\n# points\nmylittleg &lt;- siteinfo_sp %&gt;% filter(site_name %in% orderr) %&gt;% mutate(site_name = factor(site_name, levels = orderr)) #%&gt;% filter(subbasin != \"Duck Creek\")\n\n\n# filter data\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == bas, !is.na(logYield), Month %in% c(7:9)) %&gt;%\n  mutate(site_name = factor(site_name, levels = orderr))\nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))\n\n  # calculate variability for reference gage\nvarbig &lt;- tempdat_big %&gt;% \n  group_by(WaterYear) %&gt;% \n  summarize(bigrange = range(logYield)[2]-range(logYield)[1],\n            bigsd = sd(logYield),\n            bigvar = var(logYield)) %&gt;%\n  ungroup()\n\n# calculate total summer water availability from reference gage\n#summerflow &lt;- tempdat_big %&gt;% group_by(WaterYear) %&gt;% summarize(summeryield = sum(Yield_mm), summeryield_log = log(sum(Yield_mm))) %&gt;% ungroup()\n#wateravail2 &lt;- wateravail %&gt;% select(basin, WaterYear, totalyield, totalyield_z)\n\n# calculate relative variation\npedat &lt;- tempdat %&gt;% \n  group_by(basin, WaterYear) %&gt;% \n  summarize(nsites = length(unique(site_name)),\n            littlerange = range(logYield)[2]-range(logYield)[1],\n            littlesd = sd(logYield),\n            littlevar = var(logYield)) %&gt;% \n  ungroup() %&gt;% \n  left_join(varbig) %&gt;%\n  mutate(pe_range = ((littlerange-bigrange)/bigrange),\n         pe_sd = ((littlesd-bigsd)/bigsd),\n         pe_var = ((littlevar-bigvar)/bigvar)) %&gt;%\n  left_join(wateravail %&gt;% select(basin, WaterYear, totalyield, totalyield_z, totalyield_sum, totalyield_sum_z, tyz_perc, tyz_sum_perc)) %&gt;% \n  filter(WaterYear %in% wtryrs) %&gt;%\n  mutate(wylab = substr(WaterYear, 3, 4)) %&gt;%\n  arrange(totalyield_sum_z)\n  \n# calculate annual median summer flow\nannmed &lt;- tempdat %&gt;%\n  #filter(WaterYear %in% c(lowyr, highyr)) %&gt;%\n  group_by(site_name, WaterYear) %&gt;%\n  summarize(medlogYield = median(logYield, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n# arrange years by total annual yield\nwtryrs_arranged &lt;- as.numeric(unlist(pedat %&gt;% select(WaterYear)))\n\n# plot it\nplotlist_ye &lt;- list()\nfor(i in 1:length(wtryrs_arranged)) {\n  mylittleg &lt;- siteinfo_sp %&gt;% filter(site_name %in% orderr) %&gt;% left_join(annmed %&gt;% filter(WaterYear == wtryrs_arranged[i]))\n  mylittleg_sheds &lt;- sheds %&gt;% filter(site_name %in% orderr) %&gt;% left_join(annmed %&gt;% filter(WaterYear == wtryrs_arranged[i])) %&gt;% arrange(desc(area_sqmi))\n  plotlist_ye[[i]] &lt;- local({\n    i &lt;- i\n    ggplot() +\n      geom_sf(data = st_as_sf(mysheds), color = \"black\", fill = \"white\", linewidth = 0.4) + \n      geom_sf(data = mylittleg_sheds, aes(fill = medlogYield), color = \"black\") +\n      scale_fill_viridis(option = \"G\", direction = 1, limits = range(annmed$medlogYield), na.value = \"grey\") +\n      geom_sf(data = st_as_sf(mynet), color = \"white\", linewidth = 1, lineend = \"round\") +\n      geom_sf(data = st_as_sf(mynet), color = \"royalblue4\", linewidth = 0.6, lineend = \"round\") +\n      geom_sf(data = mylittleg, shape = 21, fill = \"white\", size = 2) +\n      labs(fill = \"Median\\nsummer\\nlog(Yield)\") + #annotation_scale() +\n      coord_sf(xlim = range(st_coordinates(mylittleg_sheds)[,1]), ylim = range(st_coordinates(mylittleg_sheds)[,2])) +\n      theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = \"none\", axis.text = element_blank()) +\n      annotate(\"label\", x = -Inf, y = -Inf, label = paste(pedat$WaterYear[i], \" (\", pedat$tyz_sum_perc[i], \"%)\", sep = \"\"), vjust = -0.15, hjust = -0.05, size = 5)})\n}\nggarrange(plotlist = plotlist_ye, common.legend = TRUE, legend = \"right\", nrow = 2, ncol = 4)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nbas &lt;- \"Snake River\"\norderr &lt;- snakeorder\nwtryrs &lt;- c(2016:2024)\n\nmysheds &lt;- vect(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Snake_Watersheds.shp\")\nmysheds &lt;- mysheds[mysheds$site_id == \"SP11\",]\nmynet &lt;- vect(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Snake_Streams.shp\")\ncrs(mynet) &lt;- crs(mysheds)\nmynet &lt;- crop(mynet, mysheds)\n\n# get lakes\nlakes &lt;- get_waterbodies(AOI = siteinfo_sp %&gt;% filter(site_name == \"Spread Creek Dam\"), buffer = 100000)\nlakes &lt;- st_transform(lakes, crs(mysheds))\nlakes &lt;- st_intersection(lakes, st_as_sf(mysheds))\nlakes &lt;- lakes %&gt;% filter(gnis_name %in% c(\"Leidy Lake\"))\n\n# points\nmylittleg &lt;- siteinfo_sp %&gt;% filter(site_name %in% snakeorder) %&gt;% mutate(site_name = factor(site_name, levels = snakeorder))\n# edit geometry to reduce overlap\nst_geometry(mylittleg)[mylittleg$site_name == \"SF Spread Creek Lower NWIS\"] &lt;- st_point(c(-110.32226, 43.76118))\nst_geometry(mylittleg)[mylittleg$site_name == \"NF Spread Creek Lower\"] &lt;- st_point(c(-110.3199, 43.766533))\nst_geometry(mylittleg)[mylittleg$site_name == \"Grizzly Creek\"] &lt;- st_point(c(-110.23289, 43.77433))\nst_geometry(mylittleg)[mylittleg$site_name == \"NF Spread Creek Upper\"] &lt;- st_point(c(-110.23405, 43.77227))\nst_geometry(mylittleg)[mylittleg$site_name == \"SF Spread Creek Upper\"] &lt;- st_point(c(-110.31475, 43.73661))\n\n\n# filter data\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == bas, !is.na(logYield), Month %in% c(7:9)) %&gt;%\n  mutate(site_name = factor(site_name, levels = orderr))\nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))\n\n  # calculate variability for reference gage\nvarbig &lt;- tempdat_big %&gt;% \n  group_by(WaterYear) %&gt;% \n  summarize(bigrange = range(logYield)[2]-range(logYield)[1],\n            bigsd = sd(logYield),\n            bigvar = var(logYield)) %&gt;%\n  ungroup()\n\n# calculate total summer water availability from reference gage\n#summerflow &lt;- tempdat_big %&gt;% group_by(WaterYear) %&gt;% summarize(summeryield = sum(Yield_mm), summeryield_log = log(sum(Yield_mm))) %&gt;% ungroup()\n#wateravail2 &lt;- wateravail %&gt;% select(basin, WaterYear, totalyield, totalyield_z)\n\n# calculate relative variation\npedat &lt;- tempdat %&gt;% \n  group_by(basin, WaterYear) %&gt;% \n  summarize(nsites = length(unique(site_name)),\n            littlerange = range(logYield)[2]-range(logYield)[1],\n            littlesd = sd(logYield),\n            littlevar = var(logYield)) %&gt;% \n  ungroup() %&gt;% \n  left_join(varbig) %&gt;%\n  mutate(pe_range = ((littlerange-bigrange)/bigrange),\n         pe_sd = ((littlesd-bigsd)/bigsd),\n         pe_var = ((littlevar-bigvar)/bigvar)) %&gt;%\n  left_join(wateravail %&gt;% select(basin, WaterYear, totalyield, totalyield_z, totalyield_sum, totalyield_sum_z, tyz_perc, tyz_sum_perc)) %&gt;% \n  filter(WaterYear %in% wtryrs) %&gt;%\n  mutate(wylab = substr(WaterYear, 3, 4)) %&gt;%\n  arrange(totalyield_sum_z)\n  \n# calculate annual median summer flow\nannmed &lt;- tempdat %&gt;%\n  #filter(WaterYear %in% c(lowyr, highyr)) %&gt;%\n  group_by(site_name, WaterYear) %&gt;%\n  summarize(medlogYield = median(logYield, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n# arrange years by total annual yield\nwtryrs_arranged &lt;- as.numeric(unlist(pedat %&gt;% select(WaterYear)))\n\n# plot it\nplotlist_sn &lt;- list()\nfor(i in 1:length(wtryrs_arranged)) {\n  mylittleg &lt;- siteinfo_sp %&gt;% filter(site_name %in% orderr) %&gt;% left_join(annmed %&gt;% filter(WaterYear == wtryrs_arranged[i]))\n  mylittleg_sheds &lt;- sheds %&gt;% filter(site_name %in% orderr) %&gt;% left_join(annmed %&gt;% filter(WaterYear == wtryrs_arranged[i])) %&gt;% arrange(desc(area_sqmi))\n  plotlist_sn[[i]] &lt;- local({\n    i &lt;- i\n    ggplot() +\n      geom_sf(data = st_as_sf(mysheds), color = \"black\", fill = \"white\", linewidth = 0.4) + \n      geom_sf(data = mylittleg_sheds, aes(fill = medlogYield), color = \"black\") +\n      scale_fill_viridis(option = \"G\", direction = 1, limits = range(annmed$medlogYield), na.value = \"grey\") +\n      geom_sf(data = st_as_sf(mynet), color = \"white\", linewidth = 1, lineend = \"round\") +\n      geom_sf(data = st_as_sf(mynet), color = \"royalblue4\", linewidth = 0.6, lineend = \"round\") +\n      geom_sf(data = mylittleg, shape = 21, fill = \"white\", size = 2) +\n      labs(fill = \"Median\\nsummer\\nlog(Yield)\") + #annotation_scale() +\n      coord_sf(xlim = range(st_coordinates(mylittleg_sheds)[,1]), ylim = range(st_coordinates(mylittleg_sheds)[,2])) +\n      theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = \"none\", axis.text = element_blank()) +\n      annotate(\"label\", x = -Inf, y = -Inf, label = paste(pedat$WaterYear[i], \" (\", pedat$tyz_sum_perc[i], \"%)\", sep = \"\"), vjust = -0.15, hjust = -0.05, size = 5)})\n}\nggarrange(plotlist = plotlist_sn, common.legend = TRUE, legend = \"right\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nbas &lt;- \"Donner Blitzen\"\norderr &lt;- c(donnerorder, \"Donner Blitzen River nr Frenchglen NWIS\")\nwtryrs &lt;- c(2016:2024)\n\nmysheds &lt;- vect(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Oreg_Watersheds.shp\")\nmysheds &lt;- mysheds[mysheds$site_id == \"DBF\",]\nmynet &lt;- vect(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Oreg_Streams.shp\")\ncrs(mynet) &lt;- crs(mysheds)\nmynet &lt;- crop(mynet, mysheds)\n\n\n# points\nmylittleg &lt;- siteinfo_sp %&gt;% filter(site_name %in% orderr) %&gt;% mutate(site_name = factor(site_name, levels = donnerorder))\n# edit geometry to reduce overlap\nst_geometry(mylittleg)[mylittleg$site_name == \"Donner Blitzen ab Fish NWIS\"] &lt;- st_point(c(-118.84315, 42.75476))\nst_geometry(mylittleg)[mylittleg$site_name == \"Fish Creek\"] &lt;- st_point(c(-118.83173, 42.75911))\n\n\n# filter data\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == bas, !is.na(logYield), Month %in% c(7:9)) %&gt;%\n  mutate(site_name = factor(site_name, levels = orderr))\nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))\n\n  # calculate variability for reference gage\nvarbig &lt;- tempdat_big %&gt;% \n  group_by(WaterYear) %&gt;% \n  summarize(bigrange = range(logYield)[2]-range(logYield)[1],\n            bigsd = sd(logYield),\n            bigvar = var(logYield)) %&gt;%\n  ungroup()\n\n# calculate total summer water availability from reference gage\n#summerflow &lt;- tempdat_big %&gt;% group_by(WaterYear) %&gt;% summarize(summeryield = sum(Yield_mm), summeryield_log = log(sum(Yield_mm))) %&gt;% ungroup()\n#wateravail2 &lt;- wateravail %&gt;% select(basin, WaterYear, totalyield, totalyield_z)\n\n\n# calculate relative variation\npedat &lt;- tempdat %&gt;% \n  group_by(basin, WaterYear) %&gt;% \n  summarize(nsites = length(unique(site_name)),\n            littlerange = range(logYield)[2]-range(logYield)[1],\n            littlesd = sd(logYield),\n            littlevar = var(logYield)) %&gt;% \n  ungroup() %&gt;% \n  left_join(varbig) %&gt;%\n  mutate(pe_range = ((littlerange-bigrange)/bigrange),\n         pe_sd = ((littlesd-bigsd)/bigsd),\n         pe_var = ((littlevar-bigvar)/bigvar)) %&gt;%\n  left_join(wateravail %&gt;% select(basin, WaterYear, totalyield, totalyield_z, totalyield_sum, totalyield_sum_z, tyz_perc, tyz_sum_perc)) %&gt;% \n  filter(WaterYear %in% wtryrs) %&gt;%\n  mutate(wylab = substr(WaterYear, 3, 4)) %&gt;%\n  arrange(totalyield_sum_z)\n  \n# calculate annual median summer flow\nannmed &lt;- tempdat %&gt;%\n  group_by(site_name, WaterYear) %&gt;%\n  summarize(medlogYield = median(logYield, na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  bind_rows(tempdat_big %&gt;%\n  group_by(site_name, WaterYear) %&gt;%\n  summarize(medlogYield = median(logYield, na.rm = TRUE)) %&gt;%\n  ungroup())\n\n# arrange years by total annual yield\nwtryrs_arranged &lt;- as.numeric(unlist(pedat %&gt;% select(WaterYear)))\n\n# plot it\nplotlist_db &lt;- list()\nfor(i in 1:length(wtryrs_arranged)) {\n  mylittleg &lt;- siteinfo_sp %&gt;% filter(site_name %in% orderr) %&gt;% left_join(annmed %&gt;% filter(WaterYear == wtryrs_arranged[i]))\n  mylittleg_sheds &lt;- sheds %&gt;% filter(site_name %in% orderr) %&gt;% left_join(annmed %&gt;% filter(WaterYear == wtryrs_arranged[i])) %&gt;% arrange(desc(area_sqmi))\n  plotlist_db[[i]] &lt;- local({\n    i &lt;- i\n    ggplot() +\n      geom_sf(data = st_as_sf(mysheds), color = \"black\", fill = \"white\", linewidth = 0.4) + \n      geom_sf(data = mylittleg_sheds, aes(fill = medlogYield), color = \"black\") +\n      scale_fill_viridis(option = \"G\", direction = 1, limits = range(annmed$medlogYield), na.value = \"grey\") +\n      geom_sf(data = st_as_sf(mynet), color = \"white\", linewidth = 1, lineend = \"round\") +\n      geom_sf(data = st_as_sf(mynet), color = \"royalblue4\", linewidth = 0.6, lineend = \"round\") +\n      geom_sf(data = mylittleg, shape = 21, fill = \"white\", size = 2) +\n      labs(fill = \"Median\\nsummer\\nlog(Yield)\") + #annotation_scale() +\n      coord_sf(xlim = range(st_coordinates(mylittleg_sheds)[,1]), ylim = range(st_coordinates(mylittleg_sheds)[,2])) +\n      theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = \"none\", axis.text = element_blank()) +\n      annotate(\"label\", x = -Inf, y = -Inf, label = paste(pedat$WaterYear[i], \" (\", pedat$tyz_sum_perc[i], \"%)\", sep = \"\"), vjust = -0.15, hjust = -0.05, size = 5)})\n}\nggarrange(plotlist = plotlist_db, common.legend = TRUE, legend = \"right\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Variation by Climate</span>"
    ]
  },
  {
    "objectID": "VarByClimate.html#distribution-and-variability",
    "href": "VarByClimate.html#distribution-and-variability",
    "title": "4  Variation by Climate",
    "section": "4.3 Distribution and variability",
    "text": "4.3 Distribution and variability\nCreate function to plot interannual distribution of streamflow values, annual distributions of streamflow values, and scatterplot plot of spatial streamflow heterogeneity by water availability\n\n\nCode\nportfolioplot &lt;- function(bas, orderr, type = c(\"interann\", \"annual\", \"scatter\"), wtryrs) {\n  # filter data\n  tempdat &lt;- dat_clean %&gt;% \n    filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% wtryrs) %&gt;%\n    mutate(site_name = factor(site_name, levels = orderr))\n  nsites &lt;- length(unique(tempdat$site_name))\n  tempdat_big &lt;- dat_clean_big %&gt;% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))\n\n  # calculate variability for reference gage\n  varbig &lt;- tempdat_big %&gt;% \n    group_by(WaterYear) %&gt;% \n    summarize(bigrange = range(logYield)[2]-range(logYield)[1],\n              bigsd = sd(logYield),\n              bigvar = var(logYield)) %&gt;%\n    ungroup()\n\n  # calculate total summer water availability from reference gage\n  #summerflow &lt;- tempdat_big %&gt;% group_by(WaterYear) %&gt;% summarize(summeryield = sum(Yield_mm), summeryield_log = log(sum(Yield_mm))) %&gt;% ungroup()\n  #wateravail2 &lt;- wateravail %&gt;% select(basin, WaterYear, totalyield, totalyield_z)\n\n\n  # calculate relative variation\n  pedat &lt;- tempdat %&gt;% \n    group_by(basin, WaterYear) %&gt;% \n    summarize(nsites = length(unique(site_name)),\n              littlerange = range(logYield)[2]-range(logYield)[1],\n              littlesd = sd(logYield),\n              littlevar = var(logYield)) %&gt;% \n    ungroup() %&gt;% \n    left_join(varbig) %&gt;%\n    mutate(pe_range = ((littlerange-bigrange)/bigrange)*100,\n           pe_sd = ((littlesd-bigsd)/bigsd),\n           pe_var = ((littlevar-bigvar)/bigvar)) %&gt;%\n    left_join(wateravail %&gt;% select(basin, WaterYear, totalyield, totalyield_z, totalyield_sum, totalyield_sum_z, tyz_sum_perc)) %&gt;% \n    filter(WaterYear %in% wtryrs) %&gt;%\n    mutate(wylab = substr(WaterYear, 3, 4))\n\n  # interannual\n  pint &lt;- ggplot() + \n    geom_density(data = tempdat, aes(x = logYield, y = ..scaled.., color = site_name, fill = site_name), size = 0.8) +\n    scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n    scale_fill_manual(values = alpha(cet_pal(nsites, name = \"i1\"), 0.1)) +\n    geom_density(data = tempdat_big, aes(x = logYield, y = ..scaled..), color = \"grey40\", fill = alpha(\"grey40\", 0.2), size = 0.8) +\n    xlab(\"Summer log(Yield, mm/day)\") + ylab(\"Scaled density\") +\n    theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), \n                       axis.text = element_text(color = \"black\"), legend.position = \"none\")\n\n  # annual\n  pann &lt;- ggplot() +\n    geom_density(data = tempdat, aes(x = logYield, y = ..scaled.., color = site_name, fill = site_name), size = 0.8) +\n    scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n    scale_fill_manual(values = alpha(cet_pal(nsites, name = \"i1\"), 0.1)) +\n    geom_density(data = tempdat_big, aes(x = logYield, y = ..scaled..), color = \"grey40\", fill = alpha(\"grey40\", 0.2), size = 0.8) +\n    xlab(\"Summer log(Yield, mm/day)\") + ylab(\"Scaled density\") +\n    theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),\n                       axis.text = element_text(color = \"black\"), legend.position = \"none\") +\n    facet_wrap(~factor(WaterYear, levels = as.numeric(unlist(pedat %&gt;% arrange(totalyield_sum_z) %&gt;% select(WaterYear)))))\n\n  # portfolio effect by water availability\n  ppew &lt;- pedat %&gt;% \n    ggplot(aes(x = tyz_sum_perc, y = pe_range, label = wylab)) + \n    geom_abline(slope = 0, intercept = 0, linetype = 2) +\n    geom_smooth(method = \"lm\", color = \"black\") + \n    geom_point(shape = 21, fill = \"skyblue1\", size = 3) +\n    geom_text(vjust = -0.7, color = \"grey40\") +\n    xlab(\"Water availability\") + ylab(\"Relative difference in range\") +\n    theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(color = \"black\")) +     \n    guides(color = guide_legend(title=\"Water year\")) + xlim(0,100) + ylim(-100,450)\n\n  if(type == \"interannual\") { return(pint) }\n  if(type == \"annual\") { return(pann) }\n  if(type == \"scatter\") { return(ppew) }\n  if(type == \"table\") { return(pedat) }\n}\n\n\nGenerate plots\n\nWest BrookPaine RunStaunton RiverFlatheadYellowstoneSnake RiverDonner Blitzen\n\n\n\n\nCode\ndenwb\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndenpa\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndenst\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndenfl\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndenye\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndensn\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndendb",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Variation by Climate</span>"
    ]
  },
  {
    "objectID": "VarByClimate.html#model-heterogeneity",
    "href": "VarByClimate.html#model-heterogeneity",
    "title": "4  Variation by Climate",
    "section": "4.4 Model heterogeneity",
    "text": "4.4 Model heterogeneity\nHow does regional water availability affect spatial streamflow heterogeneity (relative difference range of streamflow values, headwaters vs. reference gages)?\nSet color palette\n\n\nCode\nmycols &lt;- brewer.pal(7, \"Set2\")\n\n\nSome data manipulation\n\n\nCode\n# define basin-years to keep\nkeepyears &lt;- bind_rows(\n  tibble(basin = \"West Brook\", WaterYear = c(2020:2024)),\n  tibble(basin = \"Paine Run\", WaterYear = c(2019:2022)),\n  tibble(basin = \"Staunton River\", WaterYear = c(2019:2022)),\n  tibble(basin = \"Flathead\", WaterYear = c(2018:2024)),\n  tibble(basin = \"Shields River\", WaterYear = c(2016:2020,2022:2024)),\n  tibble(basin = \"Snake River\", WaterYear = c(2016:2024)),\n  tibble(basin = \"Donner Blitzen\", WaterYear = c(2016:2024)),\n) %&gt;% mutate(keep = \"yes\")\n\n# standard deviation of median summer flow\n# dat_clean %&gt;%\n#   filter(Month %in% c(7:9)) %&gt;%\n#   group_by(basin, site_name, WaterYear) %&gt;%\n#   summarize(medyield = median(logYield, na.rm = TRUE)) %&gt;%\n#   ungroup() %&gt;%\n#   group_by(basin, WaterYear) %&gt;%\n#   summarize(sdyield = sd(medyield), nsites = n()) %&gt;%\n#   ungroup() %&gt;%\n#   left_join(wateravail %&gt;% select(basin, WaterYear, totalyield:tyz_sum_perc)) %&gt;%\n#   left_join(keepyears) %&gt;% filter(keep == \"yes\") %&gt;%\n#   mutate(basin = ifelse(basin == \"Shields River\", \"Yellowstone River\",\n#                         ifelse(basin == \"Flathead\", \"Flathead River\", basin))) %&gt;%\n#   mutate(basin = factor(basin, levels = c(\"West Brook\", \"Piney River\", \"Staunton River\", \"Paine Run\", \"Flathead River\", \"Yellowstone River\", \"Snake River\", \"Donner Blitzen\"))) %&gt;%\n#   ggplot(aes(x = tyz_sum_perc, y = sdyield)) +\n#   geom_smooth(method = \"lm\", color = \"black\", aes(weight = nsites)) +\n#   geom_point(aes(fill = basin, size = nsites), shape = 21) +\n#   scale_fill_brewer(palette = \"Set2\") +\n#   #facet_wrap(~basin) +\n#   theme_bw() + theme(panel.grid = element_blank())\n\n\n# calculate relative difference in range as above\nmydat &lt;- dat_clean %&gt;% \n  filter(Month %in% c(7:9)) %&gt;%\n  group_by(basin, WaterYear) %&gt;% \n  summarize(nsites = length(unique(site_name)),\n            littlerange = range(logYield)[2]-range(logYield)[1]) %&gt;% \n  ungroup() %&gt;% \n  left_join(dat_clean_big %&gt;% \n              filter(Month %in% c(7:9)) %&gt;% \n              group_by(basin, WaterYear) %&gt;% \n              summarize(bigrange = range(logYield)[2]-range(logYield)[1]) %&gt;%\n              ungroup()) %&gt;%\n  mutate(pe_range = ((littlerange-bigrange)/bigrange)*100) %&gt;%\n  left_join(wateravail %&gt;% select(basin, WaterYear, totalyield:tyz_sum_perc)) %&gt;%\n  left_join(keepyears) %&gt;% filter(keep == \"yes\") %&gt;%\n  mutate(basin = ifelse(basin == \"Shields River\", \"Yellowstone River\",\n                        ifelse(basin == \"Flathead\", \"Flathead River\", \n                               ifelse(basin == \"Donner Blitzen\", \"Donner-Blitzen River\", basin)))) %&gt;%\n  mutate(basin = factor(basin, levels = c(\"West Brook\", \"Staunton River\", \"Paine Run\", \n                                          \"Flathead River\", \"Yellowstone River\", \"Snake River\", \"Donner-Blitzen River\"))) \n\nmydat\n\n\n# A tibble: 38 × 14\n   basin     WaterYear nsites littlerange bigrange pe_range site_name totalyield\n   &lt;fct&gt;         &lt;dbl&gt;  &lt;int&gt;       &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;\n 1 Donner-B…      2019      4       0.332    0.583    -43.1 Donner B…       278.\n 2 Donner-B…      2020      4       0.605    0.516     17.3 Donner B…       152.\n 3 Donner-B…      2021      4       0.474    0.336     41.1 Donner B…       122.\n 4 Donner-B…      2022      4       0.741    0.597     24.0 Donner B…       125.\n 5 Flathead…      2018     18       1.82     0.783    133.  North Fo…       654.\n 6 Flathead…      2019     19       2.47     0.668    269.  North Fo…       448.\n 7 Flathead…      2020     19       3.49     1.11     214.  North Fo…       605.\n 8 Flathead…      2021     17       2.76     0.756    265.  North Fo…       483.\n 9 Flathead…      2022     16       2.76     1.11     149.  North Fo…       793.\n10 Flathead…      2023      9       1.94     0.451    331.  North Fo…       372.\n# ℹ 28 more rows\n# ℹ 6 more variables: totalyield_z &lt;dbl&gt;, totalyield_sum &lt;dbl&gt;,\n#   totalyield_sum_z &lt;dbl&gt;, tyz_perc &lt;dbl&gt;, tyz_sum_perc &lt;dbl&gt;, keep &lt;chr&gt;\n\n\nShow simple linear model summary, weighted by number of sites\n\n\nCode\nsummary(lm(pe_range ~ tyz_sum_perc, data = mydat, weights = nsites))\n\n\n\nCall:\nlm(formula = pe_range ~ tyz_sum_perc, data = mydat, weights = nsites)\n\nWeighted Residuals:\n    Min      1Q  Median      3Q     Max \n-503.62 -205.22  -25.09  108.84  639.45 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  239.1231    26.7291   8.946 1.12e-10 ***\ntyz_sum_perc  -1.8174     0.5199  -3.496  0.00127 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 262.6 on 36 degrees of freedom\nMultiple R-squared:  0.2534,    Adjusted R-squared:  0.2327 \nF-statistic: 12.22 on 1 and 36 DF,  p-value: 0.001273\n\n\nShow distribution of spatial streamflow heterogeneity by basin. Lots of structuring by basin, driven in large part by Staunton and Donner-Blitzen Rivers.\n\n\nCode\npar(mar = c(9,4,0.5,0.5))\nboxplot(pe_range ~ basin, data = mydat, ylab = \"Spatial streamflow heterogeneity\", xlab = \"\", las = 2, col = mycols)\n\n\n\n\n\n\n\n\n\n\n4.4.1 Fit model\nUse a random slope/random intercept mixed effects model to estimate the among-basin mean effect of regional water availability on spatial streamflow heterogeneity.\nNotes:\n\nThis regression is not weighted by number of headwater sites used to calculate spatial heterogeneity because variance decomposition using rptR does not support use of weights.\nThis uses z-scored x-values…using the raw percentiles leads to model convergence issues\n\n\n\nCode\nmydat &lt;- mydat %&gt;% mutate(z_tyz_sum_perc = scale(tyz_sum_perc))\nlmod &lt;- lmer(pe_range ~ z_tyz_sum_perc + (1 + z_tyz_sum_perc | basin), data = mydat)\nsummary(lmod)\n\n\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: pe_range ~ z_tyz_sum_perc + (1 + z_tyz_sum_perc | basin)\n   Data: mydat\n\nREML criterion at convergence: 430.4\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-1.5512 -0.4206 -0.1253  0.2584  2.8102 \n\nRandom effects:\n Groups   Name           Variance Std.Dev. Corr \n basin    (Intercept)    7810.1   88.37         \n          z_tyz_sum_perc  609.8   24.69    -0.92\n Residual                5127.9   71.61         \nNumber of obs: 38, groups:  basin, 7\n\nFixed effects:\n               Estimate Std. Error     df t value Pr(&gt;|t|)  \n(Intercept)      133.13      35.60   5.51   3.740   0.0113 *\nz_tyz_sum_perc   -45.39      16.29   3.62  -2.787   0.0554 .\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n            (Intr)\nz_tyz_sm_pr -0.521\n\n\nGet p-values for global slope and intercept: (doesn’t to run in Quarto…works fine in R)\n\n\nCode\ncoef(summary(as_lmerModLmerTest(lmod)))\n\n\n                Estimate Std. Error       df   t value   Pr(&gt;|t|)\n(Intercept)    133.13376   35.60169 5.510014  3.739534 0.01125212\nz_tyz_sum_perc -45.39251   16.28830 3.620345 -2.786817 0.05538425\n\n\nPlot relationship between spatial streamflow heterogeneity and regional water availability with global (among-population mean) regression line.\n\n\nCode\n# get predicted values and 95% credible interval\neffects_tyz &lt;- effects::effect(term = \"z_tyz_sum_perc\", mod = as_lmerModLmerTest(lmod), xlevels = list(z_tyz_sum_perc = seq(min(mydat$z_tyz_sum_perc), max(mydat$z_tyz_sum_perc), length.out = 1000)), se = list(level = 0.95))\nx_tyz &lt;- as_tibble(effects_tyz) %&gt;% mutate(tyz_sum_perc = (z_tyz_sum_perc * attr(mydat$z_tyz_sum_perc, \"scaled:scale\")) + attr(mydat$z_tyz_sum_perc, \"scaled:center\"))\n\n# trim data for panel labesl\nmydat_labs &lt;- bind_rows(mydat %&gt;% filter(basin == \"West Brook\", WaterYear %in% c(2020,2021)),\n                        mydat %&gt;% filter(basin == \"Snake River\", WaterYear %in% c(2021,2022))) %&gt;%\n  mutate(labs = c(\"b\", \"c\", \"d\", \"e\"))\n\n# plot \nrandiffplot &lt;- ggplot() + \n  geom_ribbon(data = x_tyz, aes(x = tyz_sum_perc, ymin = lower, ymax = upper), fill = \"grey80\") +\n  geom_line(data = x_tyz, aes(x = tyz_sum_perc, y = fit), color = \"black\", size = 1.25, lineend = \"round\") +\n  geom_point(data = mydat, aes(x = tyz_sum_perc, y = pe_range, fill = basin, size = nsites), shape = 21) + \n  scale_fill_brewer(palette = \"Set2\") +\n  geom_text(data = mydat_labs, aes(x = tyz_sum_perc, y = pe_range, label = labs), size = 3) +\n  theme_bw() + theme(panel.grid = element_blank(), axis.text = element_text(color = \"black\")) +\n  ylab(\"Spatial streamflow heterogeneity (percent difference)\") + xlab(\"Water availability (percentile)\") +\n  guides(fill = guide_legend(title = \"Basin\", override.aes = list(size = 5), order = 1), size = guide_legend(title = \"Number of sites\", order = 2)) +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\")\nrandiffplot\n\n\n\n\n\n\n\n\n\nCode\n# write to file\n# jpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/EcoD_RangeDiff_allsites2.jpg\", width = 4.75, height = 5, units = \"in\", res = 1000)\n# randiffplot\n# dev.off()\n\n\nUse rptR to decompose variance in spatial streamflow heterogeneity into fixed (regional water availability) and random (basin) effect sources:\n\n\nCode\nrmod &lt;- rptGaussian(pe_range ~ z_tyz_sum_perc + (1 + z_tyz_sum_perc | basin), data = mydat, grname = c(\"basin\", \"Fixed\"), ratio = TRUE, adjusted = FALSE, nboot = 1000)\n\n\nBootstrap Progress:\n\n\nCode\nprint(rmod)\n\n\n\n\nRepeatability estimation using the lmm method \n\nRepeatability for basin\nR  = 0.539\nSE = 0.171\nCI = [0.16, 0.813]\nP  = 0.00764 [LRT]\n     NA [Permutation]\n\nRepeatability for Fixed\nR  = 0.132\nSE = 0.101\nCI = [0.013, 0.392]\nP  = NA [LRT]\n     NA [Permutation]\n\n\nCode\nrmod$mod\n\n\nLinear mixed model fit by REML ['lmerMod']\nFormula: pe_range ~ z_tyz_sum_perc + (1 + z_tyz_sum_perc | basin)\n   Data: data\nREML criterion at convergence: 430.4229\nRandom effects:\n Groups   Name           Std.Dev. Corr \n basin    (Intercept)    88.37         \n          z_tyz_sum_perc 24.69    -0.92\n Residual                71.61         \nNumber of obs: 38, groups:  basin, 7\nFixed Effects:\n   (Intercept)  z_tyz_sum_perc  \n        133.13          -45.39  \n\n\nCode\nplot(rmod, grname = \"basin\")\n\n\n\n\n\n\n\n\n\nCode\nplot(rmod, grname = \"Fixed\")\n\n\n\n\n\n\n\n\n\nThe strong effect of basin is largely driven by Staunton and Donner-Blitzen Rivers. Without those basins, random effect variance shrinks and fixed effect variance expands considerably. Much of this pattern is likely due to low sample sizes (few headwater gages in these basins, particularly in the Donner-Blitzen)\n\n\nCode\nrmod &lt;- rptGaussian(pe_range ~ z_tyz_sum_perc + (1 + z_tyz_sum_perc | basin), data = mydat %&gt;% filter(!basin %in% c(\"Staunton River\", \"Donner-Blitzen River\")), grname = c(\"basin\", \"Fixed\"), ratio = TRUE, adjusted = FALSE, nboot = 1000)\n\n\nBootstrap Progress:\n\n\nCode\nprint(rmod)\n\n\n\n\nRepeatability estimation using the lmm method \n\nRepeatability for basin\nR  = 0.037\nSE = 0.114\nCI = [0, 0.409]\nP  = 1 [LRT]\n     NA [Permutation]\n\nRepeatability for Fixed\nR  = 0.304\nSE = 0.128\nCI = [0.066, 0.563]\nP  = NA [LRT]\n     NA [Permutation]\n\n\n\n\n4.4.2 Sensitivity analysis\nHow sensitive are these results to the choice of data (log) transformation, per comments from John Hammond during USGS internal review?\nSummary: While the among-network mean effect of water availability on heterogeneity was less significant using un-logged discharge data (p &gt; 0.05), this appeared to be driven by the highly non-normal distribution of raw discharge values, as the reviewer indicated. Importantly, the magnitude of the effect is similar and the qualitative results are unchanged (negative slope).\nData manipulation: use un-logged/raw Yield data to calculation spatial heterogeneity, also use CV rather than ranges\n\n\nCode\nmydat2 &lt;- dat_clean %&gt;% \n  filter(Month %in% c(7:9)) %&gt;%\n  group_by(basin, WaterYear) %&gt;% \n  summarize(nsites = length(unique(site_name)),\n            littlerange = range(Yield_mm)[2]-range(Yield_mm)[1],\n            littlecv = sd(Yield_mm)/mean(Yield_mm)) %&gt;% \n  ungroup() %&gt;% \n  left_join(dat_clean_big %&gt;% \n              filter(Month %in% c(7:9)) %&gt;% \n              group_by(basin, WaterYear) %&gt;% \n              summarize(bigrange = range(Yield_mm)[2]-range(Yield_mm)[1],\n                        bigcv = sd(Yield_mm)/mean(Yield_mm)) %&gt;%\n              ungroup()) %&gt;%\n  mutate(pe_range = ((littlerange-bigrange)/bigrange)*100,\n         pe_cv = ((littlecv-bigcv)/bigcv)*100) %&gt;%\n  left_join(wateravail %&gt;% select(basin, WaterYear, totalyield:tyz_sum_perc)) %&gt;%\n  left_join(keepyears) %&gt;% filter(keep == \"yes\") %&gt;%\n  mutate(basin = ifelse(basin == \"Shields River\", \"Yellowstone River\",\n                        ifelse(basin == \"Flathead\", \"Flathead River\", \n                               ifelse(basin == \"Donner Blitzen\", \"Donner-Blitzen River\", basin)))) %&gt;%\n  mutate(basin = factor(basin, levels = c(\"West Brook\", \"Staunton River\", \"Paine Run\", \n                                          \"Flathead River\", \"Yellowstone River\", \"Snake River\", \"Donner-Blitzen River\"))) \n\n\n\n4.4.2.1 Range, un-logged\nFit the mixed effects model\n\n\nCode\nmydat2 &lt;- mydat2 %&gt;% mutate(z_tyz_sum_perc = scale(tyz_sum_perc))\nlmod &lt;- lmer(pe_range ~ z_tyz_sum_perc + (1 + z_tyz_sum_perc | basin), data = mydat2)\nsummary(lmod)\n\n\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: pe_range ~ z_tyz_sum_perc + (1 + z_tyz_sum_perc | basin)\n   Data: mydat2\n\nREML criterion at convergence: 523.5\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-1.8092 -0.4147 -0.1069  0.3663  3.7590 \n\nRandom effects:\n Groups   Name           Variance Std.Dev. Corr \n basin    (Intercept)    79567    282.1         \n          z_tyz_sum_perc 19495    139.6    -1.00\n Residual                70913    266.3         \nNumber of obs: 38, groups:  basin, 7\n\nFixed effects:\n               Estimate Std. Error      df t value Pr(&gt;|t|)\n(Intercept)     238.131    116.273   4.215   2.048    0.106\nz_tyz_sum_perc  -86.826     72.670   2.761  -1.195    0.325\n\nCorrelation of Fixed Effects:\n            (Intr)\nz_tyz_sm_pr -0.703\noptimizer (nloptwrap) convergence code: 0 (OK)\nboundary (singular) fit: see help('isSingular')\n\n\nPlot\n\n\nCode\n# get predicted values and 95% credible interval\neffects_tyz &lt;- effects::effect(term = \"z_tyz_sum_perc\", mod = as_lmerModLmerTest(lmod), xlevels = list(z_tyz_sum_perc = seq(min(mydat2$z_tyz_sum_perc), max(mydat2$z_tyz_sum_perc), length.out = 1000)), se = list(level = 0.95))\nx_tyz &lt;- as_tibble(effects_tyz) %&gt;% mutate(tyz_sum_perc = (z_tyz_sum_perc * attr(mydat2$z_tyz_sum_perc, \"scaled:scale\")) + attr(mydat2$z_tyz_sum_perc, \"scaled:center\"))\n\n# trim data for panel labesl\nmydat_labs &lt;- bind_rows(mydat2 %&gt;% filter(basin == \"West Brook\", WaterYear %in% c(2020,2021)),\n                        mydat2 %&gt;% filter(basin == \"Snake River\", WaterYear %in% c(2021,2022))) %&gt;%\n  mutate(labs = c(\"b\", \"c\", \"d\", \"e\"))\n\n# plot \nggplot() + \n  geom_ribbon(data = x_tyz, aes(x = tyz_sum_perc, ymin = lower, ymax = upper), fill = \"grey80\") +\n  geom_line(data = x_tyz, aes(x = tyz_sum_perc, y = fit), color = \"black\", size = 1.25, lineend = \"round\") +\n  geom_point(data = mydat2, aes(x = tyz_sum_perc, y = pe_range, fill = basin, size = nsites), shape = 21) + \n  scale_fill_brewer(palette = \"Set2\") +\n  theme_bw() + theme(panel.grid = element_blank(), axis.text = element_text(color = \"black\")) +\n  ylab(\"Spatial streamflow heterogeneity (percent difference)\") + xlab(\"Water availability (percentile)\") +\n  guides(fill = guide_legend(title = \"Basin\", override.aes = list(size = 5), order = 1), size = guide_legend(title = \"Number of sites\", order = 2)) +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\")\n\n\n\n\n\n\n\n\n\n\n\n4.4.2.2 CV\nFig the mmixed effects model\n\n\nCode\nmydat2 &lt;- mydat2 %&gt;% mutate(z_tyz_sum_perc = scale(tyz_sum_perc))\nlmod &lt;- lmer(pe_cv ~ z_tyz_sum_perc + (1 + z_tyz_sum_perc | basin), data = mydat2)\nsummary(lmod)\n\n\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: pe_cv ~ z_tyz_sum_perc + (1 + z_tyz_sum_perc | basin)\n   Data: mydat2\n\nREML criterion at convergence: 450.7\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-2.4210 -0.3359  0.0006  0.2983  3.9794 \n\nRandom effects:\n Groups   Name           Variance Std.Dev. Corr \n basin    (Intercept)    24752    157.33        \n          z_tyz_sum_perc  8948     94.59   -1.00\n Residual                 7991     89.39        \nNumber of obs: 38, groups:  basin, 7\n\nFixed effects:\n               Estimate Std. Error      df t value Pr(&gt;|t|)\n(Intercept)      88.405     61.551   5.248   1.436    0.208\nz_tyz_sum_perc  -55.189     39.739   3.675  -1.389    0.243\n\nCorrelation of Fixed Effects:\n            (Intr)\nz_tyz_sm_pr -0.889\noptimizer (nloptwrap) convergence code: 0 (OK)\nboundary (singular) fit: see help('isSingular')\n\n\nPlot\n\n\nCode\n# get predicted values and 95% credible interval\neffects_tyz &lt;- effects::effect(term = \"z_tyz_sum_perc\", mod = as_lmerModLmerTest(lmod), xlevels = list(z_tyz_sum_perc = seq(min(mydat2$z_tyz_sum_perc), max(mydat2$z_tyz_sum_perc), length.out = 1000)), se = list(level = 0.95))\nx_tyz &lt;- as_tibble(effects_tyz) %&gt;% mutate(tyz_sum_perc = (z_tyz_sum_perc * attr(mydat2$z_tyz_sum_perc, \"scaled:scale\")) + attr(mydat2$z_tyz_sum_perc, \"scaled:center\"))\n\n# trim data for panel labesl\nmydat_labs &lt;- bind_rows(mydat2 %&gt;% filter(basin == \"West Brook\", WaterYear %in% c(2020,2021)),\n                        mydat2 %&gt;% filter(basin == \"Snake River\", WaterYear %in% c(2021,2022))) %&gt;%\n  mutate(labs = c(\"b\", \"c\", \"d\", \"e\"))\n\n# plot \nggplot() + \n  geom_ribbon(data = x_tyz, aes(x = tyz_sum_perc, ymin = lower, ymax = upper), fill = \"grey80\") +\n  geom_line(data = x_tyz, aes(x = tyz_sum_perc, y = fit), color = \"black\", size = 1.25, lineend = \"round\") +\n  geom_point(data = mydat2, aes(x = tyz_sum_perc, y = pe_cv, fill = basin, size = nsites), shape = 21) + \n  scale_fill_brewer(palette = \"Set2\") +\n  theme_bw() + theme(panel.grid = element_blank(), axis.text = element_text(color = \"black\")) +\n  ylab(\"Spatial streamflow heterogeneity (percent difference)\") + xlab(\"Water availability (percentile)\") +\n  guides(fill = guide_legend(title = \"Basin\", override.aes = list(size = 5), order = 1), size = guide_legend(title = \"Number of sites\", order = 2)) +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Variation by Climate</span>"
    ]
  },
  {
    "objectID": "VarByClimate.html#paper-figs",
    "href": "VarByClimate.html#paper-figs",
    "title": "4  Variation by Climate",
    "section": "4.5 Paper figs",
    "text": "4.5 Paper figs\n\n4.5.1 West Brook\n2020/2021 summer flow distributions\n\n\nCode\nbas &lt;- \"West Brook\"\norderr &lt;- wborder\nwtryrs &lt;- c(2020,2021)\n\n# filter data\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% wtryrs) %&gt;%\n  mutate(site_name = factor(site_name, levels = orderr))\n\nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))\n\n# annual\npann &lt;- ggplot() +\n  geom_density(data = tempdat, aes(x = logYield, y = ..scaled.., color = site_name, fill = site_name), size = 0.8) +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  scale_fill_manual(values = alpha(cet_pal(nsites, name = \"i1\"), 0.1)) +\n  geom_density(data = tempdat_big, aes(x = logYield, y = ..scaled..), color = \"grey40\", fill = alpha(\"grey40\", 0.2), size = 0.8) +\n  xlab(\"Summer log(Yield, mm/day)\") + ylab(\"Density\") +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), \n                     axis.text.y = element_blank(), axis.ticks.y = element_blank(),\n                     axis.text = element_text(color = \"black\"), legend.position = \"none\",\n                     strip.background = element_blank(), strip.text = element_blank()) +\n  facet_wrap(~factor(WaterYear, levels = as.numeric(unlist(pedat %&gt;% arrange(totalyield_sum_z) %&gt;% select(WaterYear)))), ncol = 1)\n\nprint(pann)\n\n\n\n\n\n\n\n\n\nCode\n# jpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/EcoD_summerdensity_WB_annual.jpg\", width = 2.75, height = 5, units = \"in\", res = 1000)\n# pann\n# dev.off()\n\n\n2020/2021 summer flow distributions\n\n\nCode\nbas &lt;- \"West Brook\"\norderr &lt;- wborder\nwtryrs &lt;- c(2020,2021)\n\n# sheds and network\nmysheds &lt;- vect(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Mass_Watersheds.shp\")\nmysheds &lt;- mysheds[mysheds$site_id == \"WBR\",]\nmynet &lt;- vect(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Mass_Streams.shp\")\ncrs(mynet) &lt;- crs(mysheds)\nmynet &lt;- crop(mynet, mysheds)\n\n# get lakes\nlakes &lt;- get_waterbodies(AOI = siteinfo_sp %&gt;% filter(site_name == \"West Brook NWIS\"), buffer = 10000)\nlakes &lt;- lakes %&gt;% filter(gnis_name %in% c(\"Northampton Reservoir Upper\", \"Northampton Reservoir\"))\n\n# little g points\nmylittleg &lt;- siteinfo_sp %&gt;% filter(site_name %in% wborder) %&gt;% mutate(site_name = factor(site_name, levels = wborder))\n\n\n# filter data\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == bas, !is.na(logYield), Month %in% c(7:9)) %&gt;%\n  mutate(site_name = factor(site_name, levels = orderr))\nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))\n\n  # calculate variability for reference gage\nvarbig &lt;- tempdat_big %&gt;% \n  group_by(WaterYear) %&gt;% \n  summarize(bigrange = range(logYield)[2]-range(logYield)[1],\n            bigsd = sd(logYield),\n            bigvar = var(logYield)) %&gt;%\n  ungroup()\n\n# calculate total summer water availability from reference gage\n#summerflow &lt;- tempdat_big %&gt;% group_by(WaterYear) %&gt;% summarize(summeryield = sum(Yield_mm), summeryield_log = log(sum(Yield_mm))) %&gt;% ungroup()\n#wateravail2 &lt;- wateravail %&gt;% select(basin, WaterYear, totalyield, totalyield_z)\n\n# calculate relative variation\npedat &lt;- tempdat %&gt;% \n  group_by(basin, WaterYear) %&gt;% \n  summarize(nsites = length(unique(site_name)),\n            littlerange = range(logYield)[2]-range(logYield)[1],\n            littlesd = sd(logYield),\n            littlevar = var(logYield)) %&gt;% \n  ungroup() %&gt;% \n  left_join(varbig) %&gt;%\n  mutate(pe_range = ((littlerange-bigrange)/bigrange),\n         pe_sd = ((littlesd-bigsd)/bigsd),\n         pe_var = ((littlevar-bigvar)/bigvar)) %&gt;%\n  left_join(wateravail %&gt;% select(basin, WaterYear, totalyield, totalyield_z, totalyield_sum, totalyield_sum_z, tyz_perc, tyz_sum_perc)) %&gt;% \n  filter(WaterYear %in% wtryrs) %&gt;%\n  mutate(wylab = substr(WaterYear, 3, 4)) %&gt;%\n  arrange(totalyield_sum_z)\n  \n# calculate annual median summer flow\nannmed &lt;- tempdat %&gt;%\n  #filter(WaterYear %in% c(lowyr, highyr)) %&gt;%\n  group_by(site_name, WaterYear) %&gt;%\n  summarize(medlogYield = median(logYield, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n# arrange years by total annual yield\nwtryrs_arranged &lt;- as.numeric(unlist(pedat %&gt;% select(WaterYear)))\n\n# plot it\nplotlist_wb &lt;- list()\nfor(i in 1:length(wtryrs_arranged)) {\n  mylittleg &lt;- siteinfo_sp %&gt;% filter(site_name %in% orderr) %&gt;% left_join(annmed %&gt;% filter(WaterYear == wtryrs_arranged[i]))\n  mylittleg_sheds &lt;- sheds %&gt;% filter(site_name %in% orderr) %&gt;% left_join(annmed %&gt;% filter(WaterYear == wtryrs_arranged[i])) %&gt;% arrange(desc(area_sqmi))\n  plotlist_wb[[i]] &lt;- local({\n    i &lt;- i\n    ggplot() +\n      geom_sf(data = st_as_sf(mysheds), color = \"black\", fill = \"white\", linewidth = 0.4) + \n      geom_sf(data = mylittleg_sheds, aes(fill = medlogYield), color = \"black\") +\n      scale_fill_viridis(option = \"G\", direction = 1, limits = range(annmed$medlogYield), na.value = \"grey\") +\n      geom_sf(data = st_as_sf(mynet), color = \"white\", linewidth = 1, lineend = \"round\") +\n      geom_sf(data = st_as_sf(mynet), color = \"royalblue4\", linewidth = 0.6, lineend = \"round\") +\n      geom_sf(data = lakes, color = \"white\", fill = \"lightskyblue1\", linewidth = 0.7) +\n      geom_sf(data = lakes, color = \"royalblue4\", fill = \"lightskyblue1\", linewidth = 0.5) +\n      geom_sf(data = mylittleg, shape = 21, fill = \"white\", size = 2) +\n      labs(fill = \"Median\\nsummer\\nlog(Yield)\") + #annotation_scale() +\n      coord_sf(xlim = range(st_coordinates(mylittleg_sheds)[,1]), ylim = range(st_coordinates(mylittleg_sheds)[,2])) +\n      theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = \"none\", axis.text = element_blank()) +\n      theme_void() + scale_x_continuous(expand = c(0.003, 0.003)) + scale_y_continuous(expand = c(0.002, 0.002))\n      #annotate(\"label\", x = Inf, y = Inf, label = paste(pedat$WaterYear[i], \" (\", pedat$tyz_sum_perc[i], \"%)\", sep = \"\"), vjust = 1.15, hjust = 1.05, size = 5)\n      })\n}\np &lt;- ggarrange(plotlist = plotlist_wb, common.legend = TRUE, legend = \"right\", nrow = 2)\nprint(p)\n\n\n\n\n\n\n\n\n\nCode\n# jpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/EcoD_summermedianmap_WB_annual.jpg\", width = 4, height = 6, units = \"in\", res = 1000)\n# p\n# dev.off()\n\n\n\n\n4.5.2 Snake River\n2021/2022 summer flow distributions\n\n\nCode\nbas &lt;- \"Snake River\"\norderr &lt;- snakeorder\nwtryrs &lt;- c(2021,2022)\n\n# filter data\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% wtryrs) %&gt;%\n  mutate(site_name = factor(site_name, levels = orderr))\n\nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))\n\n# annual\npann &lt;- ggplot() +\n  geom_density(data = tempdat, aes(x = logYield, y = ..scaled.., color = site_name, fill = site_name), size = 0.8) +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  scale_fill_manual(values = alpha(cet_pal(nsites, name = \"i1\"), 0.1)) +\n  geom_density(data = tempdat_big, aes(x = logYield, y = ..scaled..), color = \"grey40\", fill = alpha(\"grey40\", 0.2), size = 0.8) +\n  xlab(\"Summer log(Yield, mm/day)\") + ylab(\"Density\") +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), \n                     axis.text.y = element_blank(), axis.ticks.y = element_blank(),\n                     axis.text = element_text(color = \"black\"), legend.position = \"none\",\n                     strip.background = element_blank(), strip.text = element_blank()) +\n  facet_wrap(~factor(WaterYear, levels = as.numeric(unlist(pedat %&gt;% arrange(totalyield_sum_z) %&gt;% select(WaterYear)))), ncol = 1)\n\nprint(pann)\n\n\n\n\n\n\n\n\n\nCode\n# jpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/EcoD_summerdensity_Snake_annual.jpg\", width = 2.75, height = 5, units = \"in\", res = 1000)\n# pann\n# dev.off()\n\n\n2022/2022 summer flow distributions\n\n\nCode\nbas &lt;- \"Snake River\"\norderr &lt;- snakeorder\nwtryrs &lt;- c(2021,2022)\n\nmysheds &lt;- vect(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/Snake_Watersheds.shp\")\nmysheds &lt;- mysheds[mysheds$site_id == \"SP11\",]\nmynet &lt;- vect(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Snake_Streams.shp\")\ncrs(mynet) &lt;- crs(mysheds)\nmynet &lt;- crop(mynet, mysheds)\n\n# get lakes\nlakes &lt;- get_waterbodies(AOI = siteinfo_sp %&gt;% filter(site_name == \"Spread Creek Dam\"), buffer = 100000)\nlakes &lt;- st_transform(lakes, crs(mysheds))\nlakes &lt;- st_intersection(lakes, st_as_sf(mysheds))\nlakes &lt;- lakes %&gt;% filter(gnis_name %in% c(\"Leidy Lake\"))\n\n# points\nmylittleg &lt;- siteinfo_sp %&gt;% filter(site_name %in% snakeorder) %&gt;% mutate(site_name = factor(site_name, levels = snakeorder))\n# edit geometry to reduce overlap\nst_geometry(mylittleg)[mylittleg$site_name == \"SF Spread Creek Lower NWIS\"] &lt;- st_point(c(-110.32226, 43.76118))\nst_geometry(mylittleg)[mylittleg$site_name == \"NF Spread Creek Lower\"] &lt;- st_point(c(-110.3199, 43.766533))\nst_geometry(mylittleg)[mylittleg$site_name == \"Grizzly Creek\"] &lt;- st_point(c(-110.23289, 43.77433))\nst_geometry(mylittleg)[mylittleg$site_name == \"NF Spread Creek Upper\"] &lt;- st_point(c(-110.23405, 43.77227))\nst_geometry(mylittleg)[mylittleg$site_name == \"SF Spread Creek Upper\"] &lt;- st_point(c(-110.31475, 43.73661))\n\n\n# filter data\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == bas, !is.na(logYield), Month %in% c(7:9)) %&gt;%\n  mutate(site_name = factor(site_name, levels = orderr))\nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))\n\n  # calculate variability for reference gage\nvarbig &lt;- tempdat_big %&gt;% \n  group_by(WaterYear) %&gt;% \n  summarize(bigrange = range(logYield)[2]-range(logYield)[1],\n            bigsd = sd(logYield),\n            bigvar = var(logYield)) %&gt;%\n  ungroup()\n\n# calculate total summer water availability from reference gage\n#summerflow &lt;- tempdat_big %&gt;% group_by(WaterYear) %&gt;% summarize(summeryield = sum(Yield_mm), summeryield_log = log(sum(Yield_mm))) %&gt;% ungroup()\n#wateravail2 &lt;- wateravail %&gt;% select(basin, WaterYear, totalyield, totalyield_z)\n\n# calculate relative variation\npedat &lt;- tempdat %&gt;% \n  group_by(basin, WaterYear) %&gt;% \n  summarize(nsites = length(unique(site_name)),\n            littlerange = range(logYield)[2]-range(logYield)[1],\n            littlesd = sd(logYield),\n            littlevar = var(logYield)) %&gt;% \n  ungroup() %&gt;% \n  left_join(varbig) %&gt;%\n  mutate(pe_range = ((littlerange-bigrange)/bigrange),\n         pe_sd = ((littlesd-bigsd)/bigsd),\n         pe_var = ((littlevar-bigvar)/bigvar)) %&gt;%\n  left_join(wateravail %&gt;% select(basin, WaterYear, totalyield, totalyield_z, totalyield_sum, totalyield_sum_z, tyz_perc, tyz_sum_perc)) %&gt;% \n  filter(WaterYear %in% wtryrs) %&gt;%\n  mutate(wylab = substr(WaterYear, 3, 4)) %&gt;%\n  arrange(totalyield_sum_z)\n  \n# calculate annual median summer flow\nannmed &lt;- tempdat %&gt;%\n  #filter(WaterYear %in% c(lowyr, highyr)) %&gt;%\n  group_by(site_name, WaterYear) %&gt;%\n  summarize(medlogYield = median(logYield, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n# arrange years by total annual yield\nwtryrs_arranged &lt;- as.numeric(unlist(pedat %&gt;% select(WaterYear)))\n\n# plot it\nplotlist_wb &lt;- list()\nfor(i in 1:length(wtryrs_arranged)) {\n  mylittleg &lt;- siteinfo_sp %&gt;% filter(site_name %in% orderr) %&gt;% left_join(annmed %&gt;% filter(WaterYear == wtryrs_arranged[i]))\n  mylittleg_sheds &lt;- sheds %&gt;% filter(site_name %in% orderr) %&gt;% left_join(annmed %&gt;% filter(WaterYear == wtryrs_arranged[i])) %&gt;% arrange(desc(area_sqmi))\n  plotlist_wb[[i]] &lt;- local({\n    i &lt;- i\n    ggplot() +\n      geom_sf(data = st_as_sf(mysheds), color = \"black\", fill = \"white\", linewidth = 0.4) + \n      geom_sf(data = mylittleg_sheds, aes(fill = medlogYield), color = \"black\") +\n      scale_fill_viridis(option = \"G\", direction = 1, limits = range(annmed$medlogYield), na.value = \"grey\") +\n      geom_sf(data = st_as_sf(mynet), color = \"white\", linewidth = 1, lineend = \"round\") +\n      geom_sf(data = st_as_sf(mynet), color = \"royalblue4\", linewidth = 0.6, lineend = \"round\") +\n      geom_sf(data = lakes, color = \"white\", fill = \"lightskyblue1\", linewidth = 0.7) +\n      geom_sf(data = lakes, color = \"royalblue4\", fill = \"lightskyblue1\", linewidth = 0.5) +\n      geom_sf(data = mylittleg, shape = 21, fill = \"white\", size = 2) +\n      labs(fill = \"Median\\nsummer\\nlog(Yield)\") + #annotation_scale() +\n      coord_sf(xlim = range(st_coordinates(mylittleg_sheds)[,1]), ylim = range(st_coordinates(mylittleg_sheds)[,2])) +\n      theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = \"none\", axis.text = element_blank()) +\n      theme_void() + scale_x_continuous(expand = c(0.003, 0.003)) + scale_y_continuous(expand = c(0.002, 0.002))\n      #annotate(\"label\", x = Inf, y = Inf, label = paste(pedat$WaterYear[i], \" (\", pedat$tyz_sum_perc[i], \"%)\", sep = \"\"), vjust = 1.15, hjust = 1.05, size = 5)\n      })\n}\np &lt;- ggarrange(plotlist = plotlist_wb, common.legend = TRUE, legend = \"right\", nrow = 2)\nprint(p)\n\n\n\n\n\n\n\n\n\nCode\n# jpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/EcoD_summermedianmap_Snake_annual.jpg\", width = 4, height = 6, units = \"in\", res = 1000)\n# p\n# dev.off()",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Variation by Climate</span>"
    ]
  },
  {
    "objectID": "ReferenceLowFlow.html",
    "href": "ReferenceLowFlow.html",
    "title": "5  Low Flow Variation",
    "section": "",
    "text": "5.1 Data\nPurpose: Evaluate spatiotemporal variation in drought-related low flow conditions across headwater stream networks.\nSite information\nCode\nsiteinfo &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_SiteInformation.csv\")\nsiteinfo_sp &lt;- st_as_sf(siteinfo, coords = c(\"long\", \"lat\"), crs = 4326)\nLittle g’s\nCode\ndat_clean &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/LittleG_data_clean.csv\")\nBig G’s\nCode\ndat_clean_big &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/BigG_data_clean.csv\")\nClimate\nCode\nclimdf &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/Daymet_climate.csv\")\nclimdf_summ &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/Daymet_climate_summary.csv\")\nWater availability\nCode\n# wateravail &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/BigG_wateravailability_annual.csv\")\nwateravail &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/BigG_wateravailability_annual.csv\") %&gt;%\n  filter(!is.na(totalyield), !is.na(totalyield_sum)) %&gt;%\n  group_by(site_name) %&gt;%\n  mutate(tyz_perc = percentile(totalyield_z),\n         tyz_sum_perc = percentile(totalyield_sum_z)) %&gt;%\n  mutate(tyz_perc = ifelse(is.na(tyz_perc), 0, tyz_perc),\n         tyz_sum_perc = ifelse(is.na(tyz_sum_perc), 0, tyz_sum_perc)) %&gt;%\n  ungroup()\n\nwateravail2 &lt;- wateravail %&gt;% \n  mutate(basin = ifelse(basin == \"Shields River\", \"Yellowstone River\",\n                        ifelse(basin == \"Flathead\", \"Flathead River\",  \n                               ifelse(basin == \"Donner Blitzen\", \"Donner-Blitzen River\", basin)))) %&gt;%\n  mutate(basin = factor(basin, levels = c(\"West Brook\", \"Piney River\", \"Staunton River\", \"Paine Run\", \"Flathead River\", \"Yellowstone River\", \"Snake River\", \"Donner-Blitzen River\")))\nCode\n# get range of years for little g data\ndaterange &lt;- dat_clean %&gt;% group_by(basin) %&gt;% summarize(minyear = year(min(date)), maxyear = year(max(date)))\n\n# spread ecod years\nmylist &lt;- vector(\"list\", length = dim(daterange)[1])\nfor (i in 1:dim(daterange)[1]) {\n  mylist[[i]] &lt;- tibble(basin = daterange$basin[i], WaterYear = seq(from = daterange$minyear[i], to = daterange$maxyear[i], by = 1))\n}\nyrdf &lt;- do.call(rbind, mylist) %&gt;% mutate(ecodyr = \"yes\")",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Low Flow Variation</span>"
    ]
  },
  {
    "objectID": "ReferenceLowFlow.html#order-sites",
    "href": "ReferenceLowFlow.html#order-sites",
    "title": "5  Low Flow Variation",
    "section": "5.2 Order sites",
    "text": "5.2 Order sites\nFor colors, order sites from downstream to upstream (roughly) and by subbasin (if appropriate)\n\n\nCode\nwborder &lt;- c(\"West Brook NWIS\", \"West Brook Lower\", \"Mitchell Brook\", \"Jimmy Brook\", \"Obear Brook Lower\", \"West Brook Upper\", \"West Brook Reservoir\", \"Sanderson Brook\", \"Avery Brook\", \"West Whately Brook\")\npaineorder &lt;- c(\"Paine Run 10\", \"Paine Run 08\", \"Paine Run 07\", \"Paine Run 06\", \"Paine Run 02\", \"Paine Run 01\")\nstauntorder &lt;- c(\"Staunton River 10\", \"Staunton River 09\", \"Staunton River 07\", \"Staunton River 06\", \"Staunton River 03\", \"Staunton River 02\")\nflatorder &lt;- c(\"BigCreekLower\", \"LangfordCreekLower\", \"LangfordCreekUpper\", \"Big Creek NWIS\", \"BigCreekUpper\", \"HallowattCreekLower\", \"NicolaCreek\", \"WernerCreek\", \"Hallowat Creek NWIS\", \"CoalCreekLower\", \"CycloneCreekLower\", \"CycloneCreekMiddle\", \"CycloneCreekUpper\", \"CoalCreekMiddle\", \"CoalCreekNorth\", \"CoalCreekHeadwaters\", \"McGeeCreekLower\", \"McGeeCreekTrib\", \"McGeeCreekUpper\")\nyellorder &lt;- c(\"Shields River Valley Ranch\", \"Deep Creek\", \"Crandall Creek\", \"Buck Creek\", \"Dugout Creek\", \"Shields River ab Dugout\", \"Lodgepole Creek\", \"EF Duck Creek be HF\", \"EF Duck Creek ab HF\", \"Henrys Fork\")\nsnakeorder &lt;- c(\"Spread Creek Dam\", \"Rock Creek\", \"NF Spread Creek Lower\", \"NF Spread Creek Upper\", \"Grizzly Creek\", \"SF Spread Creek Lower\", \"Grouse Creek\", \"SF Spread Creek Upper\", \"Leidy Creek Mouth\")\ndonnerorder &lt;- c(\"Fish Creek NWIS\", \"Donner Blitzen ab Fish NWIS\", \"Donner Blitzen nr Burnt Car NWIS\", \"Donner Blitzen ab Indian NWIS\")",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Low Flow Variation</span>"
    ]
  },
  {
    "objectID": "ReferenceLowFlow.html#low-flow-hydrology",
    "href": "ReferenceLowFlow.html#low-flow-hydrology",
    "title": "5  Low Flow Variation",
    "section": "5.3 Low flow hydrology",
    "text": "5.3 Low flow hydrology\nSet drought levels\n\n\nCode\nmydroughtlevels &lt;- c(\"none\", \"q50\", \"q45\", \"q40\", \"q35\", \"q30\", \"q25\", \"q20\", \"q15\", \"q10\", \"q05\", \"q02\")\n\n\n\n5.3.1 Delineate low flows\nDrought/low flow delineation is somewhat complicated by the fact that some streams simply have greater yield than others. For example, using low flow thresholds derived from the reference gage and applied to headwater gages will never detect low flow conditions at groundwater-dominated sites, but this doesn’t mean that flow at that site isn’t lower than normal (for that site). This is most obvious in the Snake River basin, where NF Spread Creek Upper never experiences drought (because this is presumably a gaining reach) and Rock and Grouse Creeks are in a perpetual state of drought (presumable these are losing reaches). This is a classic “At which level of organization do I standardize my data?” question: are general differences in flow volume among sites signal or noise? But perhaps more importantly, this is a question of “what is drought?” Is drought relative to some larger regional metric (e.g., big G)? Or is it a local phenomenon, where the specifics of individual streams and reaches matter.\nFor each site individually, generate (fixed) drought/low flow thresholds using the same quantiles same as above: ~0.05 increments from 0.02 to 0.50. Restrict data to selected basins, sites, and years with (nearly) complete summer (July, August, September) data over the selected periods/locations. (Standardization needs to be done over comparable time periods, at least among sites within basins).\nRequire 95% data availability across all water years for site to be included!\nOrganize data, get site-level low flow threshold values, and denote drought periods\n\n\nCode\n# Require 95% data availability!\nmonthss &lt;- c(7:9)\n\n# grab data and bind, z-score Yield\ndat_clean_sub &lt;- bind_rows(\n  dat_clean %&gt;% filter(basin == \"West Brook\", WaterYear %in% c(2020:2023), Month %in% monthss, !site_name %in% c(\"Mitchell Brook\", \"West Brook Lower\")) %&gt;%\n    bind_rows(dat_clean_big %&gt;% filter(basin == \"West Brook\", WaterYear %in% c(2020:2023), Month %in% monthss)),\n  \n  dat_clean %&gt;% filter(basin == \"Staunton River\", WaterYear %in% c(2019:2022), Month %in% monthss) %&gt;%\n    bind_rows(dat_clean_big %&gt;% filter(basin == \"Staunton River\", WaterYear %in% c(2019:2022), Month %in% monthss)),\n  \n  dat_clean %&gt;% filter(basin == \"Flathead\", WaterYear %in% c(2019:2021), Month %in% monthss, !site_name %in% c(\"BigCreekLower\", \"LangfordCreekUpper\", \"WernerCreek\", \"CycloneCreekMiddle\", \"CoalCreekMiddle\", \"McGeeCreekUpper\")) %&gt;%\n    bind_rows(dat_clean_big %&gt;% filter(basin == \"Flathead\", WaterYear %in% c(2019:2021), Month %in% monthss)),\n  \n  # dat_clean %&gt;% filter(subbasin == \"Big Creek\", WaterYear %in% c(2019:2021), Month %in% monthss, !site_name %in% c(\"BigCreekLower\", \"LangfordCreekUpper\", \"NicolaCreek\", \"WernerCreek\")) %&gt;%\n  #   bind_rows(dat_clean_big %&gt;% filter(basin == \"Flathead\", WaterYear %in% c(2019:2021), Month %in% monthss) %&gt;% mutate(subbasin = \"Big Creek\")),\n  # \n  # dat_clean %&gt;% filter(subbasin == \"Coal Creek\", WaterYear %in% c(2019:2021), Month %in% monthss, !site_name %in% c(\"CycloneCreekMiddle\", \"CoalCreekMiddle\", \"CoalCreekHeadwaters\")) %&gt;%\n  #   bind_rows(dat_clean_big %&gt;% filter(basin == \"Flathead\", WaterYear %in% c(2019:2021), Month %in% monthss) %&gt;% mutate(subbasin = \"Coal Creek\")),\n  \n  dat_clean %&gt;% filter(basin == \"Snake River\", WaterYear %in% c(2020:2022), Month %in% monthss, !site_name %in% c(\"Spread Creek Dam\")) %&gt;%\n    bind_rows(dat_clean_big %&gt;% filter(basin == \"Snake River\", WaterYear %in% c(2020:2022), Month %in% monthss)),\n  \n  dat_clean %&gt;% filter(basin == \"Shields River\", WaterYear %in% c(2017, 2019, 2020, 2022), Month %in% monthss, !site_name %in% c(\"Shields River Valley Ranch\", \"Buck Creek\", \"Lodgepole Creek\")) %&gt;% group_by(site_name) %&gt;%\n    bind_rows(dat_clean_big %&gt;% filter(basin == \"Shields River\", WaterYear %in% c(2017, 2019, 2020, 2022), Month %in% monthss)),\n  \n  # dat_clean %&gt;% filter(subbasin == \"Shields River\", WaterYear %in% c(2019, 2020, 2023), Month %in% monthss, !site_name %in% c(\"Shields River Valley Ranch\")) %&gt;% group_by(site_name) %&gt;%\n  #   bind_rows(dat_clean_big %&gt;% filter(basin == \"Shields River\", WaterYear %in% c(2019, 2020, 2023), Month %in% monthss)),\n  # \n  # dat_clean %&gt;% filter(subbasin == \"Duck Creek\", WaterYear %in% c(2017:2022), Month %in% monthss) %&gt;%\n  #   bind_rows(dat_clean_big %&gt;% filter(basin == \"Shields River\", WaterYear %in% c(2017:2022), Month %in% monthss) %&gt;% mutate(subbasin = \"Duck Creek\")),\n  \n  dat_clean %&gt;% filter(basin == \"Donner Blitzen\", WaterYear %in% c(2019:2022), Month %in% monthss) %&gt;%\n    bind_rows(dat_clean_big %&gt;% filter(basin == \"Donner Blitzen\", WaterYear %in% c(2019:2022), Month %in% monthss))\n) %&gt;%\n  group_by(site_name) %&gt;%\n  mutate(z_Yield_mm = scale(Yield_mm, center = TRUE, scale = TRUE)[,1]) %&gt;%\n  ungroup()\n\n# get low flow thresholds\ndat_clean_sub_thresh &lt;- dat_clean_sub %&gt;% \n  group_by(site_name) %&gt;%\n  summarize(thresh_50_fix = quantile(z_Yield_mm, probs = 0.50, na.rm = TRUE),\n            thresh_45_fix = quantile(z_Yield_mm, probs = 0.45, na.rm = TRUE),\n            thresh_40_fix = quantile(z_Yield_mm, probs = 0.40, na.rm = TRUE),\n            thresh_35_fix = quantile(z_Yield_mm, probs = 0.35, na.rm = TRUE),\n            thresh_30_fix = quantile(z_Yield_mm, probs = 0.30, na.rm = TRUE),\n            thresh_25_fix = quantile(z_Yield_mm, probs = 0.25, na.rm = TRUE),\n            thresh_20_fix = quantile(z_Yield_mm, probs = 0.20, na.rm = TRUE),\n            thresh_15_fix = quantile(z_Yield_mm, probs = 0.15, na.rm = TRUE),\n            thresh_10_fix = quantile(z_Yield_mm, probs = 0.10, na.rm = TRUE),\n            thresh_05_fix = quantile(z_Yield_mm, probs = 0.05, na.rm = TRUE),\n            thresh_02_fix = quantile(z_Yield_mm, probs = 0.02, na.rm = TRUE)) %&gt;%\n  ungroup()\ndat_clean_sub_thresh\n\n\n# A tibble: 52 × 12\n   site_name           thresh_50_fix thresh_45_fix thresh_40_fix thresh_35_fix\n   &lt;chr&gt;                       &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;\n 1 Avery Brook                -0.263        -0.308        -0.336        -0.348\n 2 Big Creek NWIS             -0.380        -0.421        -0.474        -0.532\n 3 BigCreekUpper              -0.435        -0.488        -0.532        -0.576\n 4 CoalCreekHeadwaters        -0.345        -0.359        -0.368        -0.379\n 5 CoalCreekLower             -0.378        -0.443        -0.507        -0.553\n 6 CoalCreekNorth             -0.349        -0.429        -0.488        -0.548\n 7 Crandall Creek             -0.347        -0.465        -0.526        -0.588\n 8 CycloneCreekLower          -0.225        -0.313        -0.405        -0.457\n 9 CycloneCreekUpper          -0.504        -0.555        -0.596        -0.617\n10 Deep Creek                 -0.340        -0.396        -0.441        -0.488\n# ℹ 42 more rows\n# ℹ 7 more variables: thresh_30_fix &lt;dbl&gt;, thresh_25_fix &lt;dbl&gt;,\n#   thresh_20_fix &lt;dbl&gt;, thresh_15_fix &lt;dbl&gt;, thresh_10_fix &lt;dbl&gt;,\n#   thresh_05_fix &lt;dbl&gt;, thresh_02_fix &lt;dbl&gt;\n\n\nCode\n# join thresholds to data and denote drought periods\ndat_clean_sub &lt;- dat_clean_sub %&gt;% \n  left_join(dat_clean_sub_thresh) %&gt;%\n  mutate(month = month(date),\n         year = year(date),\n         drought_fix = ifelse(z_Yield_mm &lt;= thresh_50_fix & z_Yield_mm &gt; thresh_45_fix, \"q50\",\n                              ifelse(z_Yield_mm &lt;= thresh_45_fix & z_Yield_mm &gt; thresh_40_fix, \"q45\",\n                                     ifelse(z_Yield_mm &lt;= thresh_40_fix & z_Yield_mm &gt; thresh_35_fix, \"q40\",\n                                            ifelse(z_Yield_mm &lt;= thresh_35_fix & z_Yield_mm &gt; thresh_30_fix, \"q35\",\n                                                   ifelse(z_Yield_mm &lt;= thresh_30_fix & z_Yield_mm &gt; thresh_25_fix, \"q30\",\n                                                          ifelse(z_Yield_mm &lt;= thresh_25_fix & z_Yield_mm &gt; thresh_20_fix, \"q25\",\n                                                                 ifelse(z_Yield_mm &lt;= thresh_20_fix & z_Yield_mm &gt; thresh_15_fix, \"q20\",\n                                                                        ifelse(z_Yield_mm &lt;= thresh_15_fix & z_Yield_mm &gt; thresh_10_fix, \"q15\",\n                                                                               ifelse(z_Yield_mm &lt;= thresh_10_fix & z_Yield_mm &gt; thresh_05_fix, \"q10\",\n                                                                                      ifelse(z_Yield_mm &lt;= thresh_05_fix & z_Yield_mm &gt; thresh_02_fix, \"q05\",  \n                                                                                             ifelse(z_Yield_mm &lt;= thresh_02_fix, \"q02\", \"none\")))))))))))) %&gt;%\n  mutate(drought_fix = factor(ifelse(is.na(Yield_mm), NA, drought_fix), levels = mydroughtlevels)) \ndat_clean_sub\n\n\n# A tibble: 16,731 × 31\n   site_name   basin    subbasin region date       flow_mean tempc_mean Yield_mm\n   &lt;chr&gt;       &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;  &lt;date&gt;         &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1 Avery Brook West Br… West Br… Mass   2020-07-01     1.34        16.0    0.446\n 2 Avery Brook West Br… West Br… Mass   2020-07-02     0.963       16.1    0.321\n 3 Avery Brook West Br… West Br… Mass   2020-07-03     2.40        17.3    0.800\n 4 Avery Brook West Br… West Br… Mass   2020-07-04     3.31        17.4    1.10 \n 5 Avery Brook West Br… West Br… Mass   2020-07-05     1.38        17.5    0.460\n 6 Avery Brook West Br… West Br… Mass   2020-07-06     0.965       17.5    0.322\n 7 Avery Brook West Br… West Br… Mass   2020-07-07     0.778       17.3    0.259\n 8 Avery Brook West Br… West Br… Mass   2020-07-08     0.795       17.3    0.265\n 9 Avery Brook West Br… West Br… Mass   2020-07-09     1.07        17.9    0.356\n10 Avery Brook West Br… West Br… Mass   2020-07-10    14.3         19.4    4.76 \n# ℹ 16,721 more rows\n# ℹ 23 more variables: CalendarYear &lt;dbl&gt;, Month &lt;dbl&gt;, MonthName &lt;chr&gt;,\n#   WaterYear &lt;dbl&gt;, DayofYear &lt;dbl&gt;, logYield &lt;dbl&gt;, designation &lt;chr&gt;,\n#   doy_calendar &lt;dbl&gt;, z_Yield_mm &lt;dbl&gt;, thresh_50_fix &lt;dbl&gt;,\n#   thresh_45_fix &lt;dbl&gt;, thresh_40_fix &lt;dbl&gt;, thresh_35_fix &lt;dbl&gt;,\n#   thresh_30_fix &lt;dbl&gt;, thresh_25_fix &lt;dbl&gt;, thresh_20_fix &lt;dbl&gt;,\n#   thresh_15_fix &lt;dbl&gt;, thresh_10_fix &lt;dbl&gt;, thresh_05_fix &lt;dbl&gt;, …\n\n\n\n\n5.3.2 Plot heatmaps\nCreate heatmap plotting function\n\n\nCode\n# site-level drought threshold\nheatmapfun_site &lt;- function(bas, months, bigG, orderr) {\n  dd &lt;- dat_clean_sub %&gt;% filter(basin == bas)\n  mysites &lt;- c(unique(unlist(dd %&gt;% filter(site_name != bigG) %&gt;% select(site_name))), bigG)\n  myrect &lt;- dd %&gt;% group_by(WaterYear) %&gt;% summarize(mindate = min(date), maxdate = max(date)) %&gt;% ungroup()\n  p &lt;- dd %&gt;%\n    ggplot() +\n    geom_tile(aes(x = date, y = factor(site_name, levels = c(rev(orderr), bigG)), fill = drought_fix)) +\n    scale_fill_viridis(option = \"A\", direction = -1, discrete = TRUE, limits = mydroughtlevels) +\n    geom_rect(data = myrect, aes(xmin = mindate, xmax = maxdate, ymin = length(mysites)-0.5, ymax = length(mysites)+0.5), \n              color = \"grey70\", fill = NA, size = 1.25) +\n    xlab(\"Date\") + ylab(\"Site\") +\n    #facet_wrap(~WaterYear, scales = \"free_x\") + \n    facet_wrap2(~WaterYear, scales = \"free_x\", nrow = 2, ncol = 3, trim_blank = FALSE) +\n    theme_bw() + theme(axis.title = element_blank())\nreturn(p)\n}\n\n\n\nWest BrookStaunton RiverFlatheadSnake RiverYellowstone RiverDonner Blitzen\n\n\n\n\nCode\nheatmapfun_site(bas = \"West Brook\", bigG = \"South River Conway NWIS\", months = c(7:9), orderr = wborder)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nheatmapfun_site(bas = \"Staunton River\", bigG = \"Rapidan River NWIS\", months = c(7:9), orderr = stauntorder)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nheatmapfun_site(bas = \"Flathead\", bigG = \"North Fork Flathead River NWIS\", months = c(7:9), orderr = flatorder)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nheatmapfun_site(bas = \"Snake River\", bigG = \"Pacific Creek at Moran NWIS\", months = c(7:9), order = snakeorder)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nheatmapfun_site(bas = \"Shields River\", bigG = \"Yellowstone River Livingston NWIS\", months = c(7:9), orderr = yellorder)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nheatmapfun_site(bas = \"Donner Blitzen\", bigG = \"Donner Blitzen River nr Frenchglen NWIS\", months = c(7:9), orderr = donnerorder)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Low Flow Variation</span>"
    ]
  },
  {
    "objectID": "ReferenceLowFlow.html#deficit-and-duration",
    "href": "ReferenceLowFlow.html#deficit-and-duration",
    "title": "5  Low Flow Variation",
    "section": "5.4 Deficit and duration",
    "text": "5.4 Deficit and duration\nCalculate low flow deficit and duration from site-specific low flow delineation.\nOrganize data\n\n\nCode\ndat_clean_sub_deficit &lt;- dat_clean_sub %&gt;%\n  mutate(deficit_50_fix = ifelse(z_Yield_mm &lt; thresh_50_fix, abs(thresh_50_fix - z_Yield_mm), 0),\n         deficit_45_fix = ifelse(z_Yield_mm &lt; thresh_45_fix, abs(thresh_45_fix - z_Yield_mm), 0),\n         deficit_40_fix = ifelse(z_Yield_mm &lt; thresh_40_fix, abs(thresh_40_fix - z_Yield_mm), 0),\n         deficit_35_fix = ifelse(z_Yield_mm &lt; thresh_35_fix, abs(thresh_35_fix - z_Yield_mm), 0),\n         deficit_30_fix = ifelse(z_Yield_mm &lt; thresh_30_fix, abs(thresh_30_fix - z_Yield_mm), 0),\n         deficit_25_fix = ifelse(z_Yield_mm &lt; thresh_25_fix, abs(thresh_25_fix - z_Yield_mm), 0),\n         deficit_20_fix = ifelse(z_Yield_mm &lt; thresh_20_fix, abs(thresh_20_fix - z_Yield_mm), 0),\n         deficit_15_fix = ifelse(z_Yield_mm &lt; thresh_15_fix, abs(thresh_15_fix - z_Yield_mm), 0),\n         deficit_10_fix = ifelse(z_Yield_mm &lt; thresh_10_fix, abs(thresh_10_fix - z_Yield_mm), 0),\n         deficit_05_fix = ifelse(z_Yield_mm &lt; thresh_05_fix, abs(thresh_05_fix - z_Yield_mm), 0),\n         deficit_02_fix = ifelse(z_Yield_mm &lt; thresh_02_fix, abs(thresh_02_fix - z_Yield_mm), 0))\n\n# summarize by summer\ndefdur_ssn_sub &lt;- dat_clean_sub_deficit %&gt;% \n  filter(!is.na(Yield_mm), Month %in% c(7:9)) %&gt;% \n  group_by(site_name, basin, subbasin, region, designation, CalendarYear, WaterYear) %&gt;% \n  summarize(ndays = n(),\n            propdays = ndays/(31+31+30), \n            \n            duration_50_fix = sum(deficit_50_fix &gt; 0),\n            duration_45_fix = sum(deficit_45_fix &gt; 0),\n            duration_40_fix = sum(deficit_40_fix &gt; 0),\n            duration_35_fix = sum(deficit_35_fix &gt; 0),\n            duration_30_fix = sum(deficit_30_fix &gt; 0),\n            duration_25_fix = sum(deficit_25_fix &gt; 0),\n            duration_20_fix = sum(deficit_20_fix &gt; 0),\n            duration_15_fix = sum(deficit_15_fix &gt; 0),\n            duration_10_fix = sum(deficit_10_fix &gt; 0),\n            duration_05_fix = sum(deficit_05_fix &gt; 0),\n            duration_02_fix = sum(deficit_02_fix &gt; 0),\n            \n            duration_50_fix_prop = sum(deficit_50_fix &gt; 0) / ndays,\n            duration_45_fix_prop = sum(deficit_45_fix &gt; 0) / ndays,\n            duration_40_fix_prop = sum(deficit_40_fix &gt; 0) / ndays,\n            duration_35_fix_prop = sum(deficit_35_fix &gt; 0) / ndays,\n            duration_30_fix_prop = sum(deficit_30_fix &gt; 0) / ndays,\n            duration_25_fix_prop = sum(deficit_25_fix &gt; 0) / ndays,\n            duration_20_fix_prop = sum(deficit_20_fix &gt; 0) / ndays,\n            duration_15_fix_prop = sum(deficit_15_fix &gt; 0) / ndays,\n            duration_10_fix_prop = sum(deficit_10_fix &gt; 0) / ndays,\n            duration_05_fix_prop = sum(deficit_05_fix &gt; 0) / ndays,\n            duration_02_fix_prop = sum(deficit_02_fix &gt; 0) / ndays,\n            \n            deficit_50_fix = sum(deficit_50_fix),\n            deficit_45_fix = sum(deficit_45_fix),\n            deficit_40_fix = sum(deficit_40_fix),\n            deficit_35_fix = sum(deficit_35_fix),\n            deficit_30_fix = sum(deficit_30_fix),\n            deficit_25_fix = sum(deficit_25_fix),\n            deficit_20_fix = sum(deficit_20_fix),\n            deficit_15_fix = sum(deficit_15_fix),\n            deficit_10_fix = sum(deficit_10_fix),\n            deficit_05_fix = sum(deficit_05_fix),\n            deficit_02_fix = sum(deficit_02_fix)) %&gt;%\n  ungroup() %&gt;%\n  mutate(designation = ifelse(is.na(designation), \"big\", designation)) %&gt;%\n  filter(propdays &gt;= 0.70) %&gt;%\n  left_join(wateravail %&gt;% select(basin, WaterYear, totalyield, totalyield_z))\n\n# keep raw days for binomial model\ndefdur_ssn_sub2 &lt;- dat_clean_sub_deficit %&gt;% \n  filter(!is.na(Yield_mm), Month %in% c(7:9)) %&gt;% \n  group_by(site_name, basin, subbasin, region, designation, CalendarYear, WaterYear) %&gt;% \n  summarize(ndays = n(),\n            propdays = ndays/(31+31+30), \n            duration_50_fix = sum(deficit_50_fix &gt; 0),\n            duration_45_fix = sum(deficit_45_fix &gt; 0),\n            duration_40_fix = sum(deficit_40_fix &gt; 0),\n            duration_35_fix = sum(deficit_35_fix &gt; 0),\n            duration_30_fix = sum(deficit_30_fix &gt; 0),\n            duration_25_fix = sum(deficit_25_fix &gt; 0),\n            duration_20_fix = sum(deficit_20_fix &gt; 0),\n            duration_15_fix = sum(deficit_15_fix &gt; 0),\n            duration_10_fix = sum(deficit_10_fix &gt; 0),\n            duration_05_fix = sum(deficit_05_fix &gt; 0),\n            duration_02_fix = sum(deficit_02_fix &gt; 0),\n            \n            deficit_50_fix = sum(deficit_50_fix),\n            deficit_45_fix = sum(deficit_45_fix),\n            deficit_40_fix = sum(deficit_40_fix),\n            deficit_35_fix = sum(deficit_35_fix),\n            deficit_30_fix = sum(deficit_30_fix),\n            deficit_25_fix = sum(deficit_25_fix),\n            deficit_20_fix = sum(deficit_20_fix),\n            deficit_15_fix = sum(deficit_15_fix),\n            deficit_10_fix = sum(deficit_10_fix),\n            deficit_05_fix = sum(deficit_05_fix),\n            deficit_02_fix = sum(deficit_02_fix)) %&gt;%\n  ungroup() %&gt;%\n  mutate(designation = ifelse(is.na(designation), \"big\", designation)) %&gt;%\n  filter(propdays &gt;= 0.70) %&gt;%\n  left_join(wateravail %&gt;% select(basin, WaterYear, totalyield, totalyield_z))\n\n\nCreate plotting functions. These are the same as defined above, but instead grab the “defdur_ssn_sub” object for site-level low flow thresholds.\n\n\nCode\ndurationplotfun_sub &lt;- function(bas, bigG, months, wateryears, dropsites = NA) {\n  # filter and summarize data\n  dd &lt;- defdur_ssn_sub %&gt;% \n    filter(basin == bas | site_name == bigG, WaterYear %in% wateryears, !site_name %in% dropsites) %&gt;%\n    mutate(WaterYear = factor(WaterYear, levels = wateryears))\n\n  # order sites, Big G first\n  mysites &lt;- c(unique(unlist(dd %&gt;% filter(designation == \"big\") %&gt;% select(site_name))),\n               unique(unlist(dd %&gt;% filter(designation == \"little\") %&gt;% select(site_name))))\n\n  # among site StDev ~ percentile\n  p_sds &lt;- dd %&gt;% \n    gather(duration_50_fix_prop:duration_02_fix_prop, key = \"metric\", value = \"duration\") %&gt;%\n    mutate(quant = as.numeric(gsub(\".*?([0-9]+).*\", \"\\\\1\", metric)) ) %&gt;% \n    filter(designation == \"little\") %&gt;%\n    group_by(WaterYear, totalyield_z, metric, quant) %&gt;%\n    summarize(sddur = sd(duration, na.rm = TRUE)) %&gt;%\n    ungroup() %&gt;%\n    #left_join(dd %&gt;% filter(site_name == bigG) %&gt;% select(WaterYear, duration_25_fix_prop) %&gt;% rename(dur25 = duration_25_fix_prop)) %&gt;%\n    left_join(wateravail %&gt;% filter(site_name == bigG) %&gt;% select(WaterYear, tyz_sum_perc) %&gt;% mutate(WaterYear = as.factor(WaterYear))) %&gt;%\n    ggplot(aes(x = quant, y = sddur, color = tyz_sum_perc, group = WaterYear, shape = WaterYear)) +\n    stat_smooth() +\n    geom_point() +\n    scale_color_gradient(low = \"red\", high = \"blue\", limits = c(0,100)) +\n    xlab(\"Low flow threshold (percentile)\") + ylab(\"Among-site SD(duration)\") +\n    theme_bw() + \n    theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),\n          legend.position = \"bottom\", legend.direction = \"vertical\", legend.key.height = unit(0.3, 'cm')) \n  \n  # barplot 50th perc\n  p30 &lt;- dd %&gt;% \n    ggplot(aes(x = factor(site_name, levels = (mysites)), y = duration_50_fix_prop)) +\n    geom_bar(aes(fill = designation), stat = \"identity\") +\n    scale_fill_manual(values = c(\"grey20\", \"grey55\")) +\n    facet_wrap2(~WaterYear, ncol = 1, strip = strip_themed(background_x = elem_list_rect(fill = alpha(unique(layer_data(p_sds)[,1]), 0.5)))) +\n    ylim(0,1) +\n    ylab(\"Days below low flow threshold (%JAS)\") + ggtitle(\"50th perc.\") +\n    theme_bw() + \n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n          legend.position = \"none\", axis.title.x = element_blank(),\n          panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n  # barplot 25th perc.\n  p20 &lt;- dd %&gt;% \n    ggplot(aes(x = factor(site_name, levels = (mysites)), y = duration_25_fix_prop)) +\n    geom_bar(aes(fill = designation), stat = \"identity\") +\n    scale_fill_manual(values = c(\"grey20\", \"grey55\")) +\n    facet_wrap2(~WaterYear, ncol = 1, strip = strip_themed(background_x = elem_list_rect(fill = alpha(unique(layer_data(p_sds)[,1]), 0.5)))) +\n    ylim(0,1) +\n    ylab(\"Days below low flow threshold (%JAS)\") + ggtitle(\"25th perc.\") +\n    theme_bw() + \n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n          legend.position = \"none\", axis.title.x = element_blank(),\n          panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n  # barplot 10th perc.\n  p10 &lt;- dd %&gt;% \n    ggplot(aes(x = factor(site_name, levels = (mysites)), y = duration_10_fix_prop)) +\n    geom_bar(aes(fill = designation), stat = \"identity\") +\n    scale_fill_manual(values = c(\"grey20\", \"grey55\")) +\n    facet_wrap2(~WaterYear, ncol = 1, strip = strip_themed(background_x = elem_list_rect(fill = alpha(unique(layer_data(p_sds)[,1]), 0.5)))) +\n    ylim(0,1) +\n    ylab(\"Days below low flow threshold (%JAS)\") + ggtitle(\"10th perc.\") +\n    theme_bw() + \n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n          legend.position = \"none\", axis.title.x = element_blank(),\n          panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n  # barplot 5th perc.\n  p05 &lt;- dd %&gt;% \n    ggplot(aes(x = factor(site_name, levels = (mysites)), y = duration_05_fix_prop)) +\n    geom_bar(aes(fill = designation), stat = \"identity\") +\n    scale_fill_manual(values = c(\"grey20\", \"grey55\")) +\n    facet_wrap2(~WaterYear, ncol = 1, strip = strip_themed(background_x = elem_list_rect(fill = alpha(unique(layer_data(p_sds)[,1]), 0.5)))) +\n    ylim(0,1) +\n    ylab(\"Days below low flow threshold (%JAS)\") + ggtitle(\"5th perc.\") +\n    theme_bw() + \n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n          legend.position = \"none\", axis.title.x = element_blank(),\n          panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n  # barplot 2nd perc\n  p02 &lt;- dd %&gt;% \n    ggplot(aes(x = factor(site_name, levels = (mysites)), y = duration_02_fix_prop)) +\n    geom_bar(aes(fill = designation), stat = \"identity\") +\n    scale_fill_manual(values = c(\"grey20\", \"grey55\")) +\n    facet_wrap2(~WaterYear, ncol = 1, strip = strip_themed(background_x = elem_list_rect(fill = alpha(unique(layer_data(p_sds)[,1]), 0.5)))) +\n    ylim(0,1) +\n    ylab(\"Days below low flow threshold (%JAS)\") + ggtitle(\"2nd perc.\") +\n    theme_bw() + \n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n          legend.position = \"none\", axis.title.x = element_blank(),\n          panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n  # arrange plots\n  egg::ggarrange(p02 + theme(plot.margin = margin(r = 1, t = 5, b = 5)), \n                 p05 + theme(axis.text.y = element_blank(), axis.title.y = element_blank(), plot.margin = margin(r = 1, l = 1)), \n                 p10 + theme(axis.text.y = element_blank(), axis.title.y = element_blank(), plot.margin = margin(r = 1, l = 1)), \n                 p20 + theme(axis.text.y = element_blank(), axis.title.y = element_blank(), plot.margin = margin(r = 1, l = 1)), \n                 p30 + theme(axis.text.y = element_blank(), axis.title.y = element_blank(), plot.margin = margin(r = 1, l = 1)),\n                 p_sds,\n                 nrow = 1, widths = c(1,1,1,1,1,2.5))\n}\n\n\ndeficitplotfun_sub &lt;- function(bas, bigG, months, wateryears, dropsites = NA) {\n  # filter and summarize data\n  dd_all &lt;- defdur_ssn_sub %&gt;% filter(basin == bas | site_name == bigG, WaterYear %in% wateryears, !site_name %in% dropsites) \n  dd &lt;- defdur_ssn_sub %&gt;% \n    filter(basin == bas | site_name == bigG, WaterYear %in% wateryears, !site_name %in% dropsites) %&gt;%\n    mutate(WaterYear = factor(WaterYear, levels = wateryears))\n  \n  # get y-axis limit\n  ymax &lt;- max(dd %&gt;% select(deficit_50_fix:deficit_02_fix))\n\n  # order sites, Big G first\n  mysites &lt;- c(unique(unlist(dd %&gt;% filter(designation == \"big\") %&gt;% select(site_name))),\n               unique(unlist(dd %&gt;% filter(designation == \"little\") %&gt;% select(site_name))))\n\n  # among site StDev ~ percentile\n  p_sds &lt;- dd %&gt;% \n    gather(deficit_50_fix:deficit_02_fix, key = \"metric\", value = \"deficit\") %&gt;%\n    mutate(quant = as.numeric(gsub(\".*?([0-9]+).*\", \"\\\\1\", metric)) ) %&gt;% \n    filter(designation == \"little\") %&gt;%\n    group_by(WaterYear, totalyield_z, metric, quant) %&gt;%\n    summarize(sddur = sd(deficit, na.rm = TRUE)) %&gt;%\n    ungroup() %&gt;%\n    #left_join(dd %&gt;% filter(site_name == bigG) %&gt;% select(WaterYear, deficit_25_fix) %&gt;% rename(def25 = deficit_25_fix)) %&gt;%\n    left_join(wateravail %&gt;% filter(site_name == bigG) %&gt;% select(WaterYear, tyz_sum_perc) %&gt;% mutate(WaterYear = as.factor(WaterYear))) %&gt;%\n    ggplot(aes(x = quant, y = sddur, color = tyz_sum_perc, group = WaterYear, shape = WaterYear)) +\n    stat_smooth() +\n    geom_point() +\n    scale_color_gradient(low = \"red\", high = \"blue\", limits = c(0,100)) +\n    xlab(\"Low flow threshold (percentile)\") + ylab(\"Among-site SD(deficit)\") +\n    theme_bw() + \n    theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),\n          legend.position = \"bottom\", legend.direction = \"vertical\", legend.key.height = unit(0.3, 'cm'))\n  \n  # barplot 50th perc\n  p30 &lt;- dd %&gt;% \n    ggplot(aes(x = factor(site_name, levels = (mysites)), y = deficit_50_fix)) +\n    geom_bar(aes(fill = designation), stat = \"identity\") +\n    scale_fill_manual(values = c(\"grey20\", \"grey55\")) +\n    facet_wrap2(~WaterYear, ncol = 1, strip = strip_themed(background_x = elem_list_rect(fill = alpha(unique(layer_data(p_sds)[,1]), 0.5)))) +\n    ylim(0,ymax) +\n    ylab(\"Drought deficit (mm, JAS)\") + ggtitle(\"50th perc.\") +\n    theme_bw() + \n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n          legend.position = \"none\", axis.title.x = element_blank(),\n          panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n  # barplot 25th perc.\n  p20 &lt;- dd %&gt;% \n    ggplot(aes(x = factor(site_name, levels = (mysites)), y = deficit_25_fix)) +\n    geom_bar(aes(fill = designation), stat = \"identity\") +\n    scale_fill_manual(values = c(\"grey20\", \"grey55\")) +\n    facet_wrap2(~WaterYear, ncol = 1, strip = strip_themed(background_x = elem_list_rect(fill = alpha(unique(layer_data(p_sds)[,1]), 0.5)))) +\n    ylim(0,ymax) +\n    ylab(\"Drought deficit (mm, JAS)\") + ggtitle(\"25th perc.\") +\n    theme_bw() + \n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n          legend.position = \"none\", axis.title.x = element_blank(),\n          panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n  # barplot 10th perc.\n  p10 &lt;- dd %&gt;% \n    ggplot(aes(x = factor(site_name, levels = (mysites)), y = deficit_10_fix)) +\n    geom_bar(aes(fill = designation), stat = \"identity\") +\n    scale_fill_manual(values = c(\"grey20\", \"grey55\")) +\n    facet_wrap2(~WaterYear, ncol = 1, strip = strip_themed(background_x = elem_list_rect(fill = alpha(unique(layer_data(p_sds)[,1]), 0.5)))) +\n    ylim(0,ymax) +\n    ylab(\"Drought deficit (mm, JAS)\") + ggtitle(\"10th perc.\") +\n    theme_bw() + \n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n          legend.position = \"none\", axis.title.x = element_blank(),\n          panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n  # barplot 5th perc.\n  p05 &lt;- dd %&gt;% \n    ggplot(aes(x = factor(site_name, levels = (mysites)), y = deficit_05_fix)) +\n    geom_bar(aes(fill = designation), stat = \"identity\") +\n    scale_fill_manual(values = c(\"grey20\", \"grey55\")) +\n    facet_wrap2(~WaterYear, ncol = 1, strip = strip_themed(background_x = elem_list_rect(fill = alpha(unique(layer_data(p_sds)[,1]), 0.5)))) +\n    ylim(0,ymax) +\n    ylab(\"Drought deficit (mm, JAS)\") + ggtitle(\"5th perc.\") +\n    theme_bw() + \n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n          legend.position = \"none\", axis.title.x = element_blank(),\n          panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n  # barplot 2nd perc\n  p02 &lt;- dd %&gt;% \n    ggplot(aes(x = factor(site_name, levels = (mysites)), y = deficit_02_fix)) +\n    geom_bar(aes(fill = designation), stat = \"identity\") +\n    scale_fill_manual(values = c(\"grey20\", \"grey55\")) +\n    facet_wrap2(~WaterYear, ncol = 1, strip = strip_themed(background_x = elem_list_rect(fill = alpha(unique(layer_data(p_sds)[,1]), 0.5)))) +\n    ylim(0,ymax) +\n    ylab(\"Drought deficit (JAS)\") + ggtitle(\"2nd perc.\") +\n    theme_bw() + \n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n          legend.position = \"none\", axis.title.x = element_blank(),\n          panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n  # arrange plots\n  egg::ggarrange(p02 + theme(plot.margin = margin(r = 1, t = 5, b = 5)), \n                 p05 + theme(axis.text.y = element_blank(), axis.title.y = element_blank(), plot.margin = margin(r = 1, l = 1)), \n                 p10 + theme(axis.text.y = element_blank(), axis.title.y = element_blank(), plot.margin = margin(r = 1, l = 1)), \n                 p20 + theme(axis.text.y = element_blank(), axis.title.y = element_blank(), plot.margin = margin(r = 1, l = 1)), \n                 p30 + theme(axis.text.y = element_blank(), axis.title.y = element_blank(), plot.margin = margin(r = 1, l = 1)),\n                 p_sds,\n                 nrow = 1, widths = c(1,1,1,1,1,2.5))\n}\n\n\n\n5.4.1 Duration\nShow proportion of days (July - September) below different low flow thresholds (derived from temporally restricted, site-specific data) for each site during a relatively wet year and a dry year. Then, for each year, plot the relationship between the among site (little g’s only) standard deviation of low flow duration and the low flow threshold used to calculate duration\n\nWest BrookStaunton RiverFlatheadSnake RiverYellowstone RiverDonner Blitzen\n\n\n\n\nCode\ndurationplotfun_sub(bas = \"West Brook\", bigG = \"South River Conway NWIS\", months = c(7:9), wateryears = c(2022, 2020, 2021, 2023))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndurationplotfun_sub(bas = \"Staunton River\", bigG = \"Rapidan River NWIS\", months = c(7:9), wateryears = c(2019, 2022, 2021, 2020))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndurationplotfun_sub(bas = \"Flathead\", bigG = \"North Fork Flathead River NWIS\", months = c(7:9), wateryears = c(2019, 2021, 2020))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndurationplotfun_sub(bas = \"Snake River\", bigG = \"Pacific Creek at Moran NWIS\", months = c(7:9), wateryears = c(2021, 2020, 2022))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndurationplotfun_sub(bas = \"Shields River\", bigG = \"Yellowstone River Livingston NWIS\", months = c(7:9), wateryears = c(2020, 2019, 2023, 2017), dropsites = c(\"Shields River Valley Ranch\", \"Buck Creek\", \"Lodgepole Creek\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndurationplotfun_sub(bas = \"Donner Blitzen\", bigG = \"Donner Blitzen River nr Frenchglen NWIS\", months = c(7:9), wateryears = c(2021,2020,2022, 2019))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.4.2 Deficit\nShow total drought deficit (mm) relative to different low flow thresholds (derived from long-term Big G data) for each site during a relatively wet year and a dry year. Then, for each year, plot the relationship between the among site (little g’s only) standard deviation of deficit and the low flow threshold used to calculate deficit\n\nWest BrookStaunton RiverFlatheadSnake RiverYellowstone RiverDonner Blitzen\n\n\n\n\nCode\ndeficitplotfun_sub(bas = \"West Brook\", bigG = \"South River Conway NWIS\", months = c(7:9), wateryears = c(2022, 2020, 2021, 2023))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndeficitplotfun_sub(bas = \"Staunton River\", bigG = \"Rapidan River NWIS\", months = c(7:9), wateryears = c(2019, 2022, 2021, 2020))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndeficitplotfun_sub(bas = \"Flathead\", bigG = \"North Fork Flathead River NWIS\", months = c(7:9), wateryears = c(2019, 2021, 2020))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndeficitplotfun_sub(bas = \"Snake River\", bigG = \"Pacific Creek at Moran NWIS\", months = c(7:9), wateryears = c(2021, 2020, 2022))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndeficitplotfun_sub(bas = \"Shields River\", bigG = \"Yellowstone River Livingston NWIS\", months = c(7:9), wateryears = c(2020, 2019, 2023, 2017), dropsites = c(\"Shields River Valley Ranch\", \"Buck Creek\", \"Lodgepole Creek\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndeficitplotfun_sub(bas = \"Donner Blitzen\", bigG = \"Donner Blitzen River nr Frenchglen NWIS\", months = c(7:9), wateryears = c(2021,2020,2022, 2019))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.4.3 Summary plots\nWhat is the relationship between regional water availability (total summer flow percentile from long-term big G flow data) and spatial variation in little g drought duration and deficit?\nHypothesis: spatial variation in drought duration and deficit increases in dry years as controls on little G streamflow shift from regional to local (catchment) scales. (This follows directly from objective 1, but specifically considers low flow conditions).\nRename basins\n\n\nCode\ndefdur_ssn_sub2 &lt;- defdur_ssn_sub %&gt;%\n  mutate(basin = ifelse(basin == \"Shields River\", \"Yellowstone River\",\n                        ifelse(basin == \"Flathead\", \"Flathead River\", \n                               ifelse(basin == \"Donner Blitzen\", \"Donner-Blitzen River\", basin)))) %&gt;%\n  mutate(basin = factor(basin, levels = c(\"West Brook\", \"Piney River\", \"Staunton River\", \"Paine Run\", \n                                          \"Flathead River\", \"Yellowstone River\", \"Snake River\", \"Donner-Blitzen River\")))\n\n\n\nDuration: basins combinedDuration: by basinDeficit: basins combinedDeficit: by basin\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\np1 &lt;- defdur_ssn_sub %&gt;%\n  filter(designation == \"little\") %&gt;%\n  group_by(basin, WaterYear) %&gt;%\n  summarize(sddur = sd(deficit_02_fix)) %&gt;%\n  ungroup() %&gt;%\n  left_join(wateravail %&gt;% select(basin, WaterYear, totalyield:tyz_sum_perc)) %&gt;%\n  ggplot(aes(x = tyz_sum_perc, y = sddur, color = basin)) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  geom_point(aes(color = basin)) +\n  #facet_wrap(~basin) +\n  annotate(\"text\", label = \"2nd perc.\", x = Inf, y = Inf, hjust = 1, vjust = 1) +\n  theme_bw() + theme(panel.grid = element_blank(), axis.title = element_blank(), axis.text.x = element_blank(), legend.position = \"none\") + \n  ylim(0,6)\n\np2 &lt;- defdur_ssn_sub %&gt;%\n  filter(designation == \"little\") %&gt;%\n  group_by(basin, WaterYear) %&gt;%\n  summarize(sddur = sd(deficit_05_fix)) %&gt;%\n  ungroup() %&gt;%\n  left_join(wateravail %&gt;% select(basin, WaterYear, totalyield:tyz_sum_perc)) %&gt;%\n  ggplot(aes(x = tyz_sum_perc, y = sddur, color = basin)) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  geom_point(aes(color = basin)) +\n  #facet_wrap(~basin) +\n  annotate(\"text\", label = \"5th perc.\", x = Inf, y = Inf, hjust = 1, vjust = 1) +\n  theme_bw() + theme(panel.grid = element_blank(), axis.title = element_blank(), axis.text = element_blank()) + ylim(0,6)\n\np3 &lt;- defdur_ssn_sub %&gt;%\n  filter(designation == \"little\") %&gt;%\n  group_by(basin, WaterYear) %&gt;%\n  summarize(sddur = sd(deficit_10_fix)) %&gt;%\n  ungroup() %&gt;%\n  left_join(wateravail %&gt;% select(basin, WaterYear, totalyield:tyz_sum_perc)) %&gt;%\n  ggplot(aes(x = tyz_sum_perc, y = sddur, color = basin)) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  geom_point(aes(color = basin)) +\n  #facet_wrap(~basin) +\n  annotate(\"text\", label = \"10th perc.\", x = Inf, y = Inf, hjust = 1, vjust = 1) +\n  theme_bw() + theme(panel.grid = element_blank(), axis.title = element_blank(), legend.position = \"none\") + ylim(0,6)\n\np4 &lt;- defdur_ssn_sub %&gt;%\n  filter(designation == \"little\") %&gt;%\n  group_by(basin, WaterYear) %&gt;%\n  summarize(sddur = sd(deficit_20_fix)) %&gt;%\n  ungroup() %&gt;%\n  left_join(wateravail %&gt;% select(basin, WaterYear, totalyield:tyz_sum_perc)) %&gt;%\n  ggplot(aes(x = tyz_sum_perc, y = sddur, color = basin)) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  geom_point(aes(color = basin)) +\n  #facet_wrap(~basin) +\n  annotate(\"text\", label = \"20th perc.\", x = Inf, y = Inf, hjust = 1, vjust = 1) +\n  theme_bw() + theme(panel.grid = element_blank(), axis.title = element_blank(), axis.text.y = element_blank(), legend.position = \"none\") + ylim(0,6)\n\nannotate_figure(egg::ggarrange(p1, p2, p3, p4), \n                left = \"Among-site variation in drought deficit (SD)\", bottom = \"Regional water availability (percentile)\")\n\n\n\n\n\n\n\n\n\n\n\n\nSummarize relationships across thresholds: how does the definition of “low flow”/“drought” change the way we understand the effect of regional water availability on spatial variation in low flow conditions?\n\n\nCode\ncolnums &lt;- c(8:18)\neffecttib &lt;- tibble(threshold = rep(NA, times = length(colnums)),\n                    int_est = rep(NA, times = length(colnums)),\n                    int_se = rep(NA, times = length(colnums)),\n                    slo_est = rep(NA, times = length(colnums)),\n                    slo_se = rep(NA, times = length(colnums)))\n\nfor (i in 1:length(colnums)) {\n  effecttib$threshold[i] &lt;- parse_number(names(defdur_ssn_sub2)[colnums[i]+2])\n  dd &lt;- defdur_ssn_sub2 %&gt;%\n    filter(designation == \"little\", ndays &gt;= 87) %&gt;%\n    group_by(basin, WaterYear) %&gt;%\n    summarize(n = n()) %&gt;%\n    ungroup() %&gt;%\n    left_join(defdur_ssn_sub2 %&gt;%\n                filter(designation == \"little\", ndays &gt;= 87) %&gt;%\n                group_by(basin, WaterYear) %&gt;%\n                summarize_at(colnums[i], funs(min, max)) %&gt;%\n                ungroup()) %&gt;%\n    mutate(rangedur = max-min) %&gt;%\n    left_join(wateravail2 %&gt;% select(basin, WaterYear, tyz_sum_perc)) #%&gt;%\n    #rename(sddur = 4)\n  mymod &lt;- summary(lm(rangedur ~ tyz_sum_perc, data = dd, weights = n))\n  effecttib$int_est[i] &lt;- mymod$coefficients[1,1]\n  effecttib$int_se[i] &lt;- mymod$coefficients[1,2]\n  effecttib$slo_est[i] &lt;- mymod$coefficients[2,1]\n  effecttib$slo_se[i] &lt;- mymod$coefficients[2,2]\n}\n\np1 &lt;- effecttib %&gt;%\n  ggplot(aes(x = threshold, y = int_est)) +\n  geom_line(color = \"grey\") +\n  geom_point() + \n  geom_errorbar(aes(ymin = int_est-int_se, ymax = int_est+int_se), width = 1) +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\") +\n  xlab(\"Low flow threshold (percentile)\") + ylab(\"Intercept (spatial variation at\\n0% regional water availability)\") +\n  theme_classic()\n\np2 &lt;- effecttib %&gt;%\n  ggplot(aes(x = threshold, y = slo_est)) +\n  geom_line(color = \"grey\") +\n  geom_point() + \n  geom_errorbar(aes(ymin = slo_est-slo_se, ymax = slo_est+slo_se), width = 1) +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\") +\n  xlab(\"Low flow threshold (percentile)\") + ylab(\"Slope (effect of regional water\\navailability on spatial variation)\") +\n  theme_classic()\n\negg::ggarrange(p1, p2, nrow = 2)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Low Flow Variation</span>"
    ]
  },
  {
    "objectID": "ReferenceLowFlow.html#model-drought-agreement",
    "href": "ReferenceLowFlow.html#model-drought-agreement",
    "title": "5  Low Flow Variation",
    "section": "5.5 Model drought agreement",
    "text": "5.5 Model drought agreement\nHow suitable are reference gages for predicting low flow conditions in headwater stream networks?\n\nCalculate the difference between low flow duration at little g’s versus that at big G and model the relationship between these differences and basin-specific annual water availability to understand how reference gage suitability may change with regional climatic context\nInclude effects of water availability on the regression uncertainty (sigma) to evaluate how spatial heterogeneity in low flow conditions changes with regional water availability.\n\nCalculate attenuation strength (the ratio between model standard deviation in dry versus wet years, sensu Chezik et al. 2017) to describe the degree to which spatial variation in low flow conditions changes with annual water availability\n\nInclude random effects for basin to account for basin-level differences in the primary (and sigma?) relationship\nIteratively fit the model to data derived from a range of critical low flow thresholds to evaluate how the definition of low flows/drought affects inferences\n\n\n5.5.1 Data manipulation and plots\nCalculate difference in drought duration between headwaters gages and reference gage\n\n\nCode\ndefdur_ssn_sub2_little &lt;- defdur_ssn_sub2 %&gt;% filter(designation == \"little\")\ndefdur_ssn_sub2_big &lt;- defdur_ssn_sub2 %&gt;% filter(designation == \"big\") %&gt;% select(basin, WaterYear, ndays, duration_50_fix:duration_02_fix)\nnames(defdur_ssn_sub2_big) &lt;- c(\"basin\", \"WaterYear\", \"ndays_big\", \"duration_50_fix_big\", \"duration_45_fix_big\", \"duration_40_fix_big\", \"duration_35_fix_big\", \"duration_30_fix_big\", \"duration_25_fix_big\", \"duration_20_fix_big\", \"duration_15_fix_big\", \"duration_10_fix_big\", \"duration_05_fix_big\", \"duration_02_fix_big\")\n\njoineddefdur &lt;- defdur_ssn_sub2_little %&gt;% left_join(defdur_ssn_sub2_big) %&gt;%\n  mutate(ndays_diff = ndays - ndays_big,\n         duration_50_fix_diff = duration_50_fix - duration_50_fix_big,\n         duration_45_fix_diff = duration_45_fix - duration_45_fix_big,\n         duration_40_fix_diff = duration_40_fix - duration_40_fix_big,\n         duration_35_fix_diff = duration_35_fix - duration_35_fix_big,\n         duration_30_fix_diff = duration_30_fix - duration_30_fix_big,\n         duration_25_fix_diff = duration_25_fix - duration_25_fix_big,\n         duration_20_fix_diff = duration_20_fix - duration_20_fix_big,\n         duration_15_fix_diff = duration_15_fix - duration_15_fix_big,\n         duration_10_fix_diff = duration_10_fix - duration_10_fix_big,\n         duration_05_fix_diff = duration_05_fix - duration_05_fix_big,\n         duration_02_fix_diff = duration_02_fix - duration_02_fix_big) %&gt;%\n  left_join(wateravail2 %&gt;% select(basin, WaterYear, totalyield:tyz_sum_perc))\n\njoineddefdur &lt;- joineddefdur %&gt;% mutate(basin_num = as.numeric(basin))\n\njoineddefdur %&gt;% group_by(basin) %&gt;% summarize(basin_num = unique(basin_num))\n\n\n# A tibble: 6 × 2\n  basin                basin_num\n  &lt;fct&gt;                    &lt;dbl&gt;\n1 West Brook                   1\n2 Staunton River               3\n3 Flathead River               5\n4 Yellowstone River            6\n5 Snake River                  7\n6 Donner-Blitzen River         8\n\n\n\n\nCode\njoineddefdur %&gt;% filter(basin == \"Donner-Blitzen River\")\n\n\n# A tibble: 16 × 73\n   site_name      basin subbasin region designation CalendarYear WaterYear ndays\n   &lt;chr&gt;          &lt;fct&gt; &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt;              &lt;dbl&gt;     &lt;dbl&gt; &lt;int&gt;\n 1 Donner Blitze… Donn… Donner … Oreg   little              2019      2019    68\n 2 Donner Blitze… Donn… Donner … Oreg   little              2020      2020    92\n 3 Donner Blitze… Donn… Donner … Oreg   little              2021      2021    92\n 4 Donner Blitze… Donn… Donner … Oreg   little              2022      2022    92\n 5 Donner Blitze… Donn… Donner … Oreg   little              2019      2019    70\n 6 Donner Blitze… Donn… Donner … Oreg   little              2020      2020    92\n 7 Donner Blitze… Donn… Donner … Oreg   little              2021      2021    92\n 8 Donner Blitze… Donn… Donner … Oreg   little              2022      2022    92\n 9 Donner Blitze… Donn… Donner … Oreg   little              2019      2019    69\n10 Donner Blitze… Donn… Donner … Oreg   little              2020      2020    92\n11 Donner Blitze… Donn… Donner … Oreg   little              2021      2021    92\n12 Donner Blitze… Donn… Donner … Oreg   little              2022      2022    92\n13 Fish Creek NW… Donn… Donner … Oreg   little              2019      2019    68\n14 Fish Creek NW… Donn… Donner … Oreg   little              2020      2020    92\n15 Fish Creek NW… Donn… Donner … Oreg   little              2021      2021    92\n16 Fish Creek NW… Donn… Donner … Oreg   little              2022      2022    92\n# ℹ 65 more variables: propdays &lt;dbl&gt;, duration_50_fix &lt;int&gt;,\n#   duration_45_fix &lt;int&gt;, duration_40_fix &lt;int&gt;, duration_35_fix &lt;int&gt;,\n#   duration_30_fix &lt;int&gt;, duration_25_fix &lt;int&gt;, duration_20_fix &lt;int&gt;,\n#   duration_15_fix &lt;int&gt;, duration_10_fix &lt;int&gt;, duration_05_fix &lt;int&gt;,\n#   duration_02_fix &lt;int&gt;, duration_50_fix_prop &lt;dbl&gt;,\n#   duration_45_fix_prop &lt;dbl&gt;, duration_40_fix_prop &lt;dbl&gt;,\n#   duration_35_fix_prop &lt;dbl&gt;, duration_30_fix_prop &lt;dbl&gt;, …\n\n\nPlot difference in drought duration by regional water availability for 4 low flow thresholds\n\n\nCode\np1 &lt;- joineddefdur %&gt;%\n  mutate(groups = paste(basin, WaterYear, sep = \"_\")) %&gt;% \n  ggplot(aes(x = tyz_sum_perc, y = duration_10_fix_diff)) +\n  # geom_quantile(quantiles = c(0.05, 0.5, 0.95)) +\n  geom_point(aes(fill = basin), shape = 21, size = 2, position = position_jitter(seed = 1, width = 1)) +\n  scale_fill_manual(values = mycols) +\n  theme_bw() + theme(panel.grid = element_blank()) + ylim(-60,60)\n\np2 &lt;- joineddefdur %&gt;%\n  mutate(groups = paste(basin, WaterYear, sep = \"_\")) %&gt;% \n  ggplot(aes(x = tyz_sum_perc, y = duration_20_fix_diff)) +\n  # geom_quantile(quantiles = c(0.05, 0.5, 0.95)) +\n  geom_point(aes(fill = basin), shape = 21, size = 2, position = position_jitter(seed = 1, width = 1)) +\n  scale_fill_manual(values = mycols) +\n  theme_bw() + theme(panel.grid = element_blank()) + ylim(-60,60)\n\np3 &lt;- joineddefdur %&gt;%\n  mutate(groups = paste(basin, WaterYear, sep = \"_\")) %&gt;% \n  ggplot(aes(x = tyz_sum_perc, y = duration_30_fix_diff)) +\n  # geom_quantile(quantiles = c(0.05, 0.5, 0.95)) +\n  geom_point(aes(fill = basin), shape = 21, size = 2, position = position_jitter(seed = 1, width = 1)) +\n  scale_fill_manual(values = mycols) +\n  theme_bw() + theme(panel.grid = element_blank()) + ylim(-60,60)\n\np4 &lt;- joineddefdur %&gt;%\n  mutate(groups = paste(basin, WaterYear, sep = \"_\")) %&gt;% \n  ggplot(aes(x = tyz_sum_perc, y = duration_40_fix_diff)) +\n  # geom_quantile(quantiles = c(0.05, 0.5, 0.95)) +\n  geom_point(aes(fill = basin), shape = 21, size = 2, position = position_jitter(seed = 1, width = 1)) +\n  scale_fill_manual(values = mycols) +\n  theme_bw() + theme(panel.grid = element_blank()) + ylim(-60,60)\n\nggarrange(p1, p2, p3, p4, nrow = 2, ncol = 2, common.legend = TRUE, legend = \"right\")\n\n\n\n\n\n\n\n\n\n\n\n5.5.2 Simple\nSpecify ~simple JAGS model: linear regression between regional water availability and low flow duration, where sigma is modeled as a function of regional water availability. No random effects for network.\n\n5.5.2.1 Specify and fit JAGS models\nThis is the form we used originally, pooling data across basins to estimate a common relationship. However, this is overly simplified, as it fails to account for basin-level groupings in the data\n\n\nCode\ncat(\"model {\n\n##--- LIKELIHOOD ---------------------------------------------------##\n\nfor (i in 1:nObs) {\n\n  D[i] ~ dnorm(mu[i], pow(sigma[i], -2))\n  mu[i] &lt;- alpha + beta * W[i]\n  log(sigma[i]) &lt;- sig.alpha + sig.beta * W[i]\n  \n  # Log-likelihood\n  loglik[i] &lt;- logdensity.norm(D[i], mu[i], pow(sigma[i], -2))\n  }\n\n\n##--- PRIORS --------------------------------------------------------##\n\nalpha ~ dnorm(0, pow(10, -2))\nbeta ~ dnorm(0, pow(10, -2))\nsig.alpha ~ dnorm(0, pow(10, -2))\nsig.beta ~ dnorm(0, pow(10, -2))\n\n\n##--- DERIVED VALUES ------------------------------------------------##\n\n# attenuation strength\nAS &lt;- exp(sig.alpha + sig.beta * 0) / exp(sig.alpha + sig.beta * 100)\n\n# prediction means\nfor (i in 1:nPreds) { P0m[i] &lt;- alpha + beta * Wp[i] }\n\n# prediction intervals\nfor (i in 1:nPreds) { P0i[i] ~ dnorm(alpha + beta * Wp[i], pow(exp(sig.alpha + sig.beta * Wp[i]), -2)) }\n\n# sigma means\nfor (i in 1:nPreds) { S0m[i] &lt;- exp(sig.alpha + sig.beta * Wp[i]) }\n\n}\", file = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/DroughtModel.txt\")\n\n\nFit model for each threshold, in a loop\n\n\nCode\nmodlist_simple &lt;- list()\nnpreds &lt;- 101\nthresh &lt;- c(50,45,40,35,30,25,20,15,10,5,2)\n\nfor (i in 1:11) {\n  names(joineddefdur)[57+i]\n  jags.data &lt;- list(\"nObs\" = dim(joineddefdur)[1], \n                    \"D\" = unlist(joineddefdur[,57+i]), \n                    \"W\" = joineddefdur$tyz_sum_perc,\n                    \"nPreds\" = npreds, \"Wp\" = seq(from = 0, to = 100, length.out = npreds))\n  jags.params &lt;- c(\"alpha\", \"beta\", \"sig.alpha\", \"sig.beta\", \"AS\", \"D\", \"P0m\", \"P0i\", \"S0m\", \"loglik\")\n  fit &lt;- jags(data = jags.data, parameters.to.save = jags.params,\n              model.file = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/DroughtModel.txt\",\n              n.chains = 3, n.thin = 10, n.burnin = 1000, n.iter = 6000, DIC = FALSE)\n  modlist_simple[[i]] &lt;- fit\n}\n\n\n\n\n5.5.2.2 Compare thresholds\nGet attenuation strength (sensu Chezik et al. 2017) for each model (low flow threshold, %) and summarize as median and 95% credible interval\n\n\nCode\nattenlist &lt;- list()\nsigbetalist &lt;- list()\nsigalphalist &lt;- list()\n\nfor (i in 1:length(modlist_simple)) { \n  attenlist[[i]] &lt;- modlist_simple[[i]]$BUGSoutput$sims.list$AS \n  sigbetalist[[i]] &lt;- modlist_simple[[i]]$BUGSoutput$sims.list$sig.beta \n  sigalphalist[[i]] &lt;- modlist_simple[[i]]$BUGSoutput$sims.list$sig.alpha \n}\n\nattentib &lt;- tibble(threshold = rep(thresh, each = 1500), attenuation = unlist(attenlist))\nsigbetatib &lt;- tibble(threshold = rep(thresh, each = 1500), sigbeta = unlist(sigbetalist))\nsigalphatib &lt;- tibble(threshold = rep(thresh, each = 1500), sigalpha = unlist(sigalphalist))\n\n\nPlot attenuation strength by low flow threshold\n\n\nCode\nattentib %&gt;% \n  group_by(threshold) %&gt;% \n  summarize(median = quantile(attenuation, probs = 0.50),\n            cilow = quantile(attenuation, probs = 0.025),\n            ciupp = quantile(attenuation, probs = 0.975)) %&gt;%\n  ungroup() %&gt;%\n  ggplot() +\n  geom_abline(intercept = 1, slope = 0, linetype = \"dashed\", color = \"grey50\") +\n  geom_errorbar(aes(x = threshold, ymin = cilow, ymax = ciupp), width = 1) +\n  geom_point(aes(x = threshold, y = median)) +\n  theme_bw() + theme(panel.grid = element_blank()) + ylim(0,12.5) +\n  xlab(\"Low flow threshold (%)\") + ylab(\"Attenuation strength\")\n\n\n\n\n\n\n\n\n\nCode\nsigbetatib %&gt;% \n  group_by(threshold) %&gt;% \n  summarize(median = quantile(sigbeta, probs = 0.50),\n            cilow = quantile(sigbeta, probs = 0.025),\n            ciupp = quantile(sigbeta, probs = 0.975)) %&gt;%\n  ungroup() %&gt;%\n  ggplot() +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\", color = \"grey50\") +\n  geom_errorbar(aes(x = threshold, ymin = cilow, ymax = ciupp), width = 1) +\n  geom_point(aes(x = threshold, y = median)) +\n  theme_bw() + theme(panel.grid = element_blank()) + ylim(-0.025,0.005) +\n  xlab(\"Low flow threshold (%)\") + ylab(\"sig.beta\")\n\n\n\n\n\n\n\n\n\nCode\nsigalphatib %&gt;% \n  group_by(threshold) %&gt;% \n  summarize(median = quantile(sigalpha, probs = 0.50),\n            cilow = quantile(sigalpha, probs = 0.025),\n            ciupp = quantile(sigalpha, probs = 0.975)) %&gt;%\n  ungroup() %&gt;%\n  ggplot() +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\", color = \"grey50\") +\n  geom_errorbar(aes(x = threshold, ymin = cilow, ymax = ciupp), width = 1) +\n  geom_point(aes(x = threshold, y = median)) +\n  theme_bw() + theme(panel.grid = element_blank()) + #ylim(-0.025,0.005) +\n  xlab(\"Low flow threshold (%)\") + ylab(\"sig.alpha\")\n\n\n\n\n\n\n\n\n\nSet top model based on strongest attenuation\n\n\nCode\ntop_mod &lt;- modlist_simple[[8]]\nmodelout &lt;- top_mod$BUGSoutput\nMcmcList &lt;- vector(\"list\", length = dim(modelout$sims.array)[2])\nfor(i in 1:length(McmcList)) { McmcList[[i]] = as.mcmc(modelout$sims.array[,i,]) }\nMcmcdat &lt;- rbind(McmcList[[1]], McmcList[[2]], McmcList[[3]])\n\n\nTraceplots\n\n\nCode\nMCMCtrace(top_mod, ind = TRUE, params = c(\"alpha\", \"beta\", \"sig.alpha\", \"sig.beta\", \"AS\"), pdf = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.5.2.3 Plot model output\nPlot data and prediction interval\n\n\nCode\n# summarize lower and upper prediction intervales (attenuation)\nd_preds &lt;- Mcmcdat[,grep(\"P0i\", colnames(Mcmcdat))]\npi_low &lt;- apply(d_preds, 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp &lt;- apply(d_preds, 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med &lt;- apply(Mcmcdat[,grep(\"P0m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.5),  na.rm = TRUE)\n\n# plot\nggplot() +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low, ymax = pi_upp), alpha = 0.3) +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med), size = 1, lineend = \"round\") +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\") +\n  geom_point(data = joineddefdur, aes(x = tyz_sum_perc, y = duration_15_fix_diff, fill = basin), \n             shape = 21, size = 2, position = position_jitter(seed = 1.3, width = 1)) +\n  scale_fill_manual(values = mycols) +\n  theme_bw() + theme(panel.grid = element_blank()) + #ylim(-60,60) +\n  xlab(\"Regional water availability (%)\") + ylab(\"Difference in low flow duration (days)\")\n\n\n\n\n\n\n\n\n\nPlot effect of water availability on sigma\n\n\nCode\n# summarize lower and upper prediction intervales (attenuation)\nd_preds &lt;- Mcmcdat[,grep(\"S0m\", colnames(Mcmcdat))]\npi_low &lt;- apply(d_preds, 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp &lt;- apply(d_preds, 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med &lt;- apply(d_preds, 2, quantile, probs = c(0.500),  na.rm = TRUE)\n\n# plot\nggplot() +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low, ymax = pi_upp), alpha = 0.3) +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med), size = 1, lineend = \"round\") +\n  scale_fill_manual(values = mycols) +\n  theme_bw() + theme(panel.grid = element_blank()) + ylim(0,35) +\n  xlab(\"Regional water availability (%)\") + ylab(\"Model standard deviation\")\n\n\n\n\n\n\n\n\n\n\n\n\n5.5.3 Random effects\nAdd basin-level random effect to the intercept and slope of the primary relationship. Random effects on the mean, but not the variance, strike a reasonable balance between accounting for basin-level differences, while not overstepping the limits of the data. Per discussion with Ben Augustine (USGS NOROCK/EESC), it is generally rare to put random effects on variances; not because it doesn’t work conceptually, but because variances require much more data to estimate well relative to means\n\n5.5.3.1 Specify and fit JAGS models\nSpecify model\n\n\nCode\ncat(\"model {\n\n##--- LIKELIHOOD ---------------------------------------------------##\n\nfor (i in 1:nObs) {\n\n  D[i] ~ dnorm(mu[i], pow(sigma[i], -2))\n  mu[i] &lt;- alpha[basins[i]] + beta[basins[i]] * W[i]\n  log(sigma[i]) &lt;- sig.alpha + sig.beta * W[i]\n  \n  # Log-likelihood\n  loglik[i] &lt;- logdensity.norm(D[i], mu[i], pow(sigma[i], -2))\n  }\n\n\n##--- RANDOM EFFECTS ------------------------------------------------##\n\nfor (j in numBasins) {\n    alpha[j] ~ dnorm(mu.alpha, pow(sigma.alpha, -2)) \n    beta[j] ~ dnorm(mu.beta, pow(sigma.beta, -2))\n}\n    \n\n##--- PRIORS --------------------------------------------------------##\n\nmu.alpha ~ dnorm(0, pow(10, -2))\nmu.beta ~ dnorm(0, pow(10, -2))\n\nsigma.alpha ~ dunif(0, 100)\nsigma.beta ~ dunif(0, 100)\n\nsig.alpha ~ dnorm(0, pow(10, -2))\nsig.beta ~ dnorm(0, pow(10, -2))\n\n\n##--- DERIVED VALUES ------------------------------------------------##\n\n# attenuation strength\nAS &lt;- exp(sig.alpha + sig.beta * 0) / exp(sig.alpha + sig.beta * 100)\n\n# prediction means\nfor (i in 1:nPreds) {\n    P0m[i] &lt;- mu.alpha + mu.beta * Wp[i]\n    P1m[i] &lt;- alpha[1] + beta[1] * Wp[i]\n    P3m[i] &lt;- alpha[3] + beta[3] * Wp[i]\n    P5m[i] &lt;- alpha[5] + beta[5] * Wp[i]\n    P6m[i] &lt;- alpha[6] + beta[6] * Wp[i]\n    P7m[i] &lt;- alpha[7] + beta[7] * Wp[i]\n    P8m[i] &lt;- alpha[8] + beta[8] * Wp[i]\n}\n\n# prediction intervals\nfor (i in 1:nPreds) {\n    P0i[i] ~ dnorm(mu.alpha + mu.beta * Wp[i], pow(exp(sig.alpha + sig.beta * Wp[i]), -2))\n    P1i[i] ~ dnorm(alpha[1] + beta[1] * Wp[i], pow(exp(sig.alpha + sig.beta * Wp[i]), -2))\n    P3i[i] ~ dnorm(alpha[3] + beta[3] * Wp[i], pow(exp(sig.alpha + sig.beta * Wp[i]), -2))\n    P5i[i] ~ dnorm(alpha[5] + beta[5] * Wp[i], pow(exp(sig.alpha + sig.beta * Wp[i]), -2))\n    P6i[i] ~ dnorm(alpha[6] + beta[6] * Wp[i], pow(exp(sig.alpha + sig.beta * Wp[i]), -2))\n    P7i[i] ~ dnorm(alpha[7] + beta[7] * Wp[i], pow(exp(sig.alpha + sig.beta * Wp[i]), -2))\n    P8i[i] ~ dnorm(alpha[8] + beta[8] * Wp[i], pow(exp(sig.alpha + sig.beta * Wp[i]), -2))\n}\n\n# sigma means\nfor (i in 1:nPreds) { S0m[i] &lt;- exp(sig.alpha + sig.beta * Wp[i]) }\n\n}\", file = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/DroughtModel_REmain.txt\")\n\n\nFit models in a loop:\n\n\nCode\nmodlist_remain &lt;- list()\nnpreds &lt;- 101\nthresh &lt;- c(50,45,40,35,30,25,20,15,10,5,2)\n\nfor (i in 1:11) {\n  names(joineddefdur)[57+i]\n  jags.data &lt;- list(\"nObs\" = dim(joineddefdur)[1], \n                    \"D\" = unlist(joineddefdur[,57+i]), \n                    \"W\" = joineddefdur$tyz_sum_perc,\n                    \"nPreds\" = npreds, \"Wp\" = seq(from = 0, to = 100, length.out = npreds),\n                    \"basins\" = joineddefdur$basin_num, \"numBasins\" = c(1,3,5,6,7,8))\n  jags.params &lt;- c(\"alpha\", \"beta\", \"mu.alpha\", \"sigma.alpha\", \"mu.beta\", \"sigma.beta\", \"sig.alpha\", \"sig.beta\", \"AS\", \"D\", \n                   \"P0m\", \"P1m\", \"P3m\", \"P5m\", \"P6m\", \"P7m\", \"P8m\", \n                   \"P0i\", \"P1i\", \"P3i\", \"P5i\", \"P6i\", \"P7i\", \"P8i\", \n                   \"S0m\", \"loglik\")\n  fit &lt;- jags(data = jags.data, parameters.to.save = jags.params,\n              model.file = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/DroughtModel_REmain.txt\",\n              n.chains = 3, n.thin = 20, n.burnin = 2000, n.iter = 17000, DIC = FALSE)\n  modlist_remain[[i]] &lt;- fit\n}\n\n\n\n\n5.5.3.2 Compare thresholds\nGet attenuation strength (sensu Chezik et al. 2017) for each model (low flow threshold, %) and summarize as median and 95% credible interval\n\n\nCode\nattenlist &lt;- list()\nsigbetalist &lt;- list()\nsigalphalist &lt;- list()\n\nfor (i in 1:length(modlist_remain)) { \n  attenlist[[i]] &lt;- modlist_remain[[i]]$BUGSoutput$sims.list$AS \n  sigbetalist[[i]] &lt;- modlist_remain[[i]]$BUGSoutput$sims.list$sig.beta \n  sigalphalist[[i]] &lt;- modlist_remain[[i]]$BUGSoutput$sims.list$sig.alpha \n}\n\nattentib &lt;- tibble(threshold = rep(thresh, each = 2250), attenuation = unlist(attenlist))\nsigbetatib &lt;- tibble(threshold = rep(thresh, each = 2250), sigbeta = unlist(sigbetalist))\nsigalphatib &lt;- tibble(threshold = rep(thresh, each = 2250), sigalpha = unlist(sigalphalist))\n\n\nPlot attenuation strength by low flow threshold\n\n\nCode\nattentib %&gt;% \n  group_by(threshold) %&gt;% \n  summarize(median = quantile(attenuation, probs = 0.50),\n            cilow = quantile(attenuation, probs = 0.025),\n            ciupp = quantile(attenuation, probs = 0.975)) %&gt;%\n  ungroup() %&gt;%\n  ggplot() +\n  geom_abline(intercept = 1, slope = 0, linetype = \"dashed\", color = \"grey50\") +\n  geom_errorbar(aes(x = threshold, ymin = cilow, ymax = ciupp), width = 1) +\n  geom_point(aes(x = threshold, y = median)) +\n  theme_bw() + theme(panel.grid = element_blank()) + #ylim(0,12) +\n  xlab(\"Low flow threshold (%)\") + ylab(\"Attenuation strength\")\n\n\n\n\n\n\n\n\n\nCode\nsigbetatib %&gt;% \n  group_by(threshold) %&gt;% \n  summarize(median = quantile(sigbeta, probs = 0.50),\n            cilow = quantile(sigbeta, probs = 0.025),\n            ciupp = quantile(sigbeta, probs = 0.975)) %&gt;%\n  ungroup() %&gt;%\n  ggplot() +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\", color = \"grey50\") +\n  geom_errorbar(aes(x = threshold, ymin = cilow, ymax = ciupp), width = 1) +\n  geom_point(aes(x = threshold, y = median)) +\n  theme_bw() + theme(panel.grid = element_blank()) + #ylim(-0.025,0.005) +\n  xlab(\"Low flow threshold (%)\") + ylab(\"sig.beta\")\n\n\n\n\n\n\n\n\n\nCode\nsigalphatib %&gt;% \n  group_by(threshold) %&gt;% \n  summarize(median = quantile(sigalpha, probs = 0.50),\n            cilow = quantile(sigalpha, probs = 0.025),\n            ciupp = quantile(sigalpha, probs = 0.975)) %&gt;%\n  ungroup() %&gt;%\n  ggplot() +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\", color = \"grey50\") +\n  geom_errorbar(aes(x = threshold, ymin = cilow, ymax = ciupp), width = 1) +\n  geom_point(aes(x = threshold, y = median)) +\n  theme_bw() + theme(panel.grid = element_blank()) + #ylim(-0.025,0.005) +\n  xlab(\"Low flow threshold (%)\") + ylab(\"sig.alpha\")\n\n\n\n\n\n\n\n\n\nSet top model based on strongest attenuation\n\n\nCode\ntop_mod &lt;- modlist_remain[[8]]\nmodelout &lt;- top_mod$BUGSoutput\nMcmcList &lt;- vector(\"list\", length = dim(modelout$sims.array)[2])\nfor(i in 1:length(McmcList)) { McmcList[[i]] = as.mcmc(modelout$sims.array[,i,]) }\nMcmcdat &lt;- rbind(McmcList[[1]], McmcList[[2]], McmcList[[3]])\n\n\nTraceplots\n\n\nCode\nMCMCtrace(top_mod, ind = TRUE, params = c(\"alpha\", \"beta\", \"mu.alpha\", \"mu.beta\", \"sig.alpha\", \"sig.beta\", \"AS\"), pdf = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.5.3.3 Plot model output\nPlot data and global prediction interval\n\n\nCode\n# summarize lower and upper prediction intervales (attenuation)\nd_preds &lt;- Mcmcdat[,grep(\"P0i\", colnames(Mcmcdat))]\npi_low &lt;- apply(d_preds, 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp &lt;- apply(d_preds, 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med &lt;- apply(Mcmcdat[,grep(\"P0m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.5),  na.rm = TRUE)\n\n# plot\nggplot() +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low, ymax = pi_upp), alpha = 0.3) +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med), size = 1, lineend = \"round\") +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\") +\n  geom_point(data = joineddefdur, aes(x = tyz_sum_perc, y = duration_15_fix_diff, fill = basin), \n             shape = 21, size = 2, position = position_jitter(seed = 1.3, width = 1)) +\n  scale_fill_manual(values = mycols) +\n  theme_bw() + theme(panel.grid = element_blank()) + #ylim(-60,60) +\n  xlab(\"Regional water availability (%)\") + ylab(\"Difference in low flow duration (days)\")\n\n\n\n\n\n\n\n\n\nAlternatively, plot the global regression and credible interval\n\n\nCode\n# summarize lower and upper prediction intervales (attenuation)\npi_low &lt;- apply(Mcmcdat[,grep(\"P0m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp &lt;- apply(Mcmcdat[,grep(\"P0m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med &lt;- apply(Mcmcdat[,grep(\"P0m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.5),  na.rm = TRUE)\n\n# plot\nggplot() +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low, ymax = pi_upp), alpha = 0.3) +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med), size = 1, lineend = \"round\") +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\") +\n  geom_point(data = joineddefdur, aes(x = tyz_sum_perc, y = duration_15_fix_diff, fill = basin), \n             shape = 21, size = 2, position = position_jitter(seed = 1.3, width = 1)) +\n  scale_fill_manual(values = mycols) +\n  theme_bw() + theme(panel.grid = element_blank()) + #ylim(-60,60) +\n  xlab(\"Regional water availability (%)\") + ylab(\"Difference in low flow duration (days)\")\n\n\n\n\n\n\n\n\n\nAlternatively, plot the basin-specific regressions and credible intervals\n\n\nCode\n# summarize lower and upper prediction intervales (attenuation)\npi_low1 &lt;- apply(Mcmcdat[,grep(\"P1m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp1 &lt;- apply(Mcmcdat[,grep(\"P1m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med1 &lt;- apply(Mcmcdat[,grep(\"P1m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.5),  na.rm = TRUE)\n# summarize lower and upper prediction intervales (attenuation)\npi_low3 &lt;- apply(Mcmcdat[,grep(\"P3m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp3 &lt;- apply(Mcmcdat[,grep(\"P3m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med3 &lt;- apply(Mcmcdat[,grep(\"P3m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.5),  na.rm = TRUE)\n# summarize lower and upper prediction intervales (attenuation)\npi_low5 &lt;- apply(Mcmcdat[,grep(\"P5m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp5 &lt;- apply(Mcmcdat[,grep(\"P5m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med5 &lt;- apply(Mcmcdat[,grep(\"P5m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.5),  na.rm = TRUE)\n# summarize lower and upper prediction intervales (attenuation)\npi_low6 &lt;- apply(Mcmcdat[,grep(\"P6m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp6 &lt;- apply(Mcmcdat[,grep(\"P6m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med6 &lt;- apply(Mcmcdat[,grep(\"P6m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.5),  na.rm = TRUE)\n# summarize lower and upper prediction intervales (attenuation)\npi_low7 &lt;- apply(Mcmcdat[,grep(\"P7m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp7 &lt;- apply(Mcmcdat[,grep(\"P7m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med7 &lt;- apply(Mcmcdat[,grep(\"P7m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.5),  na.rm = TRUE)\n# summarize lower and upper prediction intervales (attenuation)\npi_low8 &lt;- apply(Mcmcdat[,grep(\"P8m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp8 &lt;- apply(Mcmcdat[,grep(\"P8m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med8 &lt;- apply(Mcmcdat[,grep(\"P8m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.5),  na.rm = TRUE)\n\nggplot() +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low1, ymax = pi_upp1), alpha = 0.3, fill = mycols[1]) +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low3, ymax = pi_upp3), alpha = 0.3, fill = mycols[2]) +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low5, ymax = pi_upp5), alpha = 0.3, fill = mycols[3]) +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low6, ymax = pi_upp6), alpha = 0.3, fill = mycols[4]) +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low7, ymax = pi_upp7), alpha = 0.3, fill = mycols[5]) +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low8, ymax = pi_upp8), alpha = 0.3, fill = mycols[6]) +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med1), color = mycols[1], size = 1.3, lineend = \"round\") +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med3), color = mycols[2], size = 1.3, lineend = \"round\") +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med5), color = mycols[3], size = 1.3, lineend = \"round\") +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med6), color = mycols[4], size = 1.3, lineend = \"round\") +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med7), color = mycols[5], size = 1.3, lineend = \"round\") +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med8), color = mycols[6], size = 1.3, lineend = \"round\") +\n  # geom_smooth(aes(x = seq(from = 0, to = 100, by = 1), y = pi_low), color = \"black\", size = 1.5) +\n  # geom_smooth(aes(x = seq(from = 0, to = 100, by = 1), y = pi_upp), color = \"black\", size = 1.5) +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\") +\n  geom_point(data = joineddefdur, aes(x = tyz_sum_perc, y = duration_20_fix_diff, fill = basin), \n             shape = 21, size = 2, position = position_jitter(seed = 1, width = 1)) +\n  scale_fill_manual(values = mycols) +\n  theme_bw() + theme(panel.grid = element_blank()) + #ylim(-60,60) +\n  xlab(\"Regional water availability (%)\") + ylab(\"Difference in low flow duration (days)\")\n\n\n\n\n\n\n\n\n\nPlot data and basin-specific prediction interval\n\n\nCode\n# summarize lower and upper prediction intervales (attenuation)\nd_preds &lt;- Mcmcdat[,grep(\"P1i\", colnames(Mcmcdat))]\npi_low1 &lt;- apply(d_preds, 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp1 &lt;- apply(d_preds, 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med1 &lt;- apply(Mcmcdat[,grep(\"P1m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.5),  na.rm = TRUE)\n# summarize lower and upper prediction intervales (attenuation)\nd_preds &lt;- Mcmcdat[,grep(\"P3i\", colnames(Mcmcdat))]\npi_low3 &lt;- apply(d_preds, 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp3 &lt;- apply(d_preds, 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med3 &lt;- apply(Mcmcdat[,grep(\"P3m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.5),  na.rm = TRUE)\n# summarize lower and upper prediction intervales (attenuation)\nd_preds &lt;- Mcmcdat[,grep(\"P5i\", colnames(Mcmcdat))]\npi_low5 &lt;- apply(d_preds, 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp5 &lt;- apply(d_preds, 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med5 &lt;- apply(Mcmcdat[,grep(\"P5m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.5),  na.rm = TRUE)\n# summarize lower and upper prediction intervales (attenuation)\nd_preds &lt;- Mcmcdat[,grep(\"P6i\", colnames(Mcmcdat))]\npi_low6 &lt;- apply(d_preds, 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp6 &lt;- apply(d_preds, 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med6 &lt;- apply(Mcmcdat[,grep(\"P6m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.5),  na.rm = TRUE)\n# summarize lower and upper prediction intervales (attenuation)\nd_preds &lt;- Mcmcdat[,grep(\"P7i\", colnames(Mcmcdat))]\npi_low7 &lt;- apply(d_preds, 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp7 &lt;- apply(d_preds, 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med7 &lt;- apply(Mcmcdat[,grep(\"P7m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.5),  na.rm = TRUE)\n# summarize lower and upper prediction intervales (attenuation)\nd_preds &lt;- Mcmcdat[,grep(\"P8i\", colnames(Mcmcdat))]\npi_low8 &lt;- apply(d_preds, 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp8 &lt;- apply(d_preds, 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med8 &lt;- apply(Mcmcdat[,grep(\"P8m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.5),  na.rm = TRUE)\n\n\n\nCombinedWest BrookStauntonFlatheadYellowstoneSnakeDonner-Blitzen\n\n\n\n\nCode\nggplot() +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low1, ymax = pi_upp1), alpha = 0.3, fill = mycols[1]) +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low3, ymax = pi_upp3), alpha = 0.3, fill = mycols[2]) +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low5, ymax = pi_upp5), alpha = 0.3, fill = mycols[3]) +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low6, ymax = pi_upp6), alpha = 0.3, fill = mycols[4]) +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low7, ymax = pi_upp7), alpha = 0.3, fill = mycols[5]) +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low8, ymax = pi_upp8), alpha = 0.3, fill = mycols[6]) +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med1), color = mycols[1], size = 1.3) +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med3), color = mycols[2], size = 1.3) +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med5), color = mycols[3], size = 1.3) +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med6), color = mycols[4], size = 1.3) +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med7), color = mycols[5], size = 1.3) +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med8), color = mycols[6], size = 1.3) +\n  # geom_smooth(aes(x = seq(from = 0, to = 100, by = 1), y = pi_low), color = \"black\", size = 1.5) +\n  # geom_smooth(aes(x = seq(from = 0, to = 100, by = 1), y = pi_upp), color = \"black\", size = 1.5) +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\") +\n  geom_point(data = joineddefdur, aes(x = tyz_sum_perc, y = duration_20_fix_diff, fill = basin), \n             shape = 21, size = 2, position = position_jitter(seed = 1, width = 1)) +\n  scale_fill_manual(values = mycols) +\n  theme_bw() + theme(panel.grid = element_blank()) + #ylim(-60,60) +\n  xlab(\"Regional water availability (%)\") + ylab(\"Difference in low flow duration (days)\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot() +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low1, ymax = pi_upp1), alpha = 0.3, fill = mycols[1]) +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med1), color = mycols[1], size = 1.3) +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\") +\n  geom_point(data = joineddefdur %&gt;% filter(basin_num == 1), aes(x = tyz_sum_perc, y = duration_15_fix_diff), \n             shape = 21, size = 2, position = position_jitter(seed = 1, width = 1), fill = mycols[1]) +\n  theme_bw() + theme(panel.grid = element_blank()) + #ylim(-60,60) +\n  xlab(\"Regional water availability (%)\") + ylab(\"Difference in low flow duration (days)\") + ggtitle(\"West Brook\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot() +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low3, ymax = pi_upp3), alpha = 0.3, fill = mycols[2]) +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med3), color = mycols[2], size = 1.3) +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\") +\n  geom_point(data = joineddefdur %&gt;% filter(basin_num == 3), aes(x = tyz_sum_perc, y = duration_15_fix_diff), \n             shape = 21, size = 2, position = position_jitter(seed = 1, width = 1), fill = mycols[2]) +\n  theme_bw() + theme(panel.grid = element_blank()) + #ylim(-60,60) +\n  xlab(\"Regional water availability (%)\") + ylab(\"Difference in low flow duration (days)\") + ggtitle(\"Staunton\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot() +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low5, ymax = pi_upp5), alpha = 0.3, fill = mycols[3]) +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med5), color = mycols[3], size = 1.3) +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\") +\n  geom_point(data = joineddefdur %&gt;% filter(basin_num == 5), aes(x = tyz_sum_perc, y = duration_15_fix_diff), \n             shape = 21, size = 2, position = position_jitter(seed = 1, width = 1), fill = mycols[3]) +\n  theme_bw() + theme(panel.grid = element_blank()) + #ylim(-60,60) +\n  xlab(\"Regional water availability (%)\") + ylab(\"Difference in low flow duration (days)\") + ggtitle(\"Flathead\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot() +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low6, ymax = pi_upp6), alpha = 0.3, fill = mycols[4]) +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med6), color = mycols[4], size = 1.3) +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\") +\n  geom_point(data = joineddefdur %&gt;% filter(basin_num == 6), aes(x = tyz_sum_perc, y = duration_15_fix_diff), \n             shape = 21, size = 2, position = position_jitter(seed = 1, width = 1), fill = mycols[4]) +\n  theme_bw() + theme(panel.grid = element_blank()) + #ylim(-60,60) +\n  xlab(\"Regional water availability (%)\") + ylab(\"Difference in low flow duration (days)\") + ggtitle(\"Yellowstone\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot() +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low7, ymax = pi_upp7), alpha = 0.3, fill = mycols[5]) +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med7), color = mycols[5], size = 1.3) +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\") +\n  geom_point(data = joineddefdur %&gt;% filter(basin_num == 7), aes(x = tyz_sum_perc, y = duration_15_fix_diff), \n             shape = 21, size = 2, position = position_jitter(seed = 1, width = 1), fill = mycols[5]) +\n  theme_bw() + theme(panel.grid = element_blank()) + #ylim(-60,60) +\n  xlab(\"Regional water availability (%)\") + ylab(\"Difference in low flow duration (days)\") + ggtitle(\"Snake\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot() +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low8, ymax = pi_upp8), alpha = 0.3, fill = mycols[6]) +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med8), color = mycols[6], size = 1.3) +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\") +\n  geom_point(data = joineddefdur %&gt;% filter(basin_num == 8), aes(x = tyz_sum_perc, y = duration_15_fix_diff), \n             shape = 21, size = 2, position = position_jitter(seed = 1, width = 1), fill = mycols[6]) +\n  theme_bw() + theme(panel.grid = element_blank()) + #ylim(-60,60) +\n  xlab(\"Regional water availability (%)\") + ylab(\"Difference in low flow duration (days)\") + ggtitle(\"Snake\")\n\n\n\n\n\n\n\n\n\n\n\n\nPlot effect of water availability on sigma\n\n\nCode\n# summarize lower and upper prediction intervales (attenuation)\nd_preds &lt;- Mcmcdat[,grep(\"S0m\", colnames(Mcmcdat))]\npi_low &lt;- apply(d_preds, 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp &lt;- apply(d_preds, 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med &lt;- apply(d_preds, 2, quantile, probs = c(0.500),  na.rm = TRUE)\n\n# plot\nggplot() +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low, ymax = pi_upp), alpha = 0.3) +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med), size = 1, lineend = \"round\") +\n  scale_fill_manual(values = mycols) +\n  theme_bw() + theme(panel.grid = element_blank()) + ylim(0,max(pi_upp)) +\n  xlab(\"Regional water availability (%)\") + ylab(\"Model standard deviation\")\n\n\n\n\n\n\n\n\n\n\n\n5.5.3.4 Paper figure\n\n\nCode\n# site-level drought threshold\nbas &lt;- \"West Brook\"\nmonths &lt;- c(7:9)\nbigG &lt;- \"South River Conway NWIS\"\n\ndd_wet &lt;- dat_clean_sub %&gt;% filter(basin == bas, month %in% months, WaterYear == 2021) %&gt;% mutate(site_name = factor(site_name, levels = rev(c(bigG, wborder))))\ndd_dry &lt;- dat_clean_sub %&gt;% filter(basin == bas, month %in% months, WaterYear == 2020) %&gt;% mutate(site_name = factor(site_name, levels = rev(c(bigG, wborder))))\n\nmysites &lt;- unlist(unique(dd_wet$site_name))\n# dd &lt;- dd %&gt;% filter(site_name %in% mysites)\n\n# DROUGHT HYDROGRAPHS\nhydroplot_dry &lt;- ggplot() +\n  geom_line(data = dd_dry, aes(x = date, y = logYield, group = site_name), color = \"grey50\") +\n  geom_point(data = dd_dry, aes(x = date, y = logYield, group = site_name, color = drought_fix), size = 0.75) +\n  geom_line(data = dd_dry %&gt;% filter(site_name == \"South River Conway NWIS\"), \n            aes(x = date, y = logYield, group = site_name), color = \"black\") +\n  geom_point(data = dd_dry %&gt;% filter(site_name == \"South River Conway NWIS\"), \n             aes(x = date, y = logYield, group = site_name, fill = drought_fix), shape = 21, size = 1.5) +\n  scale_color_viridis(option = \"A\", direction = -1, discrete = TRUE, limits = mydroughtlevels) +\n  scale_fill_viridis(option = \"A\", direction = -1, discrete = TRUE, limits = mydroughtlevels) +\n  xlab(\"Date\") + ylab(expression(paste(\"log(Specific discharge, mm day\"^-1,\")\", sep = \"\"))) +\n  theme_bw() + theme(panel.grid = element_blank(), axis.text = element_text(color = \"black\"), \n                     legend.position = \"none\", panel.background = element_rect(fill = 'grey80')) +\n  ylim(min(dd_dry$logYield), max(dd_wet$logYield))\n\nhydroplot_wet &lt;- ggplot() +\n  geom_line(data = dd_wet, aes(x = date, y = logYield, group = site_name), color = \"grey50\") +\n  geom_point(data = dd_wet, aes(x = date, y = logYield, group = site_name, color = drought_fix), size = 0.75) +\n  geom_line(data = dd_wet %&gt;% filter(site_name == \"South River Conway NWIS\"), \n            aes(x = date, y = logYield, group = site_name), color = \"black\") +\n  geom_point(data = dd_wet %&gt;% filter(site_name == \"South River Conway NWIS\"), \n             aes(x = date, y = logYield, group = site_name, fill = drought_fix), shape = 21, size = 1.5) +\n  scale_color_viridis(option = \"A\", direction = -1, discrete = TRUE, limits = mydroughtlevels) +\n  scale_fill_viridis(option = \"A\", direction = -1, discrete = TRUE, limits = mydroughtlevels) +\n  xlab(\"Date\") + ylab(expression(paste(\"log(Specific discharge, mm day\"^-1,\")\", sep = \"\"))) +\n  theme_bw() + theme(panel.grid = element_blank(), axis.text = element_text(color = \"black\"), \n                     legend.position = \"none\", panel.background = element_rect(fill = 'grey80')) +\n  ylim(min(dd_dry$logYield), max(dd_wet$logYield))\n\n# HEAT MAPS\nheat1 &lt;- dd_dry %&gt;%\n  ggplot() +\n  geom_tile(aes(x = date, y = site_name, fill = drought_fix)) +\n  scale_fill_viridis(option = \"A\", direction = -1, discrete = TRUE, limits = mydroughtlevels) +\n  xlab(\"Date\") + ylab(\"Site\") +\n  theme_bw() + theme(axis.title.y = element_blank(), panel.background = element_rect(fill = 'grey90'),\n                     panel.grid.major = element_blank(), panel.grid.minor = element_blank(), \n                     axis.text = element_text(color = \"black\"), legend.position = \"none\") +\n  geom_line(data = data.frame(x = c(min(dd_dry$date)-days(10), max(dd_dry$date)+days(10)), \n                              y = rep(2:length(mysites), each = 2)-0.5), \n            aes(x = x, y = y, group = y), color = \"grey70\") +\n  coord_cartesian(xlim = c(min(dd_dry$date), max(dd_dry$date))) +\n  scale_y_discrete(expand = c(0,0), labels = rev(c(\"Ref.\", 1:8))) + \n  scale_x_date(expand = c(0,0), breaks = as.Date(c(\"2020-07-01\", \"2020-08-01\", \"2020-09-01\", \"2020-09-30\")), \n               labels = c(\"Jul\", \"Aug\", \"Sep\", \"Oct\")) +\n  guides(fill = guide_legend(title = \"Drought\\nthreshold (%)\"))\n\nheat2 &lt;- dd_wet %&gt;%\n  ggplot() +\n  geom_tile(aes(x = date, y = site_name, fill = drought_fix)) +\n  scale_fill_viridis(option = \"A\", direction = -1, discrete = TRUE, limits = mydroughtlevels) +\n  xlab(\"Date\") + ylab(\"Site\") +\n  theme_bw() + theme(axis.title.y = element_blank(), panel.background = element_rect(fill = 'grey90'),\n                     panel.grid.major = element_blank(), panel.grid.minor = element_blank(),\n                     axis.text = element_text(color = \"black\"), legend.position = \"none\") +\n  geom_line(data = data.frame(x = c(min(dd_wet$date)-days(10), max(dd_wet$date)+days(10)), \n                              y = rep(2:length(mysites), each = 2)-0.5), \n            aes(x = x, y = y, group = y), color = \"grey70\") +\n  coord_cartesian(xlim = c(min(dd_wet$date), max(dd_wet$date))) +\n  scale_y_discrete(expand = c(0,0), labels = rev(c(\"Ref.\", 1:8))) + \n  scale_x_date(expand = c(0,0), breaks = as.Date(c(\"2021-07-01\", \"2021-08-01\", \"2021-09-01\", \"2021-09-30\")), \n               labels = c(\"Jul\", \"Aug\", \"Sep\", \"Oct\")) +\n  guides(fill = guide_legend(title = \"Drought\\nthreshold (%)\"))\n\n\n# Data plot\n# summarize lower and upper prediction intervales (attenuation)\npi_low0 &lt;- apply(Mcmcdat[,grep(\"P0m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp0 &lt;- apply(Mcmcdat[,grep(\"P0m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med0 &lt;- apply(Mcmcdat[,grep(\"P0m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.5),  na.rm = TRUE)\n# summarize lower and upper prediction intervales (attenuation)\npi_low1 &lt;- apply(Mcmcdat[,grep(\"P1m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp1 &lt;- apply(Mcmcdat[,grep(\"P1m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med1 &lt;- apply(Mcmcdat[,grep(\"P1m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.5),  na.rm = TRUE)\n# summarize lower and upper prediction intervales (attenuation)\npi_low3 &lt;- apply(Mcmcdat[,grep(\"P3m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp3 &lt;- apply(Mcmcdat[,grep(\"P3m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med3 &lt;- apply(Mcmcdat[,grep(\"P3m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.5),  na.rm = TRUE)\n# summarize lower and upper prediction intervales (attenuation)\npi_low5 &lt;- apply(Mcmcdat[,grep(\"P5m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp5 &lt;- apply(Mcmcdat[,grep(\"P5m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med5 &lt;- apply(Mcmcdat[,grep(\"P5m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.5),  na.rm = TRUE)\n# summarize lower and upper prediction intervales (attenuation)\npi_low6 &lt;- apply(Mcmcdat[,grep(\"P6m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp6 &lt;- apply(Mcmcdat[,grep(\"P6m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med6 &lt;- apply(Mcmcdat[,grep(\"P6m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.5),  na.rm = TRUE)\n# summarize lower and upper prediction intervales (attenuation)\npi_low7 &lt;- apply(Mcmcdat[,grep(\"P7m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp7 &lt;- apply(Mcmcdat[,grep(\"P7m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med7 &lt;- apply(Mcmcdat[,grep(\"P7m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.5),  na.rm = TRUE)\n# summarize lower and upper prediction intervales (attenuation)\npi_low8 &lt;- apply(Mcmcdat[,grep(\"P8m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp8 &lt;- apply(Mcmcdat[,grep(\"P8m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med8 &lt;- apply(Mcmcdat[,grep(\"P8m\", colnames(Mcmcdat))], 2, quantile, probs = c(0.5),  na.rm = TRUE)\n\nscatter_basinwithcis &lt;- ggplot() +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low1, ymax = pi_upp1), alpha = 0.3, fill = mycols[1]) +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low3, ymax = pi_upp3), alpha = 0.3, fill = mycols[2]) +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low5, ymax = pi_upp5), alpha = 0.3, fill = mycols[3]) +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low6, ymax = pi_upp6), alpha = 0.3, fill = mycols[4]) +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low7, ymax = pi_upp7), alpha = 0.3, fill = mycols[5]) +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low8, ymax = pi_upp8), alpha = 0.3, fill = mycols[6]) +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med1), color = mycols[1], size = 1.3, lineend = \"round\") +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med3), color = mycols[2], size = 1.3, lineend = \"round\") +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med5), color = mycols[3], size = 1.3, lineend = \"round\") +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med6), color = mycols[4], size = 1.3, lineend = \"round\") +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med7), color = mycols[5], size = 1.3, lineend = \"round\") +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med8), color = mycols[6], size = 1.3, lineend = \"round\") +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\") +\n  geom_point(data = joineddefdur, aes(x = tyz_sum_perc, y = duration_20_fix_diff, fill = basin), \n             shape = 21, size = 2, position = position_jitter(seed = 1, width = 1)) +\n  scale_fill_manual(values = mycols) +\n  theme_bw() + theme(panel.grid = element_blank(), legend.position = \"none\", axis.text = element_text(color = \"black\")) + #ylim(-60,60) +\n  xlab(\"Water availability (percentile)\") + ylab(\"Difference in low flow duration (days)\")\n\nscatter_basinnocis &lt;- ggplot() +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med1), color = mycols[1], size = 1.3, lineend = \"round\") +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med3), color = mycols[2], size = 1.3, lineend = \"round\") +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med5), color = mycols[3], size = 1.3, lineend = \"round\") +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med6), color = mycols[4], size = 1.3, lineend = \"round\") +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med7), color = mycols[5], size = 1.3, lineend = \"round\") +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med8), color = mycols[6], size = 1.3, lineend = \"round\") +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\") +\n  geom_point(data = joineddefdur, aes(x = tyz_sum_perc, y = duration_20_fix_diff, fill = basin), \n             shape = 21, size = 2, position = position_jitter(seed = 1, width = 1)) +\n  scale_fill_manual(values = mycols) +\n  theme_bw() + theme(panel.grid = element_blank(), legend.position = \"none\", axis.text = element_text(color = \"black\")) + #ylim(-60,60) +\n  xlab(\"Water availability (percentile)\") + ylab(\"Difference in low flow duration (days)\")\n\nscatter_global &lt;- ggplot() +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low0, ymax = pi_upp0), alpha = 0.3) +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med0), color = \"black\", size = 1.3, lineend = \"round\") +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\") +\n  geom_point(data = joineddefdur, aes(x = tyz_sum_perc, y = duration_20_fix_diff, fill = basin), \n             shape = 21, size = 2, position = position_jitter(seed = 1, width = 1)) +\n  scale_fill_manual(values = mycols) +\n  theme_bw() + theme(panel.grid = element_blank(), legend.position = \"none\", axis.text = element_text(color = \"black\")) + #ylim(-60,60) +\n  xlab(\"Water availability (percentile)\") + ylab(\"Difference in low flow duration (days)\")\n    \n    \n\n# Sigma\nd_preds &lt;- Mcmcdat[,grep(\"S0m\", colnames(Mcmcdat))]\npi_low &lt;- apply(d_preds, 2, quantile, probs = c(0.025),  na.rm = TRUE)\npi_upp &lt;- apply(d_preds, 2, quantile, probs = c(0.975),  na.rm = TRUE)\npi_med &lt;- apply(d_preds, 2, quantile, probs = c(0.500),  na.rm = TRUE)\nsigmaplot &lt;- ggplot() +\n  geom_ribbon(aes(x = seq(from = 0, to = 100, by = 1), ymin = pi_low, ymax = pi_upp), alpha = 0.3) +\n  geom_line(aes(x = seq(from = 0, to = 100, by = 1), y = pi_med), size = 1, lineend = \"round\") +\n  scale_fill_manual(values = mycols) +\n  theme_bw() + theme(panel.grid = element_blank(), axis.text = element_text(color = \"black\")) + ylim(0,max(pi_upp)) +\n  xlab(\"Water availability (percentile)\") + ylab(expression(paste(\"Model standard deviation (\", sigma, \")\")))\n\n\n# Attenuation strength\nattentib_sum &lt;- attentib %&gt;% \n  group_by(threshold) %&gt;% \n  summarize(median = quantile(attenuation, probs = 0.50),\n            cilow = quantile(attenuation, probs = 0.025),\n            ciupp = quantile(attenuation, probs = 0.975)) %&gt;%\n  ungroup()\neffectplot &lt;- attentib_sum %&gt;%\n  ggplot() +\n  geom_abline(intercept = 1, slope = 0, linetype = \"dashed\", color = \"grey50\") +\n  geom_errorbar(aes(x = threshold, ymin = cilow, ymax = ciupp), width = 1) +\n  geom_point(aes(x = threshold, y = median), shape = 21, fill = \"white\", size = 2) +\n  geom_point(data = attentib_sum %&gt;% filter(threshold == 15), aes(x = threshold, y = median), size = 2) +\n  theme_bw() + theme(panel.grid = element_blank(), axis.text = element_text(color = \"black\")) + ylim(0,12) +\n  xlab(\"Critical flow threshold (percentile)\") + ylab(\"Attenuation strength\")\n\n\negg::ggarrange(heat1, heat2, ggplot() + theme_void(), \n               scatter_basinnocis, sigmaplot, effectplot, nrow = 2, ncol = 3)\n\n\n\n\n\n\n\n\n\nCode\n# jpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/DroughtDuration_sitelevel_WestBrook_2020-2021_updateGlobal.jpg\", width = 6.5, height = 9, units = \"in\", res = 1000)\n# egg::ggarrange(heat1, scatter_global, heat2, sigmaplot, ggplot() + theme_void(), effectplot, nrow = 3, ncol = 2)\n# dev.off()\n# \n# jpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/DroughtDuration_sitelevel_WestBrook_2020-2021_updatebasin.jpg\", width = 6.5, height = 9, units = \"in\", res = 1000)\n# egg::ggarrange(heat1, scatter_basinwithcis, heat2, sigmaplot, ggplot() + theme_void(), effectplot, nrow = 3, ncol = 2)\n# dev.off()\n# \n# jpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/DroughtDuration_sitelevel_WestBrook_2020-2021_updatebasinnoci_wide.jpg\", width = 8.75, height = 5.5, units = \"in\", res = 1000)\n# egg::ggarrange(heat1, heat2, ggplot() + theme_void(), \n#                scatter_basinnocis, sigmaplot, effectplot, nrow = 2, ncol = 3)\n# dev.off()\n# \n# jpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/DroughtDuration_sitelevel_WestBrook_2020-2021_updatebasinnoci_wide_withHydro.jpg\", width = 8.75, height = 5.5, units = \"in\", res = 1000)\n# egg::ggarrange(hydroplot, heat1, heat2, \n#                scatter_basinnocis, sigmaplot, effectplot, nrow = 2, ncol = 3)\n# dev.off()\n# \n# \n# jpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/DroughtDuration_sitelevel_WestBrook_2020-2021_HydroAndHeat.jpg\", width = 5.5, height = 5.5, units = \"in\", res = 1000)\n# egg::ggarrange(hydroplot_dry + theme(axis.title.x = element_blank()), \n#                hydroplot_wet + theme(axis.title.x = element_blank(), axis.title.y = element_blank()), \n#                heat1, heat2, nrow = 2, ncol = 2)\n# dev.off()",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Low Flow Variation</span>"
    ]
  },
  {
    "objectID": "ModeledQ_StreamStats.html",
    "href": "ModeledQ_StreamStats.html",
    "title": "6  Modeled Flow",
    "section": "",
    "text": "6.1 Data\nPurpose: Quantify the suitability of existing modeling techniques (USGS StreamStats) for predicting streamflow in headwater systems.\nSite information\nCode\nsiteinfo &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_SiteInformation.csv\")\nsiteinfo_sp &lt;- st_as_sf(siteinfo, coords = c(\"long\", \"lat\"), crs = 4326)\nLittle g’s\nCode\ndat_clean &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/LittleG_data_clean.csv\")\nBig G’s\nCode\ndat_clean_big &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/BigG_data_clean.csv\")\nClimate\nCode\nclimdf &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/Daymet_climate.csv\")\nclimdf_summ &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/Daymet_climate_summary.csv\")\nWater availability\nCode\nwateravail &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/BigG_wateravailability_annual.csv\")\nOrder sites: for colors, order sites from downstream to upstream (roughly) and by subbasin (if appropriate)\nCode\nwborder &lt;- c(\"West Brook NWIS\", \"West Brook Lower\", \"Mitchell Brook\", \"Jimmy Brook\", \"Obear Brook Lower\", \"West Brook Upper\", \"West Brook Reservoir\", \"Sanderson Brook\", \"Avery Brook\", \"West Whately Brook\")\npaineorder &lt;- c(\"Paine Run 10\", \"Paine Run 08\", \"Paine Run 07\", \"Paine Run 06\", \"Paine Run 02\", \"Paine Run 01\")\nstauntorder &lt;- c(\"Staunton River 10\", \"Staunton River 09\", \"Staunton River 07\", \"Staunton River 06\", \"Staunton River 03\", \"Staunton River 02\")\nflatorder &lt;- c(\"BigCreekLower\", \"LangfordCreekLower\", \"LangfordCreekUpper\", \"Big Creek NWIS\", \"BigCreekUpper\", \"HallowattCreekLower\", \"NicolaCreek\", \"WernerCreek\", \"Hallowat Creek NWIS\", \"CoalCreekLower\", \"CycloneCreekLower\", \"CycloneCreekMiddle\", \"CycloneCreekUpper\", \"CoalCreekMiddle\", \"CoalCreekNorth\", \"CoalCreekHeadwaters\", \"McGeeCreekLower\", \"McGeeCreekTrib\", \"McGeeCreekUpper\")\nyellorder &lt;- c(\"Shields River Valley Ranch\", \"Deep Creek\", \"Crandall Creek\", \"Buck Creek\", \"Dugout Creek\", \"Shields River ab Dugout\", \"Lodgepole Creek\", \"EF Duck Creek be HF\", \"EF Duck Creek ab HF\", \"Henrys Fork\")\nsnakeorder &lt;- c(\"Spread Creek Dam\", \"Rock Creek\", \"NF Spread Creek Lower\", \"NF Spread Creek Upper\", \"Grizzly Creek\", \"SF Spread Creek Lower\", \"Grouse Creek\", \"SF Spread Creek Upper\", \"Leidy Creek Mouth\")\ndonnerorder &lt;- c(\"Fish Creek NWIS\", \"Donner Blitzen ab Fish NWIS\", \"Donner Blitzen nr Burnt Car NWIS\", \"Donner Blitzen ab Indian NWIS\")",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Modeled Flow</span>"
    ]
  },
  {
    "objectID": "ModeledQ_StreamStats.html#stream-stats",
    "href": "ModeledQ_StreamStats.html#stream-stats",
    "title": "6  Modeled Flow",
    "section": "6.2 Stream Stats",
    "text": "6.2 Stream Stats\nWrite out point shape files for each state to feed into Stream Stats batch processor\n\n\nCode\nsiteinfo_sp_wy &lt;- siteinfo_sp %&gt;% filter(region == \"Snake\")\nst_write(siteinfo_sp_wy, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/CompareModeledQ/points/points_wy.shp\")\n\nsiteinfo_sp_mt &lt;- siteinfo_sp %&gt;% filter(region %in% c(\"Flat\", \"Shields\"))\nst_write(siteinfo_sp_mt, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/CompareModeledQ/points/points_mt.shp\")\n\nsiteinfo_sp_ma &lt;- siteinfo_sp %&gt;% filter(region == \"Mass\")\nst_write(siteinfo_sp_ma, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/CompareModeledQ/points/points_ma.shp\")\n\nsiteinfo_sp_va &lt;- siteinfo_sp %&gt;% filter(region %in% c(\"Shen\"))\nst_write(siteinfo_sp_va, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/CompareModeledQ/points/points_va.shp\")\n\nsiteinfo_sp_or &lt;- siteinfo_sp %&gt;% filter(region %in% c(\"Oreg\"))\nst_write(siteinfo_sp_or, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/CompareModeledQ/points/points_or.shp\")\n\n\nList geodatabase layer names\n\n\nCode\nst_layers(dsn = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/CompareModeledQ/StreamStats/points_mt7617/points_mt7617.gdb\")\n\n\nDriver: OpenFileGDB \nAvailable layers:\n            layer_name geometry_type features fields crs_name\n1 GlobalWatershedPoint         Point       39      8   WGS 84\n2      GlobalWatershed Multi Polygon       39     28   WGS 84\n3      CHARACTERISTICS            NA     1921     11     &lt;NA&gt;\n4            FLOWSTATS            NA     6763     16     &lt;NA&gt;\n\n\nRead watershed boundaries\n\n\nCode\nsheds_montana &lt;- st_read(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/CompareModeledQ/StreamStats/points_mt7617/points_mt7617.gdb\", layer = \"GlobalWatershed\")\n\n\nReading layer `GlobalWatershed' from data source \n  `C:\\Users\\jbaldock\\OneDrive - DOI\\Documents\\USGS\\EcoDrought\\EcoDrought Working\\EcoDrought-Analysis\\CompareModeledQ\\StreamStats\\points_mt7617\\points_mt7617.gdb' \n  using driver `OpenFileGDB'\nSimple feature collection with 39 features and 28 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -114.8904 ymin: 43.9457 xmax: -109.7226 ymax: 49.46148\nGeodetic CRS:  WGS 84\n\n\nCode\nsheds_massach &lt;- st_read(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/CompareModeledQ/StreamStats/points_ma7625/points_ma7625.gdb\", layer = \"GlobalWatershed\")\n\n\nReading layer `GlobalWatershed' from data source \n  `C:\\Users\\jbaldock\\OneDrive - DOI\\Documents\\USGS\\EcoDrought\\EcoDrought Working\\EcoDrought-Analysis\\CompareModeledQ\\StreamStats\\points_ma7625\\points_ma7625.gdb' \n  using driver `OpenFileGDB'\nSimple feature collection with 13 features and 25 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -72.82306 ymin: 42.4123 xmax: -72.62871 ymax: 42.54973\nGeodetic CRS:  WGS 84\n\n\nCode\nsheds_oregon &lt;- st_read(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/CompareModeledQ/StreamStats/points_or7626/points_or7626.gdb\", layer = \"GlobalWatershed\")\n\n\nReading layer `GlobalWatershed' from data source \n  `C:\\Users\\jbaldock\\OneDrive - DOI\\Documents\\USGS\\EcoDrought\\EcoDrought Working\\EcoDrought-Analysis\\CompareModeledQ\\StreamStats\\points_or7626\\points_or7626.gdb' \n  using driver `OpenFileGDB'\nSimple feature collection with 7 features and 41 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -118.9295 ymin: 42.48917 xmax: -118.561 ymax: 42.79204\nGeodetic CRS:  WGS 84\n\n\nCode\nsheds_virginia &lt;- st_read(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/CompareModeledQ/StreamStats/points_va7627/points_va7627.gdb\", layer = \"GlobalWatershed\")\n\n\nReading layer `GlobalWatershed' from data source \n  `C:\\Users\\jbaldock\\OneDrive - DOI\\Documents\\USGS\\EcoDrought\\EcoDrought Working\\EcoDrought-Analysis\\CompareModeledQ\\StreamStats\\points_va7627\\points_va7627.gdb' \n  using driver `OpenFileGDB'\nSimple feature collection with 32 features and 20 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -79.24034 ymin: 37.88165 xmax: -78.02949 ymax: 38.7622\nGeodetic CRS:  WGS 84\n\n\nCode\nsheds_wyoming &lt;- st_read(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/CompareModeledQ/StreamStats/points_wy7628/points_wy7628.gdb\", layer = \"GlobalWatershed\")\n\n\nReading layer `GlobalWatershed' from data source \n  `C:\\Users\\jbaldock\\OneDrive - DOI\\Documents\\USGS\\EcoDrought\\EcoDrought Working\\EcoDrought-Analysis\\CompareModeledQ\\StreamStats\\points_wy7628\\points_wy7628.gdb' \n  using driver `OpenFileGDB'\nSimple feature collection with 14 features and 17 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -110.5241 ymin: 43.64373 xmax: -110.1598 ymax: 43.87029\nGeodetic CRS:  WGS 84\n\n\nCode\nsheds &lt;- bind_rows(sheds_massach, sheds_montana, sheds_oregon, sheds_virginia, sheds_wyoming)\nmapview(sheds) \n\n\n\n\n\n\nFind sites that were delineated incorrectly\n\n\nCode\noptions(scipen=999)\nbadsites &lt;- tibble(sheds) %&gt;% select(Name, Shape_Area, DRNAREA, ELEV) %&gt;% rename(site_id = Name) %&gt;% left_join(siteinfo %&gt;% select(site_id, site_name, area_sqmi, elev_ft)) %&gt;% select(site_id, site_name, DRNAREA, area_sqmi) %&gt;% mutate(percerror = (DRNAREA - area_sqmi) / area_sqmi) %&gt;% filter(percerror &gt;= 0.15 | percerror &lt;= -0.15)\nbadsites\n\n\n# A tibble: 15 × 5\n   site_id site_name                      DRNAREA area_sqmi percerror\n   &lt;chr&gt;   &lt;chr&gt;                            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1 WW      West Whately Brook           0.0399        0.493    -0.919\n 2 WL      West Brook Lower             0.086         8.51     -0.990\n 3 JB      Jimmy Brook                  7.87          0.974     7.08 \n 4 SH08    Shields River ab Dugout     11.1           8.68      0.279\n 5 SH06    Lodgepole Creek              2.2           1.36      0.619\n 6 SH05    Dugout Creek                11.1           2.39      3.64 \n 7 BIG_002 LangfordCreekLower           0.1           3.99     -0.975\n 8 RAP     Rapidan River NWIS           0.0000386   115        -1.000\n 9 PI_09FL Piney River 09               0.36          4.28     -0.916\n10 LEI     Leidy Creek Mouth NWIS       0.000811      5.17     -1.000\n11 PCM     Pacific Creek at Moran NWIS  0.34        166.       -0.998\n12 SP10    SF Spread Creek Upper        0.000348     35.1      -1.000\n13 SP09    SF Spread Creek Lower       72            44.3       0.627\n14 SP08    Rock Creek                   0.0000772     4.74     -1.000\n15 SP03    Leidy Creek Lower            0.00112       5.17     -1.000\n\n\nStream stats site information\n\n\nCode\nstreamstats_info &lt;- tibble(sheds) %&gt;% select(Name, DRNAREA) %&gt;% rename(site_id = Name) %&gt;% left_join(siteinfo %&gt;% select(site_id, site_name))\n# streamstats_info\n\n\nRead flow statistics from geodatabases\n\n\nCode\nmontana &lt;- st_read(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/CompareModeledQ/StreamStats/points_mt7617/points_mt7617.gdb\", layer = \"FLOWSTATS\")\n\n\nReading layer `FLOWSTATS' from data source \n  `C:\\Users\\jbaldock\\OneDrive - DOI\\Documents\\USGS\\EcoDrought\\EcoDrought Working\\EcoDrought-Analysis\\CompareModeledQ\\StreamStats\\points_mt7617\\points_mt7617.gdb' \n  using driver `OpenFileGDB'\n\n\nCode\nmassach &lt;- st_read(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/CompareModeledQ/StreamStats/points_ma7625/points_ma7625.gdb\", layer = \"FLOWSTATS\")\n\n\nReading layer `FLOWSTATS' from data source \n  `C:\\Users\\jbaldock\\OneDrive - DOI\\Documents\\USGS\\EcoDrought\\EcoDrought Working\\EcoDrought-Analysis\\CompareModeledQ\\StreamStats\\points_ma7625\\points_ma7625.gdb' \n  using driver `OpenFileGDB'\n\n\nCode\noregon &lt;- st_read(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/CompareModeledQ/StreamStats/points_or7626/points_or7626.gdb\", layer = \"FLOWSTATS\")\n\n\nReading layer `FLOWSTATS' from data source \n  `C:\\Users\\jbaldock\\OneDrive - DOI\\Documents\\USGS\\EcoDrought\\EcoDrought Working\\EcoDrought-Analysis\\CompareModeledQ\\StreamStats\\points_or7626\\points_or7626.gdb' \n  using driver `OpenFileGDB'\n\n\nCode\nvirginia &lt;- st_read(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/CompareModeledQ/StreamStats/points_va7627/points_va7627.gdb\", layer = \"FLOWSTATS\")\n\n\nReading layer `FLOWSTATS' from data source \n  `C:\\Users\\jbaldock\\OneDrive - DOI\\Documents\\USGS\\EcoDrought\\EcoDrought Working\\EcoDrought-Analysis\\CompareModeledQ\\StreamStats\\points_va7627\\points_va7627.gdb' \n  using driver `OpenFileGDB'\n\n\nCode\nwyoming &lt;- st_read(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/CompareModeledQ/StreamStats/points_wy7628/points_wy7628.gdb\", layer = \"FLOWSTATS\")\n\n\nReading layer `FLOWSTATS' from data source \n  `C:\\Users\\jbaldock\\OneDrive - DOI\\Documents\\USGS\\EcoDrought\\EcoDrought Working\\EcoDrought-Analysis\\CompareModeledQ\\StreamStats\\points_wy7628\\points_wy7628.gdb' \n  using driver `OpenFileGDB'\n\n\nCode\nstreamstats &lt;- bind_rows(montana, massach, oregon, virginia, wyoming) %&gt;% filter(!Name %in% c(badsites$site_id)) %&gt;% rename(site_id = Name) %&gt;% left_join(siteinfo %&gt;% select(site_id, site_name)) %&gt;% left_join(streamstats_info)\nhead(streamstats)\n\n\n  site_id RegionID                             RegionName AreaPercent AreaSqMi\n1     NFF   GC1906                  Crippen_Bue_Region_13          61 947.3549\n2     NFF   GC1828                        USA_Bieger_2015          60 937.1283\n3     NFF   GC1828                        USA_Bieger_2015          60 937.1283\n4     NFF   GC1828                        USA_Bieger_2015          60 937.1283\n5     NFF   GC1818 Northern_Rocky_Mountains_P_Bieger_2015          60 937.1283\n6     NFF   GC1818 Northern_Rocky_Mountains_P_Bieger_2015          60 937.1283\n   StatLabel                                StatName     Value\n1 PKMAX_CB_R      Maximum Flood Crippen Bue Regional 246000.00\n2 XABNKF_U_B Bieger_USA_channel_cross_sectional_area    905.00\n3 DBANKF_U_B                Bieger_USA_channel_depth      5.77\n4 WBANKF_U_B                Bieger_USA_channel_width    165.00\n5 XABNKF_P_B   Bieger_P_channel_cross_sectional_area    852.00\n6 DBANKF_P_B                  Bieger_P_channel_depth      5.53\n                  Units Years PIl PIu SE SEp PC CitationID\n1 cubic feet per second    NA  NA  NA NA  NA NA        186\n2           square feet     0  NA  NA NA  NA NA        160\n3                  feet     0  NA  NA NA  NA NA        160\n4                  feet     0  NA  NA NA  NA NA        160\n5           square feet     0  NA  NA NA  NA NA        160\n6                  feet     0  NA  NA NA  NA NA        160\n                       site_name DRNAREA\n1 North Fork Flathead River NWIS  1556.2\n2 North Fork Flathead River NWIS  1556.2\n3 North Fork Flathead River NWIS  1556.2\n4 North Fork Flathead River NWIS  1556.2\n5 North Fork Flathead River NWIS  1556.2\n6 North Fork Flathead River NWIS  1556.2\n\n\n\n\nCode\nchar_massach &lt;- st_read(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/CompareModeledQ/StreamStats/points_ma7625/points_ma7625.gdb\", layer = \"CHARACTERISTICS\")\n\n\nReading layer `CHARACTERISTICS' from data source \n  `C:\\Users\\jbaldock\\OneDrive - DOI\\Documents\\USGS\\EcoDrought\\EcoDrought Working\\EcoDrought-Analysis\\CompareModeledQ\\StreamStats\\points_ma7625\\points_ma7625.gdb' \n  using driver `OpenFileGDB'\n\n\nCode\nhead(char_massach)\n\n\n  Name RegionID                 RegionName AreaPercent AreaSqMi StatLabel\n1  WBR   GC1894       Crippen_Bue_Region_1         100 10.70496   DRNAREA\n2  WBR    GC828 Perennial_Flow_Probability         100 10.70496  MAREGION\n3  WBR    GC828 Perennial_Flow_Probability         100 10.70496    FOREST\n4  WBR    GC828 Perennial_Flow_Probability         100 10.70496 PCTSNDGRV\n5  WBR    GC828 Perennial_Flow_Probability         100 10.70496   DRNAREA\n6  WBR   GC1828            USA_Bieger_2015         100 10.70496   DRNAREA\n                                                          StatName Value\n1                          Area that drains to a point on a stream  10.7\n2              Region of Massachusetts 0 for Eastern 1 for Western   1.0\n3                             Percentage of area covered by forest  87.7\n4 Percentage of land surface underlain by sand and gravel deposits  14.7\n5                          Area that drains to a point on a stream  10.7\n6                          Area that drains to a point on a stream  10.7\n          Units MinLimit MaxLimit\n1  square miles  0.10000 10000.00\n2 dimensionless  0.00000     1.00\n3       percent  0.00000   100.00\n4       percent  0.00000   100.00\n5  square miles  0.01000     1.99\n6  square miles  0.07722 59927.74\n\n\nView provided flow statistics for each state. What is relevant to this paper?\n\nMontana: annual & monthly duration (80, 50, 20), monthly mean flow, 7 day 10 year low flow\nMassachusetts: annual duration (99, 98, 95, 90, 85, 80, 75, 70, 60, 50), 7 day 10 and 2 year low flow\nOregon: annual and monthly duration (95, 50, 25, 10, 5), monthly and annual 7 day 10 and 2 year low flow\nVirginia: lots of flow flow stats including 7 day 10 and 2 year low flow\nWyoming: nothing relevant\n\n\n\nCode\nprint(\"MONTANA\")\nunique(montana$StatName)\nprint(\"MASSACHUSETTS\")\nunique(massach$StatName)\nprint(\"OREGON\")\nunique(oregon$StatName)\nprint(\"VIRGINA\")\nunique(virginia$StatName)\nprint(\"WYOMING\")\nunique(wyoming$StatName)\n\n\nAvailability of flow statistics varies greatly by state. What statistics do all states have in common (minus Wyoming)? Only 7 day 10 year low flow is relevant.\n\n\nCode\nReduce(intersect, list(unique(montana$StatName), unique(massach$StatName), unique(oregon$StatName), unique(virginia$StatName)))\n\n\n [1] \"Maximum Flood Crippen Bue Regional\"     \n [2] \"Bieger_USA_channel_cross_sectional_area\"\n [3] \"Bieger_USA_channel_depth\"               \n [4] \"Bieger_USA_channel_width\"               \n [5] \"Bieger_P_channel_cross_sectional_area\"  \n [6] \"Bieger_P_channel_depth\"                 \n [7] \"Bieger_P_channel_width\"                 \n [8] \"Bieger_D_channel_cross_sectional_area\"  \n [9] \"Bieger_D_channel_depth\"                 \n[10] \"Bieger_D_channel_width\"                 \n[11] \"7 Day 10 Year Low Flow\"                 \n\n\n\n6.2.1 West Brook exceedance\nFor the West Brook, plot (annual) observed and StreamStats exceedance/duration curves and calculate absolute error\n\n\nCode\n# set up\nvars &lt;- unique(massach$StatName)[grep(\"Duration\", unique(massach$StatName))][-1]\nsites &lt;- c(\"West Brook NWIS\", \"Mitchell Brook\", \"Obear Brook Lower\", \"West Brook Upper\", \"Sanderson Brook\", \"Avery Brook\")\npreds &lt;- list()\nexceed &lt;- list()\njoined &lt;- list()\njoined_full &lt;- list()\n\n# calcualate \nfor (i in 1:length(sites)) {\n  obs &lt;- dat_clean %&gt;% filter(site_name == sites[i])\n  # stream stats duration\n  p &lt;- streamstats %&gt;% \n    filter(site_name == unique(obs$site_name), StatName %in% vars) %&gt;% \n    mutate(exceedance = parse_number(StatName)) %&gt;% \n    mutate(flow_cms = Value*0.02831683199881, area_sqkm = DRNAREA*2.58999)\n  p &lt;- add_daily_yield(data = p %&gt;% select(site_id, site_name, DRNAREA, area_sqkm, StatName, exceedance, flow_cms), values = flow_cms, basin_area = as.numeric(unique(p$area_sqkm)))\n  p &lt;- p %&gt;% mutate(logYield = log(Yield_mm))\n  preds[[i]] &lt;- p\n  # calculate exceedance probability by site\n  exceeddat &lt;- obs %&gt;% \n    filter(!is.na(logYield)) %&gt;%\n    arrange(desc(logYield)) %&gt;%\n    mutate(exceedance = 100/length(logYield)*1:length(logYield))\n  exceed[[i]] &lt;- exceeddat\n  # join observed and streamstats exceedance, calculate error\n  j &lt;- exceeddat %&gt;% \n    select(site_name, exceedance, logYield) %&gt;%\n    mutate(exceedance = round(exceedance, digits = 0)) %&gt;%\n    group_by(site_name, exceedance) %&gt;%\n    summarize(logYield = mean(logYield)) %&gt;%\n    ungroup() %&gt;%\n    left_join(p %&gt;%\n                select(site_name, exceedance, logYield) %&gt;%\n                rename(logYield_ss = logYield)) %&gt;%\n    mutate(error_abs = logYield_ss - logYield,\n           error_abs_real = exp(logYield_ss) - exp(logYield),\n           error_rel = (exp(logYield_ss) - exp(logYield)) / exp(logYield))\n  joined[[i]] &lt;- j %&gt;% filter(!is.na(error_abs))\n  joined_full[[i]] &lt;- j\n}\npreds &lt;- do.call(rbind, preds) %&gt;% mutate(site_name = factor(site_name, levels = wborder))\nexceed &lt;- do.call(rbind, exceed) %&gt;% mutate(site_name = factor(site_name, levels = wborder))\njoined &lt;- do.call(rbind, joined) %&gt;% mutate(site_name = factor(site_name, levels = wborder))\njoined_full &lt;- do.call(rbind, joined_full)\njoined_mean &lt;- joined %&gt;% group_by(exceedance) %&gt;% summarize(error_abs = mean(error_abs, na.rm = TRUE))\n\n# preds &lt;- preds %&gt;% mutate(site_name = factor(site_name, levels = sites))\n# exceed &lt;- exceed %&gt;% mutate(site_name = factor(site_name, levels = sites))\n# joined &lt;- joined %&gt;% mutate(site_name = factor(site_name, levels = sites))\n\n# calculate among size variation for StreamStats and observed exceedance \nvardat_ss &lt;- joined %&gt;% group_by(exceedance) %&gt;% summarize(exdsd = sd(logYield_ss))\nvardat_obs &lt;- joined_full %&gt;% group_by(exceedance) %&gt;% summarize(exdsd = sd(logYield))\n\n# tibble for site labels\nsiteslabs &lt;- tibble(site_name = factor(sites, levels = sites), site_lab = c(\"WB0\", \"Mitchell\", \"Obear Lower\", \"WB Upper\", \"Sanderson\", \"Avery\"))\n\n\nPlot observed (colored lines) and modeled (black points/lines) exceedance curves\n\n\nCode\nmypal &lt;- cet_pal(length(wborder), name = \"i1\")[c(1,3,5,6,8,9)]\n\n### Colored by site\n# exceedance curves\np1 &lt;- ggplot() +\n  geom_line(data = exceed, aes(x = exceedance, y = logYield, color = site_name), size = 1) +\n  geom_line(data = preds, aes(x = exceedance, y = logYield), color = \"black\") + \n  geom_point(data = preds, aes(x = exceedance, y = logYield), color = \"black\") +\n  geom_text(data = siteslabs, aes(x = Inf, y = Inf, label = site_lab), vjust = 1.5, hjust = 1.05, size = 3) +\n  facet_wrap(~site_name, nrow = 3) +\n  scale_color_manual(values = mypal) +\n  xlab(\"Exceedance probability\") + ylab(expression(paste(\"log(specific discharge, mm day\"^-1, \")\", sep = \"\"))) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),\n                     panel.grid = element_blank(), strip.text.x = element_blank(), strip.background = element_blank(),\n                     legend.position = \"none\", axis.text = element_text(color = \"black\"))\n# absolute error\np2 &lt;- ggplot(data = joined) +\n  geom_line(aes(x = exceedance, y = error_abs, group = site_name, color = site_name)) +\n  geom_point(aes(x = exceedance, y = error_abs, group = site_name, color = site_name)) +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\") +\n  geom_line(data = joined_mean, aes(x = exceedance, y = error_abs), size = 1) +\n  scale_color_manual(values = mypal) +\n  xlab(\"Exceedance probability\") + ylab(\"Error (modeled - observed)\") + ylim(-2.1,0) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),\n                     legend.position = \"none\", axis.text = element_text(color = \"black\"))\n# combine\nannotate_figure(ggarrange(p1, p2, ncol = 2, labels = \"auto\"), top = text_grob(\"The West Brook, Massachusetts\"))\n\n\n\n\n\n\n\n\n\nDoes StreamStats misrepresent among-site variation in flow duration?\n\n\nCode\np1 &lt;- ggplot() +\n  geom_line(data = vardat_obs, aes(x = exceedance, y = exdsd), size = 1, color = \"grey60\") +\n  geom_line(data = vardat_ss, aes(x = exceedance, y = exdsd), color = \"black\") + \n  geom_point(data = vardat_ss, aes(x = exceedance, y = exdsd), color = \"black\") +\n  xlab(\"Exceedance probability\") + ylab(\"Among-site standard deviation in log(Yield, mm)\") +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\np2 &lt;- vardat_obs %&gt;% \n  left_join(vardat_ss %&gt;% rename(exdsd_ss = exdsd)) %&gt;% \n  mutate(diff = exdsd_ss - exdsd) %&gt;%\n  filter(!is.na(diff)) %&gt;%\n  ggplot() +\n  geom_line(aes(x = exceedance, y = diff)) +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\") +\n  xlab(\"Exceedance probability\") + ylab(\"Difference\") +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) \n\nannotate_figure(ggarrange(p1, p2, ncol = 2, labels = \"auto\"), top = text_grob(\"The West Brook, Massachusetts\"))\n\n\n\n\n\n\n\n\n\nWrite to file\n\n\nCode\nmypal &lt;- cet_pal(length(wborder), name = \"i1\")[c(1,3,5,6,8,9)]\n\n### Colored by site\n# exceedance curves\np1 &lt;- ggplot() +\n  geom_line(data = exceed, aes(x = exceedance, y = logYield, color = site_name), size = 1) +\n  geom_line(data = preds, aes(x = exceedance, y = logYield), color = \"black\") + \n  geom_point(data = preds, aes(x = exceedance, y = logYield), color = \"black\") +\n  geom_text(data = siteslabs, aes(x = Inf, y = Inf, label = site_lab), vjust = 1.5, hjust = 1.05, size = 3) +\n  facet_wrap(~site_name, nrow = 3) +\n  scale_color_manual(values = mypal) +\n  xlab(\"Exceedance probability\") + ylab(expression(paste(\"log(specific discharge, mm day\"^-1, \")\", sep = \"\"))) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),\n                     panel.grid = element_blank(), strip.text.x = element_blank(), strip.background = element_blank(),\n                     legend.position = \"none\", axis.text = element_text(color = \"black\"))\n# absolute error\np2 &lt;- ggplot(data = joined) +\n  geom_line(aes(x = exceedance, y = error_abs, group = site_name, color = site_name)) +\n  geom_point(aes(x = exceedance, y = error_abs, group = site_name, color = site_name)) +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\") +\n  geom_line(data = joined_mean, aes(x = exceedance, y = error_abs), size = 1) +\n  scale_color_manual(values = mypal) +\n  xlab(\"Exceedance probability\") + ylab(\"Error (modeled - observed)\") + ylim(-2.1,0) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),\n                     legend.position = \"none\", axis.text = element_text(color = \"black\"))\n# combine\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/StreamStats_WestBrook.jpg\", width = 6, height = 4, units = \"in\", res = 1000)\nannotate_figure(ggarrange(p1, p2, ncol = 2, labels = \"auto\"), top = text_grob(\"The West Brook, Massachusetts\"))\ndev.off()\n\n\n\n\n6.2.2 Flathead mean monthly yield\nFor the Flathead (Big Creek), plot observed and StreamStats mean monthly flow/yield and calculate absolute error\n\n\nCode\n# set up\nvars &lt;- unique(montana$StatName)[grep(\"Mean Flow\", unique(montana$StatName))]\nsites &lt;- c(\"LangfordCreekUpper\", \"Big Creek NWIS\", \"HallowattCreekLower\", \"WernerCreek\", \"Hallowat Creek NWIS\",   \"McGeeCreekLower\")\npreds_list &lt;- list()\nobs_list &lt;- list()\nhull_list &lt;- list()\njoin_list &lt;- list()\n\n# calcualate \nfor (i in 1:length(sites)) {\n  # filter observed data\n  obs &lt;- dat_clean %&gt;% \n  filter(site_name == sites[i]) %&gt;%\n    mutate(MonthName = factor(MonthName, levels = c(\"Oct\", \"Nov\", \"Dec\", \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\")))\n  # calculate monthly means\n  obs_mon &lt;- obs %&gt;%\n    group_by(site_name, WaterYear, MonthName) %&gt;%\n    summarize(logYield = mean(logYield)) %&gt;%\n    ungroup() %&gt;%\n    mutate(MonthName = factor(MonthName, levels = c(\"Oct\", \"Nov\", \"Dec\", \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\")),\n           WaterYear = factor(WaterYear)) %&gt;% \n    complete(site_name, WaterYear, MonthName)\n  # get monthly min/max for ribbon\n  hull &lt;- obs_mon %&gt;% \n    group_by(site_name, MonthName) %&gt;% \n    summarize(min_logYield = min(logYield, na.rm = TRUE), max_logYield = max(logYield, na.rm = TRUE)) %&gt;% \n    ungroup()\n  # get StreamStats mean monthly flow\n  preds &lt;- streamstats %&gt;% \n    filter(site_name == sites[i], StatName %in% vars, !is.na(AreaSqMi)) %&gt;% \n    mutate(MonthName = substr(StatName, 1, nchar(StatName)-10),\n           Month = parse_number(StatLabel)) %&gt;% \n    mutate(MonthName = factor(recode(MonthName, \"January\" = \"Jan\", \"February\" = \"Feb\", \"March\" = \"Mar\", \"April\" = \"Apr\", \"June\" = \"Jun\", \"July\" = \"Jul\", \"August\" = \"Aug\", \"September\" = \"Sep\", \"October\" = \"Oct\", \"November\" = \"Nov\", \"December\" = \"Dec\"), levels = c(\"Oct\", \"Nov\", \"Dec\", \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\"))) %&gt;%\n    mutate(flow_cms = Value*0.02831683199881, area_sqkm = AreaSqMi*2.58999)\n  preds &lt;- add_daily_yield(data = preds %&gt;% select(site_id, site_name, area_sqkm, MonthName, Month, flow_cms), values = flow_cms, basin_area = as.numeric(unique(preds$area_sqkm)))\n  preds &lt;- preds %&gt;% mutate(logYield = log(Yield_mm))\n  # join and calculate error\n  join_list[[i]] &lt;- obs_mon %&gt;%\n    left_join(preds %&gt;% select(site_name, MonthName, logYield) %&gt;% rename(logYield_ss = logYield)) %&gt;%\n    mutate(error_abs = logYield_ss - logYield,\n           error_abs_real = exp(logYield_ss) - exp(logYield),\n           error_rel = (exp(logYield_ss) - exp(logYield)) / exp(logYield))\n  # store in list\n  preds_list[[i]] &lt;- preds\n  obs_list[[i]] &lt;- obs_mon\n  hull_list[[i]] &lt;- hull\n}\npreds &lt;- do.call(rbind, preds_list) %&gt;% mutate(site_name = factor(site_name, levels = flatorder))\nobs_mon &lt;- do.call(rbind, obs_list) %&gt;% mutate(site_name = factor(site_name, levels = flatorder))\nhull &lt;- do.call(rbind, hull_list) %&gt;% mutate(site_name = factor(site_name, levels = flatorder))\njoined &lt;- do.call(rbind, join_list) %&gt;% mutate(site_name = factor(site_name, levels = flatorder))\njoined_mean &lt;- joined %&gt;% group_by(MonthName) %&gt;% summarise(error_abs = mean(error_abs, na.rm = TRUE))\n\n# tibble for site labels\nsiteslabs &lt;- tibble(site_name = factor(sites, levels = flatorder), site_lab = c(\"Langford\", \"Big\", \"Hallowatt Lower\", \"Werner\", \"Hallowatt Upper\", \"McGee\"))\n\n# calculate among site variation for StreamStats and observed mean monthly flow (mean across years) \nvardat &lt;- preds %&gt;% \n  group_by(MonthName) %&gt;% \n  summarize(qsd_ss = sd(logYield)) %&gt;%\n  ungroup() %&gt;%\n  left_join(obs_mon %&gt;% \n  group_by(site_name, MonthName) %&gt;% \n  summarize(logYield = mean(logYield, na.rm = TRUE)) %&gt;% \n  ungroup() %&gt;% \n  group_by(MonthName) %&gt;%\n  summarize(qsd_obs = sd(logYield)) %&gt;%\n  ungroup()) %&gt;%\n  mutate(diff = qsd_ss - qsd_obs, nummon = as.numeric(MonthName))\n\n\nPlot observed and modeled mean monthly flow\n\n\nCode\nmypal &lt;- cet_pal(length(flatorder), name = \"i1\")[c(3,4,6,8,9,17)]\n\n### Colored by site\n# observed and StreamStats monthly flow\np1 &lt;- ggplot() +\n  geom_ribbon(data = hull, aes(ymin = min_logYield, ymax = max_logYield, x = as.numeric(MonthName), fill = site_name), alpha = 0.3) +\n  geom_line(data = obs_mon, aes(y = logYield, x = as.numeric(MonthName), group = WaterYear, color = site_name)) +\n  geom_point(data = obs_mon, aes(y = logYield, x = as.numeric(MonthName), group = WaterYear, shape = WaterYear, color = site_name)) +\n  geom_line(data = preds, aes(y = logYield, x = as.numeric(MonthName), group = site_name), color = \"black\") +\n  geom_point(data = preds, aes(y = logYield, x = as.numeric(MonthName)), color = \"black\") +\n  geom_text(data = siteslabs, aes(x = -Inf, y = Inf, label = site_lab), vjust = 1.5, hjust = -0.05, size = 3) +\n  facet_wrap(~site_name, ncol = 2) +\n  scale_color_manual(values = mypal) +\n  scale_fill_manual(values = mypal) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     strip.text.x = element_blank(), strip.background = element_blank()) +  \n  ylab(expression(paste(\"Monthly mean log(specific discharge, mm day\"^-1, \")\", sep = \"\"))) + xlab(\"Month\") +\n  scale_x_continuous(breaks = 1:12, labels = c(\"O\", \"N\", \"D\", \"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\"))\n# absolute error by month\np2 &lt;- ggplot() +\n  geom_line(data = joined, aes(x = as.numeric(MonthName), y = error_abs, shape = WaterYear, color = site_name)) +\n  geom_point(data = joined, aes(x = as.numeric(MonthName), y = error_abs, shape = WaterYear, color = site_name)) +\n  geom_line(data = joined_mean, aes(x = as.numeric(MonthName), y = error_abs), size = 1) +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\") +\n  scale_color_manual(values = mypal) +\n  xlab(\"Month\") + ylab(\"Error (modeled - observed)\") +\n  scale_x_continuous(breaks = 1:12, labels = c(\"O\", \"N\", \"D\", \"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\")) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),\n                     legend.position = \"none\")\n# combine\nannotate_figure(ggarrange(p1, p2, ncol = 2, labels = \"auto\"), top = text_grob(\"North Fork Flathead River, Montana\"))\n\n\n\n\n\n\n\n\n\nDoes StreamStats misrepresent among-site variation in mean monthly yield?\n\n\nCode\np1 &lt;- vardat %&gt;%\n  ggplot() +\n  geom_line(aes(x = nummon, y = qsd_obs), size = 1, color = \"grey60\") +\n  geom_line(aes(x = nummon, y = qsd_ss), color = \"black\") + \n  geom_point(aes(x = nummon, y = qsd_ss), color = \"black\") +\n  xlab(\"Month\") + ylab(\"Among-site standard deviation in log(Yield, mm)\") +\n  scale_x_continuous(breaks = 1:12, labels = c(\"O\", \"N\", \"D\", \"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\")) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\np2 &lt;- vardat %&gt;%\n  ggplot() +\n  geom_line(aes(x = nummon, y = diff)) + \n  xlab(\"Month\") + ylab(\"Difference\") +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\") +\n  scale_x_continuous(breaks = 1:12, labels = c(\"O\", \"N\", \"D\", \"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\")) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\nannotate_figure(ggarrange(p1, p2, ncol = 2, labels = \"auto\"), top = text_grob(\"North Fork Flathead River, Montana\"))\n\n\n\n\n\n\n\n\n\nWrite to file\n\n\nCode\nmypal &lt;- cet_pal(length(flatorder), name = \"i1\")[c(3,4,6,8,9,17)]\n\n### Colored by site\n# observed and StreamStats monthly flow\np1 &lt;- ggplot() +\n  geom_ribbon(data = hull, aes(ymin = min_logYield, ymax = max_logYield, x = as.numeric(MonthName), fill = site_name), alpha = 0.3) +\n  geom_line(data = obs_mon, aes(y = logYield, x = as.numeric(MonthName), group = WaterYear, color = site_name)) +\n  geom_point(data = obs_mon, aes(y = logYield, x = as.numeric(MonthName), group = WaterYear, shape = WaterYear, color = site_name)) +\n  geom_line(data = preds, aes(y = logYield, x = as.numeric(MonthName), group = site_name), color = \"black\") +\n  geom_point(data = preds, aes(y = logYield, x = as.numeric(MonthName)), color = \"black\") +\n  geom_text(data = siteslabs, aes(x = -Inf, y = Inf, label = site_lab), vjust = 1.5, hjust = -0.05, size = 3) +\n  facet_wrap(~site_name, ncol = 2) +\n  scale_color_manual(values = mypal) +\n  scale_fill_manual(values = mypal) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     strip.text.x = element_blank(), strip.background = element_blank()) +  \n  ylab(expression(paste(\"Monthly mean log(specific discharge, mm day\"^-1, \")\", sep = \"\"))) + xlab(\"Month\") +\n  scale_x_continuous(breaks = 1:12, labels = c(\"O\", \"N\", \"D\", \"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\"))\n# absolute error by month\np2 &lt;- ggplot() +\n  geom_line(data = joined, aes(x = as.numeric(MonthName), y = error_abs, shape = WaterYear, color = site_name)) +\n  geom_point(data = joined, aes(x = as.numeric(MonthName), y = error_abs, shape = WaterYear, color = site_name)) +\n  geom_line(data = joined_mean, aes(x = as.numeric(MonthName), y = error_abs), size = 1) +\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\") +\n  scale_color_manual(values = mypal) +\n  xlab(\"Month\") + ylab(\"Error (modeled - observed)\") +\n  scale_x_continuous(breaks = 1:12, labels = c(\"O\", \"N\", \"D\", \"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\")) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),\n                     legend.position = \"none\")\n# combine\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/StreamStats_Flathead.jpg\", width = 6, height = 4, units = \"in\", res = 1000)\nannotate_figure(ggarrange(p1, p2, ncol = 2), top = text_grob(\"North Fork Flathead River, Montana\"))\ndev.off()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Modeled Flow</span>"
    ]
  }
]