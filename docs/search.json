[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Headwater streamflow variability is amplified by drought",
    "section": "",
    "text": "1 Introduction\nThis book provides a visual story of the code used to support Baldock et al., “Headwater streamflow variability is amplified by drought”, part of the USGS Eco-Drought Project administered by the USGS Ecosystems Mission Area and Water Mission Area.\nProject team: Jeff Baldock, Jenn Fair, Ben Letcher, Robert Al-Chokhachy, Jason Dunham, and Clint Muhlfeld.\nSignificance: Headwater streams account for a majority of river networks worldwide and have a disproportionately large influence on the functioning of aquatic ecosystems. Headwater streams also support critical habitat for many species, including cold-water fishes, many of which are declining or at risk of extinction.\nProblem: Headwater streams are vastly underrepresented in streamflow monitoring networks, which place greater emphasis on mainstem rivers. As a result, less is known about how headwaters respond to changing water availability. Headwater streams therefore represent a blind spot in understanding flow regime variability and for assessing ecosystem vulnerability to changing climatic conditions, including increases in the frequency and severity of drought.\nQuestions:\n\nHow do streamflow regimes vary spatially in headwater stream networks?\nHow does this spatial variability change among years with climatic conditions indicative of drought?\nWhat is the value of reference gages for understanding drought-driven low flow conditions in headwaters?\n\n\nThis information is preliminary or provisional and is subject to revision. It is being provided to meet the need for timely best science. The information has not received final approval by the U.S. Geological Survey (USGS) and is provided on the condition that neither the USGS nor the U.S. Government shall be held liable for any damages resulting from the authorized or unauthorized use of the information.\n\n\nSession Information\n\n\n\n\n\nCode\nsessionInfo()\n\n\nR version 4.5.1 (2025-06-13 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n  LAPACK version 3.12.1\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/Denver\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.5.1    fastmap_1.2.0     cli_3.6.5        \n [5] tools_4.5.1       htmltools_0.5.8.1 rstudioapi_0.17.1 rmarkdown_2.29   \n [9] knitr_1.50        jsonlite_2.0.0    xfun_0.53         digest_0.6.37    \n[13] rlang_1.1.6       evaluate_1.0.5",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "GatherFlowClimateData.html",
    "href": "GatherFlowClimateData.html",
    "title": "2  Flow and Climate Data",
    "section": "",
    "text": "2.1 Site information\nPurpose: organize the streamflow data, previously collated into a single file, and conduct the hydroclimate analysis (data pulled from Knoben et al. 2018, Water Resources Research).\nView site information\nCode\nsiteinfo &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_SiteInformation.csv\")\ndatatable(siteinfo)\nMap sites\nCode\nsiteinfo_sp &lt;- st_as_sf(siteinfo, coords = c(\"long\", \"lat\"), crs = 4326)\nmapview(siteinfo_sp, zcol = \"designation\")\nPull focal sites\nCode\nfocalsites &lt;- siteinfo_sp %&gt;% \n  filter(site_name %in% c(\"West Brook NWIS\", \"West Brook Lower\", \"Mitchell Brook\", \"Jimmy Brook\", \"Obear Brook Lower\", \"West Brook Upper\", \"West Brook Reservoir\", \"Sanderson Brook\", \"Avery Brook\", \"West Whately Brook\", \"South River Conway NWIS\",\n                          \n                          \"Paine Run 10\", \"Paine Run 08\", \"Paine Run 07\", \"Paine Run 06\", \"Paine Run 02\", \"Paine Run 01\", \"South River Harriston NWIS\",\n                          \n                          \"Staunton River 10\", \"Staunton River 09\", \"Staunton River 07\", \"Staunton River 06\", \"Staunton River 03\", \"Staunton River 02\", \"Rapidan River NWIS\",\n                          \n                          \"BigCreekLower\", \"LangfordCreekLower\", \"LangfordCreekUpper\", \"Big Creek NWIS\", \"BigCreekUpper\", \"HallowattCreekLower\", \"NicolaCreek\", \"WernerCreek\", \"Hallowat Creek NWIS\", \"CoalCreekLower\", \"CycloneCreekLower\", \"CycloneCreekMiddle\", \"CycloneCreekUpper\", \"CoalCreekMiddle\", \"CoalCreekNorth\", \"CoalCreekHeadwaters\", \"McGeeCreekLower\", \"McGeeCreekTrib\", \"McGeeCreekUpper\", \"North Fork Flathead River NWIS\",\n                          \n                          \"Shields River Valley Ranch\", \"Deep Creek\", \"Crandall Creek\", \"Buck Creek\", \"Dugout Creek\", \"Shields River ab Dugout\", \"Lodgepole Creek\", \"EF Duck Creek be HF\", \"EF Duck Creek ab HF\", \"Henrys Fork\", \"Yellowstone River Livingston NWIS\",\n                          \n                          \"Spread Creek Dam\", \"Rock Creek\", \"NF Spread Creek Lower\", \"NF Spread Creek Upper\", \"Grizzly Creek\", \"SF Spread Creek Lower\", \"Grouse Creek\", \"SF Spread Creek Upper\", \"Leidy Creek Mouth\", \"Pacific Creek at Moran NWIS\",\n                          \n                          \"Fish Creek NWIS\", \"Donner Blitzen ab Fish NWIS\", \"Donner Blitzen nr Burnt Car NWIS\", \"Donner Blitzen ab Indian NWIS\", \"Donner Blitzen River nr Frenchglen NWIS\")) %&gt;%\n  mutate(designation = ifelse(designation == \"big\", \"big\", \"little\"))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Flow and Climate Data</span>"
    ]
  },
  {
    "objectID": "GatherFlowClimateData.html#headwater-data",
    "href": "GatherFlowClimateData.html#headwater-data",
    "title": "2  Flow and Climate Data",
    "section": "2.2 Headwater data",
    "text": "2.2 Headwater data\nLittle g daily data\n\n\nCode\n# flow/yield (and temp) data \ndat &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_FlowTempData_DailyWeekly.csv\") %&gt;%\n  mutate(site_name = dplyr::recode(site_name, \"Leidy Creek Mouth NWIS\" = \"Leidy Creek Mouth\", \"SF Spread Creek Lower NWIS\" = \"SF Spread Creek Lower\", \"Dugout Creek NWIS\" = \"Dugout Creek\", \"Shields River ab Smith NWIS\" = \"Shields River Valley Ranch\")) %&gt;%\n  filter(!site_name %in% c(\"Avery Brook NWIS\", \"West Brook 0\", \"BigCreekMiddle\",                # drop co-located sites\n                           \"South River Conway NWIS\", \"North Fork Flathead River NWIS\",         # drop big Gs\n                           \"Pacific Creek at Moran NWIS\", \"Shields River nr Livingston NWIS\",   # drop big Gs\n                           \"Donner Blitzen River nr Frenchglen NWIS\",                           # drop big Gs\n                           \"WoundedBuckCreek\")) %&gt;%                                             # drop little g outside of focal basin\n  group_by(site_name, basin, subbasin, region, date) %&gt;%\n  summarize(flow_mean = mean(flow_mean),\n            tempc_mean = mean(tempc_mean),\n            Yield_mm = mean(Yield_mm),\n            Yield_filled_mm = mean(Yield_filled_mm)) %&gt;%\n  ungroup()\n\n# add water/climate year variables and fill missing dates\ndat &lt;- fill_missing_dates(dat, dates = date, groups = site_name)\ndat &lt;- add_date_variables(dat, dates = date, water_year_start = 10)\n\n\nClean and bind little g data (for each basin, restrict to time period for which data quality/availability is ~consistent)\n\n\nCode\ndat_clean &lt;- bind_rows(\n  dat %&gt;% filter(site_name %in% unlist(siteinfo %&gt;% filter(subbasin == \"West Brook\") %&gt;% select(site_name)), year(date) &gt;= 2020, date &lt;= date(\"2025-01-03\")) %&gt;% \n    mutate(Yield_filled_mm = ifelse(site_name == \"West Brook Upper\" & date &gt; date(\"2024-10-06\"), NA, Yield_filled_mm)) %&gt;%\n    mutate(Yield_filled_mm = ifelse(site_name == \"Mitchell Brook\" & date &gt; date(\"2021-02-28\") & date &lt; date(\"2021-03-26\"), NA, Yield_filled_mm)) %&gt;% \n    mutate(Yield_filled_mm = ifelse(site_name == \"Mitchell Brook\" & date &gt; date(\"2021-11-01\") & date &lt; date(\"2022-05-01\"), NA, Yield_filled_mm)) %&gt;% \n    mutate(Yield_filled_mm = ifelse(site_name == \"Jimmy Brook\" & date &gt; date(\"2024-12-10\"), NA, Yield_filled_mm)) %&gt;% \n    mutate(subbasin = \"West Brook\"),\n  \n  dat %&gt;% filter(site_name %in% unlist(siteinfo %&gt;% filter(subbasin == \"Paine Run\") %&gt;% select(site_name)), date &gt;= as_date(\"2018-11-07\"), date &lt;= as_date(\"2023-05-15\")) %&gt;% mutate(subbasin = \"Paine Run\"),\n  \n  dat %&gt;% filter(site_name %in% unlist(siteinfo %&gt;% filter(subbasin == \"Staunton River\") %&gt;% select(site_name)), date &gt;= as_date(\"2018-11-07\"), date &lt;= as_date(\"2022-10-19\")) %&gt;% mutate(subbasin = \"Staunton River\"),\n  \n  dat %&gt;% filter(site_name %in% c(unlist(siteinfo %&gt;% filter(subbasin == \"Big Creek\") %&gt;% select(site_name)), \"North Fork Flathead River NWIS\"), date &gt;= date(\"2018-08-08\"), date &lt;= date(\"2023-08-03\"), site_name != \"SkookoleelCreek\", Yield_filled_mm &gt; 0)  %&gt;% mutate(subbasin = \"Big Creek\"),\n  \n  dat %&gt;% filter(site_name %in% c(unlist(siteinfo %&gt;% filter(subbasin == \"Coal Creek\") %&gt;% select(site_name)), \"North Fork Flathead River NWIS\"), date &gt;= date(\"2018-07-29\"), date &lt;= date(\"2023-08-03\")) %&gt;% mutate(subbasin = \"Coal Creek\"),\n  \n  dat %&gt;% filter(site_name %in% c(unlist(siteinfo %&gt;% filter(subbasin == \"McGee Creek\") %&gt;% select(site_name)), \"North Fork Flathead River NWIS\"), date &gt;= date(\"2017-07-30\"), date &lt;= date(\"2023-12-11\")) %&gt;% mutate(subbasin = \"McGee Creek\"),\n  \n  dat %&gt;% filter(subbasin == \"Snake River\", date &gt;= date(\"2016-04-01\"), date &lt;= date(\"2023-10-03\"), site_name != \"Leidy Creek Upper\") %&gt;% mutate(subbasin = \"Snake River\"),\n  \n  dat %&gt;% filter(subbasin == \"Shields River\", date &gt;= date(\"2016-04-01\"), date &lt;= date(\"2023-12-31\"), site_name != \"Brackett Creek\") %&gt;% \n  mutate(logYield = log10(Yield_filled_mm)) %&gt;% mutate(subbasin = \"Shields River\"),\n  \n  dat %&gt;% filter(subbasin == \"Duck Creek\", date &gt;= date(\"2015-04-01\"), date &lt;= date(\"2023-12-31\")) %&gt;% mutate(subbasin = \"Duck Creek\"),\n  \n  dat %&gt;% filter(subbasin == \"Donner Blitzen\", date &gt;= as_date(\"2019-04-23\"), date &lt;= as_date(\"2022-12-31\"), !site_name %in% c(\"Indian Creek NWIS\", \"Little Blizten River NWIS\")) %&gt;% mutate(subbasin = \"Donner Blitzen\")\n) %&gt;%\n  filter(Yield_filled_mm &gt; 0) %&gt;%\n  mutate(logYield = log10(Yield_filled_mm), \n         designation = \"little\", \n         doy_calendar = yday(date)) %&gt;%\n  select(-Yield_mm) %&gt;%\n  rename(Yield_mm = Yield_filled_mm)\nhead(dat_clean)\n\n\n# A tibble: 6 × 16\n  site_name   basin     subbasin region date       flow_mean tempc_mean Yield_mm\n  &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;  &lt;date&gt;         &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n1 Avery Brook West Bro… West Br… Mass   2020-01-08      5.96     0.594      1.99\n2 Avery Brook West Bro… West Br… Mass   2020-01-09      4.81     0.0336     1.61\n3 Avery Brook West Bro… West Br… Mass   2020-01-10      4.88     0.363      1.63\n4 Avery Brook West Bro… West Br… Mass   2020-01-11      6.43     1.77       2.15\n5 Avery Brook West Bro… West Br… Mass   2020-01-12     21.2      2.81       7.08\n6 Avery Brook West Bro… West Br… Mass   2020-01-13     14.3      1.92       4.78\n# ℹ 8 more variables: CalendarYear &lt;dbl&gt;, Month &lt;dbl&gt;, MonthName &lt;fct&gt;,\n#   WaterYear &lt;dbl&gt;, DayofYear &lt;dbl&gt;, logYield &lt;dbl&gt;, designation &lt;chr&gt;,\n#   doy_calendar &lt;dbl&gt;\n\n\nView streamflow data availability by subbasin and site\n\nWest BrookPaine RunStaunton RiverBig CreekSnake RiverYellowstone RiverDonner und Blitzen River\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite to file\n\n\nCode\nwrite_csv(dat_clean, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/LittleG_data_clean.csv\")\n\n\nDistribution of headwater catchment size by basin\n\n\nCode\np1 &lt;- siteinfo %&gt;% \n  filter(site_name %in% unique(dat_clean$site_name)) %&gt;% \n  mutate(area_sqkm = area_sqmi*2.58999,\n         basin = factor(basin, levels = c(\"Donner Blitzen\", \"Snake River\", \"Flathead\", \"Shields River\", \n                                          \"Paine Run\", \"Staunton River\", \"West Brook\"))) %&gt;%\n  mutate(basin = recode(basin, \"Shields River\" = \"Yellowstone River\", \"Flathead\" = \"Flathead River\", \"Donner Blitzen\" = \"Donner und Blitzen River\")) %&gt;%\n  ggplot() + \n  geom_boxplot(aes(y = basin, x = area_sqkm, fill = basin)) + scale_x_log10() +\n  geom_point(aes(y = basin, x = area_sqkm)) +\n  theme_bw() + theme(panel.grid = element_blank(), legend.position = \"none\", axis.text = element_text(color = \"black\")) + \n  xlab(expression(paste(\"Catchment area, km\"^2))) + ylab(\"Basin\") +\n  scale_fill_manual(values = rev(brewer.pal(7, \"Set2\")[c(1,2,3,5,4,6,7)]))\np1 \n\n\n\n\n\n\n\n\n\nCode\n# jpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/CatchmentSize_boxplot.jpg\", width = 5, height = 3, units = \"in\", res = 1000)\n# p1\n# dev.off()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Flow and Climate Data</span>"
    ]
  },
  {
    "objectID": "GatherFlowClimateData.html#reference-data",
    "href": "GatherFlowClimateData.html#reference-data",
    "title": "2  Flow and Climate Data",
    "section": "2.3 Reference data",
    "text": "2.3 Reference data\nLoad big/super G data\n\n\nCode\nnwis_daily &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_NWIS_FlowTempData_Raw_Daily.csv\") %&gt;%\n  filter(designation == \"big\", \n         year(date) &gt;= 1970,\n         site_name != \"Shields River nr Livingston NWIS\") %&gt;%\n  mutate(flowcfs = ifelse(site_name == \"Rapidan River NWIS\" & date &gt; date(\"1995-06-26\") & date &lt; date(\"1995-07-01\"), NA, flowcfs),\n         flow_mean_cms = flowcfs*0.02831683199881, \n         area_sqkm = area_sqmi*2.58999)\n\n# sites\nsites &lt;- unique(nwis_daily$site_name)\n\n# site-specific basin area in square km\nbasinarea &lt;- nwis_daily %&gt;% filter(!is.na(site_id)) %&gt;% group_by(site_name) %&gt;% summarize(area_sqkm = unique(area_sqkm))\n\n# calculate yield\nyield_list &lt;- list()\nfor (i in 1:length(sites)) {\n  d &lt;- nwis_daily %&gt;% filter(site_name == sites[i])\n  ba &lt;- unlist(basinarea %&gt;% filter(site_name == sites[i]) %&gt;% select(area_sqkm))\n  yield_list[[i]] &lt;-  add_daily_yield(data = d, values = flow_mean_cms, basin_area = as.numeric(ba))\n}\nnwis_daily_wyield &lt;- do.call(rbind, yield_list)\n\ndat_clean_big &lt;- nwis_daily_wyield %&gt;% \n  select(site_name, basin, subbasin, region, date, Yield_mm, tempc, flowcfs) %&gt;% \n  mutate(logYield = log10(Yield_mm), doy_calendar = yday(date)) %&gt;%\n  rename(tempc_mean = tempc, flow_mean = flowcfs)\n\n# add water/climate year variables and fill missing dates\ndat_clean_big &lt;- fill_missing_dates(dat_clean_big, dates = date, groups = site_name)\ndat_clean_big &lt;- add_date_variables(dat_clean_big, dates = date, water_year_start = 10)\n\nhead(dat_clean_big)\n\n\n# A tibble: 6 × 15\n  site_name       basin subbasin region date       Yield_mm tempc_mean flow_mean\n  &lt;chr&gt;           &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;  &lt;date&gt;        &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;\n1 South River Co… West… West Br… Mass   1970-01-01     1.81         NA        46\n2 South River Co… West… West Br… Mass   1970-01-02     1.69         NA        43\n3 South River Co… West… West Br… Mass   1970-01-03     1.61         NA        41\n4 South River Co… West… West Br… Mass   1970-01-04     1.53         NA        39\n5 South River Co… West… West Br… Mass   1970-01-05     1.49         NA        38\n6 South River Co… West… West Br… Mass   1970-01-06     1.49         NA        38\n# ℹ 7 more variables: logYield &lt;dbl&gt;, doy_calendar &lt;dbl&gt;, CalendarYear &lt;dbl&gt;,\n#   Month &lt;dbl&gt;, MonthName &lt;fct&gt;, WaterYear &lt;dbl&gt;, DayofYear &lt;dbl&gt;\n\n\nWrite to file\n\n\nCode\nwrite_csv(dat_clean_big, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/BigG_data_clean.csv\")\n\n\nView big G streamflow time series data\n\n\nCode\ndat_clean_big %&gt;% ggplot() + geom_line(aes(x = date, y = logYield)) + facet_wrap(~site_name, nrow = 8) + theme_bw()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Flow and Climate Data</span>"
    ]
  },
  {
    "objectID": "GatherFlowClimateData.html#water-availability",
    "href": "GatherFlowClimateData.html#water-availability",
    "title": "2  Flow and Climate Data",
    "section": "2.4 Water availability",
    "text": "2.4 Water availability\nDownload Daymet precip data and summarize by water year\n\n\nCode\n# big G site lat/long\nmysites &lt;- nwis_daily %&gt;% group_by(site_name, basin, subbasin, region) %&gt;% summarize(lat = unique(lat), long = unique(long)) %&gt;% ungroup()\n\n# download point location Daymet data\nclimlist &lt;- vector(\"list\", length = dim(mysites)[1])\nfor (i in 1:dim(mysites)[1]) {\n  clim &lt;- download_daymet(site = mysites$site_name[i], lat = mysites$lat[i], lon = mysites$long[i], start = 1980, end = 2024, internal = T)\n  climlist[[i]] &lt;- tibble(clim$data) %&gt;% \n    mutate(air_temp_mean = (tmax..deg.c. + tmin..deg.c.)/2, \n           date = as.Date(paste(year, yday, sep = \"-\"), \"%Y-%j\"),\n           site_name = mysites$site_name[i]) %&gt;%\n    select(12,2,11,10,4,6) %&gt;% rename(precip_mmday = 5, swe_kgm2 = 6)\n}\n\n# combine and add water years\nclimdf &lt;- do.call(rbind, climlist) %&gt;% left_join(mysites) %&gt;% mutate(year = year(date))\nclimdf &lt;- add_date_variables(climdf, dates = date, water_year_start = 10)\n\n# calculate total annual precipitation in mm, by site and water year\nclimdf_summ &lt;- climdf %&gt;% \n  group_by(site_name, basin, subbasin, region, WaterYear) %&gt;% \n  summarize(precip_total = sum(precip_mmday), sampsize = n()) %&gt;% \n  mutate(precip_total_z = scale(precip_total)[,1]) %&gt;%\n  ungroup() %&gt;% \n  filter(sampsize &gt;= 350)\n\n\nWrite to file(s)\n\n\nCode\nwrite_csv(climdf, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/Daymet_climate.csv\")\n\nwrite_csv(climdf_summ, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/Daymet_climate_summary.csv\")\n\n\nCalculate annual water availability at reference gage as sum of daily yield values…retain only years with &gt;95% data coverage (at least 350 days)\n\n\nCode\nwateravail_sum &lt;- dat_clean_big %&gt;% \n  filter(!is.na(Yield_mm), Month %in% c(7:9)) %&gt;%\n  group_by(basin, site_name, WaterYear) %&gt;% \n  summarize(sampsize = n(), totalyield_sum = sum(Yield_mm, na.rm = TRUE)) %&gt;% \n  mutate(totalyield_sum_z = scale(totalyield_sum)[,1]) %&gt;%\n  ungroup() %&gt;%\n  filter(sampsize &gt;= 85) %&gt;% \n  complete(basin, WaterYear = 1971:2024, fill = list(sampsize = NA, totalyield = NA)) %&gt;%\n  select(-sampsize)\n\nwateravail &lt;- dat_clean_big %&gt;% \n  filter(!is.na(Yield_mm)) %&gt;%\n  group_by(basin, site_name, WaterYear) %&gt;% \n  summarize(sampsize = n(), totalyield = sum(Yield_mm, na.rm = TRUE)) %&gt;% \n  mutate(totalyield_z = scale(totalyield)[,1]) %&gt;%\n  ungroup() %&gt;%\n  filter(sampsize &gt;= 350) %&gt;% \n  complete(basin, WaterYear = 1971:2024, fill = list(sampsize = NA, totalyield = NA)) %&gt;%\n  left_join(wateravail_sum)\n\n# get range of years for little g data\ndaterange &lt;- dat_clean %&gt;% group_by(basin) %&gt;% summarize(minyear = year(min(date)), maxyear = year(max(date)))\n\n# spread ecod years\nmylist &lt;- vector(\"list\", length = dim(daterange)[1])\nfor (i in 1:dim(daterange)[1]) {\n  mylist[[i]] &lt;- tibble(basin = daterange$basin[i], WaterYear = seq(from = daterange$minyear[i], to = daterange$maxyear[i], by = 1))\n}\nyrdf &lt;- do.call(rbind, mylist) %&gt;% mutate(ecodyr = \"yes\")\n\n\nWrite water availability to file\n\n\nCode\nwrite_csv(wateravail, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/BigG_wateravailability_annual.csv\")\n\n\nView time series and scatter plots of reference gage water availability (total annual yield, sum of daily values, black lines) and precipitation (total annual precip, blues lines). Note that the panel labels indicate basins, not NWIS gage names. Conclusion: water availability calculated from precipitation and streamflow datasets are redundant.\n\nRaw valuesz-scoresscatter\n\n\n\n\nCode\nggplot() + \n  geom_rect(data = daterange, aes(xmin = minyear-0.5, xmax = maxyear+0.5, ymin = -Inf, ymax = +Inf), fill = \"grey\") +\n  geom_line(data = wateravail, aes(x = WaterYear, y = totalyield), linewidth = 1) + \n  geom_line(data = climdf_summ, aes(x = WaterYear, y = precip_total), linewidth = 0.5, col = \"blue\") +\n  facet_wrap(~basin) + \n  xlab(\"Water year\") + ylab(\"Total annual yield (mm) / Total annual precipitation (mm)\") +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot() + \n  geom_rect(data = daterange, aes(xmin = minyear-0.5, xmax = maxyear+0.5, ymin = -Inf, ymax = +Inf), fill = \"grey\") +\n  geom_line(data = wateravail, aes(x = WaterYear, y = totalyield_z), linewidth = 1) + \n  geom_line(data = climdf_summ, aes(x = WaterYear, y = precip_total_z), linewidth = 0.5, col = \"blue\") +\n  facet_wrap(~basin) + \n  xlab(\"Water year\") + ylab(\"Total annual yield (scaled) / Total annual precipitation (scaled)\") +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nwateravail %&gt;% select(-sampsize) %&gt;% left_join(climdf_summ %&gt;% select(-sampsize)) %&gt;% left_join(yrdf) %&gt;%\n  ggplot(aes(x = precip_total_z, y = totalyield_z)) +\n  geom_point(aes(color = ecodyr)) +\n  facet_wrap(~basin) + \n  xlab(\"Total annual precipitation (scaled)\") + ylab(\"Total annual yield (scaled)\") +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\") +\n  stat_cor(method = \"pearson\", aes(label = ..r.label..))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Flow and Climate Data</span>"
    ]
  },
  {
    "objectID": "GatherFlowClimateData.html#hydroclimatic-context",
    "href": "GatherFlowClimateData.html#hydroclimatic-context",
    "title": "2  Flow and Climate Data",
    "section": "2.5 Hydroclimatic context",
    "text": "2.5 Hydroclimatic context\nDefine hydroclimatic context of focal sites sensu Knoben et al. (2018, Water Resources Research)\n\n2.5.1 Global and focal sites\nLoad the NETCDF climate data (downloaded from Knoben et al. 2018), convert to usable/raster format, then plot 3-D scatter of global values\n\n\nCode\n# Climate classification data loading and plotting in R\n# Equivalent to the MATLAB script provided by Knoben et al.\n\nlibrary(ncdf4)      # for reading NetCDF\nlibrary(terra)      # for raster handling\nlibrary(ggplot2)    # for plotting\nlibrary(rasterVis)  # for nice levelplots of rasters\n# library(rgdal)      # for geotiff/geoshow equivalents\nlibrary(rgl)\n\n# 1. Data import from NetCDF file\nfilename &lt;- \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Spatial data/HydrologicClimateClassification.nc\"\n\n# Open NetCDF\nnc &lt;- nc_open(filename)\nprint(nc)   # equivalent to MATLAB ncdisp\n\n\nFile C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Spatial data/HydrologicClimateClassification.nc (NC_FORMAT_NETCDF4_CLASSIC):\n\n     11 variables (excluding dimension variables):\n        double grid_aridity_Im[lat,lon]   (Chunking: [360,720])  \n        double grid_seasonalityOfAridity_Imr[lat,lon]   (Chunking: [360,720])  \n        double grid_annualSnowFraction_fs[lat,lon]   (Chunking: [360,720])  \n        double grid_latitude[lat,lon]   (Chunking: [360,720])  \n        double grid_longitude[lat,lon]   (Chunking: [360,720])  \n        double array_aridity_Im[length,width]   (Chunking: [67214,1])  \n        double array_seasonalityOfAridity_Imr[length,width]   (Chunking: [67214,1])  \n        double array_annualSnowFraction_fs[length,width]   (Chunking: [67214,1])  \n        double array_latitude[length,width]   (Chunking: [67214,1])  \n        double array_longitude[length,width]   (Chunking: [67214,1])  \n        double array_rgbColour[length,rgb]   (Chunking: [67214,3])  \n\n     5 dimensions:\n        lat  Size:360 (no dimvar)\n        lon  Size:720 (no dimvar)\n        length  Size:67214 (no dimvar)\n        width  Size:1 (no dimvar)\n        rgb  Size:3 (no dimvar)\n\n\nCode\n# Variable names (must match those in the file)\nvarNames &lt;- c(\n  \"grid_aridity_Im\",\n  \"grid_seasonalityOfAridity_Imr\",\n  \"grid_annualSnowFraction_fs\",\n  \"grid_latitude\",\n  \"grid_longitude\",\n  \"array_aridity_Im\",\n  \"array_seasonalityOfAridity_Imr\",\n  \"array_annualSnowFraction_fs\",\n  \"array_latitude\",\n  \"array_longitude\",\n  \"array_rgbColour\"\n)\n\n# Extract variables into a list (like a struct in MATLAB)\nClimateClassification &lt;- lapply(varNames, function(v) ncvar_get(nc, v))\nnames(ClimateClassification) &lt;- varNames\n\nnc_close(nc)\n\n# 2a. Example maps of gridded climate indices ----------------------------\n\n# Wrap into SpatRaster objects (terra) for plotting\ngrid_Im  &lt;- rast(ClimateClassification$grid_aridity_Im)\ngrid_Imr &lt;- rast(ClimateClassification$grid_seasonalityOfAridity_Imr)\ngrid_fs  &lt;- rast(ClimateClassification$grid_annualSnowFraction_fs)\n\n# Assign CRS and extent (need to use lat/lon arrays)\nlat &lt;- ClimateClassification$grid_latitude\nlon &lt;- ClimateClassification$grid_longitude\next(grid_Im) &lt;- c(min(lon), max(lon), min(lat), max(lat))\ncrs(grid_Im) &lt;- \"EPSG:4326\"\next(grid_Imr) &lt;- ext(grid_Im); crs(grid_Imr) &lt;- \"EPSG:4326\"\next(grid_fs)  &lt;- ext(grid_Im); crs(grid_fs)  &lt;- \"EPSG:4326\"\n\n# correct orientation\ngrid_Im  &lt;- flip(grid_Im, direction = \"vertical\")\ngrid_Imr &lt;- flip(grid_Imr, direction = \"vertical\")\ngrid_fs  &lt;- flip(grid_fs, direction = \"vertical\")\n\n# Plot rasters\nlevelplot(grid_Im, margin = FALSE, main = \"Aridity index I_m\",\n          at = seq(-1, 1, 0.1), col.regions = viridis::viridis(20))\n\n\n\n\n\n\n\n\n\nCode\nlevelplot(grid_Imr, margin = FALSE, main = \"Aridity seasonality index I_{m,r}\",\n          at = seq(0, 2, 0.1), col.regions = viridis::viridis(20))\n\n\n\n\n\n\n\n\n\nCode\nlevelplot(grid_fs, margin = FALSE, main = \"Fraction precipitation as snow f_s\",\n          at = seq(0, 1, 0.05), col.regions = viridis::viridis(20))\n\n\n\n\n\n\n\n\n\nCode\n# 2b. Combined climate map -----------------------------------------------\n\ndf_array &lt;- data.frame(\n  lon = ClimateClassification$array_longitude,\n  lat = ClimateClassification$array_latitude,\n  col = rgb(\n    ClimateClassification$array_rgbColour[,1],\n    ClimateClassification$array_rgbColour[,2],\n    ClimateClassification$array_rgbColour[,3],\n    maxColorValue = 1\n  )\n)\n\nggplot(df_array, aes(x = lon, y = lat, color = col)) +\n  geom_point(size = 0.5) +\n  scale_color_identity() +\n  coord_equal() +\n  theme_minimal() +\n  labs(title = \"Climatic gradients from climate indices\")\n\n\n\n\n\n\n\n\n\nCode\n# 2c. RGB colour legend (3D scatterplot) ---------------------------------\n\ndf_legend &lt;- data.frame(\n  Im  = ClimateClassification$array_aridity_Im,\n  Imr = ClimateClassification$array_seasonalityOfAridity_Imr,\n  fs  = ClimateClassification$array_annualSnowFraction_fs,\n  col = df_array$col\n)\n\n# Using plotly for interactive 3D equivalent of MATLAB scatter3\nlibrary(plotly)\nlibrary(orca)\nplot_ly(df_legend, x = ~Im, y = ~Imr, z = ~fs,\n        type = \"scatter3d\", mode = \"markers\", \n        marker = list(color = df_legend$col, size = 2, opacity = 0.5)) %&gt;%\n  layout(scene = list(\n    xaxis = list(title = \"Aridity\"),\n    yaxis = list(title = \"Seasonality\"),\n    zaxis = list(title = \"Snow fraction\")\n  ))\n\n\n\n\n\n\nCode\n# plot_ly(df_legend, x = ~Im, y = ~Imr, z = ~fs,\n#         type = \"scatter3d\", mode = \"markers\", \n#         marker = list(color = \"grey\", size = 2, opacity = 0.5)) %&gt;%\n#   layout(scene = list(\n#     xaxis = list(title = \"Aridity\"),\n#     yaxis = list(title = \"Seasonality\"),\n#     zaxis = list(title = \"Snow fraction\")\n#   ))\n\n# 2d. GeoTIFF plot of the main map ---------------------------------------\n\n# geofile &lt;- \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Spatial data/ClimateClassification_mainMap_geoReferenced.tif\"\n# map_rast &lt;- rast(geofile)\n# \n# plot(map_rast, main = \"Climatic gradients from climate indices\")\n\n\nStack rasters and extract values for focal sites\n\n\nCode\n# combine the climate variables into a raster stack\n# add 1 to Im to force positive (needed for expansion factors)\nclimate_stack &lt;- c(grid_Im+1, grid_Imr, grid_fs)\nnames(climate_stack) &lt;- c(\"Im\", \"Imr\", \"fs\")\n\n\n# convert to tibble\nclimate_df &lt;- tidyterra::as_tibble(climate_stack)\n# hydroclidf_noNA &lt;- as_tibble(hydrocli) %&gt;% filter(!is.na(aridity))\nsummary(climate_df)\n\n\n       Im              Imr               fs        \n Min.   :0.000    Min.   :0.000    Min.   :0.000   \n 1st Qu.:0.360    1st Qu.:0.736    1st Qu.:0.000   \n Median :0.809    Median :1.270    Median :0.044   \n Mean   :0.805    Mean   :1.110    Mean   :0.200   \n 3rd Qu.:1.222    3rd Qu.:1.526    3rd Qu.:0.361   \n Max.   :1.880    Max.   :2.000    Max.   :1.000   \n NA's   :191986   NA's   :191986   NA's   :191986  \n\n\nCode\n# get site location data\nsitevec &lt;- vect(focalsites)\n\n# extract climate data for each site\nextracted_vals &lt;- extract(climate_stack, sitevec)\nrange(extracted_vals$Im)\n\n\n[1] 0.217410 1.304555\n\n\nCode\nrange(extracted_vals$Imr)\n\n\n[1] 0.6266317 1.5323583\n\n\nCode\nrange(extracted_vals$fs)\n\n\n[1] 0.0000000 0.4364088\n\n\nGet centroid from base hull (for envelope)\n\n\nCode\nhull &lt;- convhulln(extracted_vals[,-1])\nhull_vertices &lt;- extracted_vals[unique(as.vector(hull)), ]\ncentroid &lt;- colMeans(hull_vertices[,-1])\n\n\n\n\n2.5.2 Hydroclimatic envelope\nSubset global climate data using 3D convex hull fit to focal sites, with different percentage expansion factors.\n\n\nCode\nscale_factor &lt;- seq(from = 1, to = 2, by = 0.1)\nnew_layer_list_raw &lt;- list()\nnew_layer_list &lt;- list()\n\nfor (i in 1:length(scale_factor)) {\n  # Expand all original points relative to centroid\n  pts_expanded &lt;- sweep(sweep(extracted_vals[,-1], 2, centroid, \"-\") * scale_factor[i], 2, centroid, \"+\")\n  # recompute convex hull\n  hull_expanded &lt;- geometry::convhulln(pts_expanded)\n  # subset points/raster cells\n  points_in_hull &lt;- geometry::inhulln(hull_expanded, as.matrix(climate_df))\n  points_in_hull_num &lt;- as.numeric(points_in_hull)\n  # create layer and save in list (for 3-d scatterplots and hulls)\n  new_layer &lt;- rast(climate_stack[[1]], vals = points_in_hull_num)\n  names(new_layer) &lt;- paste(\"expand_\", scale_factor[i], sep = \"\")\n  new_layer_list_raw[[i]] &lt;- new_layer\n  # for mapping, we need to set the 0's (cells not in hydroclimate zone) to NA\n  points_in_hull_num[points_in_hull_num == 0] &lt;- NA\n  # create layer and save in list (for mapping)\n  new_layer &lt;- rast(climate_stack[[1]], vals = points_in_hull_num)\n  names(new_layer) &lt;- paste(\"expand_\", scale_factor[i], sep = \"\")\n  new_layer_list[[i]] &lt;- new_layer\n}\n\n\nDraw the map: global distribution of focal hydroclimatic conditions\n\n\nCode\nmypal &lt;- hcl.colors(length(scale_factor), palette = \"Emrld\")\nmaps::map(\"world\", col=\"grey\", fill=TRUE, lwd = 0.2, mar = c(0,0,0,5))\n# box()\nfor (i in rev(1:length(scale_factor))) {\n  plot(new_layer_list[[i]], add = TRUE, col = mypal[i], legend = FALSE)\n}\nmaps::map(\"world\", col = NA, fill=TRUE, add = TRUE, lwd = 0.2, mar = c(0,0,0,5))\nlegend(\"right\", legend = scale_factor, fill = mypal, title = \"Hydroclimatic\\nenvelope\\n(exp. factor)\", bty = \"n\", xpd = TRUE, inset = c(-0.05,0), cex = 0.8)\n\n\n\n\n\n\n\n\n\nWrite to file\n\n\nCode\n# color palette\nmypal &lt;- hcl.colors(length(scale_factor), palette = \"Emrld\")\n\n# write plot to file\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/Fig1_WorldMap_ClimateContext_REDO.jpg\", width = 8, height = 4, units = \"in\", res = 1000)\n# par(mar = c(0,0,0,10), xpd = TRUE)\nmaps::map(\"world\", col=\"grey\", fill=TRUE, lwd = 0.2, mar = c(0,0,0,5))\n# box()\nfor (i in rev(1:length(scale_factor))) {\n  plot(new_layer_list[[i]], add = TRUE, col = mypal[i], legend = FALSE)\n}\nmaps::map(\"world\", col = NA, fill=TRUE, add = TRUE, lwd = 0.2, mar = c(0,0,0,5))\nlegend(\"right\", legend = scale_factor, fill = mypal, title = \"Hydroclimatic\\nenvelope\\n(exp. factor)\", bty = \"n\", xpd = TRUE, inset = c(-0.05,0), cex = 0.8)\ndev.off()\n\n\nShow hydroclimatic envelope in 3D space\n\n\nCode\n# define color palette\nmycols &lt;- brewer.pal(7, \"Set2\")\ncoltib &lt;- tibble(basin = c(\"West Brook\", \"Staunton River\", \"Paine Run\", \"Flathead River\", \"Yellowstone River\", \"Snake River\", \"Donner und Blitzen River\"),\n                 color = brewer.pal(7, \"Set2\"))\n\n# reconfigure extracted values (focal sites)\nextracted_vals2 &lt;- tibble(extracted_vals) %&gt;%\n  mutate(basin = recode(focalsites$basin, \"Shields River\" = \"Yellowstone River\", \"Flathead\" = \"Flathead River\", \"Donner Blitzen\" = \"Donner und Blitzen River\")) %&gt;%\n  left_join(coltib) %&gt;%\n  mutate(Im = Im - 1)\n\n# color points in hull, expansion factor = 1.0\nmylayer &lt;- new_layer_list_raw[[1]]\nnames(mylayer) &lt;- \"myhc\"\nhydroclidf_1 &lt;- as_tibble(c(climate_stack, mylayer)) %&gt;%\n  filter(myhc == 1) %&gt;% mutate(Im = Im-1)\n\n# color points in hull, expansion factor = 1.5\nmylayer &lt;- new_layer_list_raw[[11]]\nnames(mylayer) &lt;- \"myhc\"\nhydroclidf_2 &lt;- as_tibble(c(climate_stack, mylayer)) %&gt;%\n  filter(myhc == 1) %&gt;% mutate(Im = Im-1)\n\n\n# Start with the base scatter of all points\np &lt;- plot_ly() %&gt;%\n  add_markers(\n    data = df_legend,\n    x = ~Im, y = ~Imr, z = ~fs,\n    marker = list(size = 1, opacity = 0.2, color = \"grey\"),\n    name = \"All points\"\n  ) %&gt;%\n  #Add convex hull mesh\n  # add_trace(\n  #   type = \"mesh3d\",\n  #   x = pts[hull,1], y = pts[hull,2], z = pts[hull,3],\n  #   i = hull[,1]-1, j = hull[,2]-1, k = hull[,3]-1,  # zero-based indexing\n  #   opacity = 0.2,\n  #   color = I(\"red\"),\n  #   name = \"Convex hull\"\n  # ) %&gt;%\n  # Add highlighted global points in hull\n  add_markers(\n    data = hydroclidf_1,\n    x = ~Im, y = ~Imr, z = ~fs,\n    marker = list(size = 1, opacity = 0.3, color = \"black\"),\n    name = \"All points\"\n  ) %&gt;%\n  #Add highlighted subset of points with different style\n  add_markers(\n    data = extracted_vals2,\n    x = ~Im, y = ~Imr, z = ~fs,\n    marker = list(size = 5, opacity = 0.8, color = extracted_vals2$color, symbol = \"circle\"),\n    name = \"Highlighted points\"\n  ) %&gt;%\n  layout(\n    scene = list(\n      xaxis = list(title = \"Aridity\"),\n      yaxis = list(title = \"Seasonality\"),\n      zaxis = list(title = \"Snow fraction\")\n    )\n  )\np\n\n\n\n\n\n\nStatic 3d scatterplot for Figure 1, no envelope\n\n\nCode\npar(mar = c(2,2,2,2), mgp = c(5,1,0))\nscatter3D(x = df_legend$Im, y = df_legend$Imr, z = df_legend$fs, \n          col = alpha(\"grey\", 0.2), cex = 0.15, pch = 16, bty = \"b2\",\n          xlab = \"\", ylab = \"\", zlab = \"\",\n          phi = 25, theta = -50, expand = 0.75, ticktype = \"detailed\")\nscatter3D(x = extracted_vals2$Im, y = extracted_vals2$Imr, z = extracted_vals2$fs-0.03, \n          col = \"black\", type = \"h\", add = TRUE, pch = NA)\nscatter3D(x = extracted_vals2$Im, y = extracted_vals2$Imr, z = extracted_vals2$fs, \n          bg = extracted_vals2$color, col = \"black\", cex = 1.5, pch = 21, add = TRUE)\n\n\n\n\n\n\n\n\n\nWrite 3d scatterplots to file\n\n\nCode\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/Fig1_3Dscatter_NoHull.jpg\", width = 5, height = 5, units = \"in\", res = 1000)\npar(mar = c(2,2,2,2), mgp = c(5,1,0))\nscatter3D(x = df_legend$Im, y = df_legend$Imr, z = df_legend$fs, \n          col = alpha(\"grey\", 0.2), cex = 0.15, pch = 16, bty = \"b2\",\n          xlab = \"\", ylab = \"\", zlab = \"\",\n          phi = 25, theta = -50, expand = 0.75, ticktype = \"detailed\")\nscatter3D(x = extracted_vals2$Im, y = extracted_vals2$Imr, z = extracted_vals2$fs-0.03, \n          col = \"black\", type = \"h\", add = TRUE, pch = NA)\nscatter3D(x = extracted_vals2$Im, y = extracted_vals2$Imr, z = extracted_vals2$fs, \n          bg = extracted_vals2$color, col = \"black\", cex = 1.5, pch = 21, add = TRUE)\ndev.off()\n\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/Fig1_3Dscatter_basehull.jpg\", width = 5, height = 5, units = \"in\", res = 1000)\npar(mar = c(2,2,2,2), mgp = c(5,1,0))\nscatter3D(x = df_legend$Im, y = df_legend$Imr, z = df_legend$fs, \n          col = alpha(\"grey\", 0.2), cex = 0.15, pch = 16, bty = \"b2\",\n          xlab = \"\", ylab = \"\", zlab = \"\",\n          phi = 25, theta = -50, expand = 0.75, ticktype = \"detailed\")\nscatter3D(x = hydroclidf_1$Im, y = hydroclidf_1$Imr, z = hydroclidf_1$fs, \n          col = alpha(\"black\", 0.4), cex = 0.2, pch = 16, add = TRUE)\nscatter3D(x = extracted_vals2$Im, y = extracted_vals2$Imr, z = extracted_vals2$fs, \n          bg = extracted_vals2$color, col = \"black\", cex = 1.5, pch = 21, add = TRUE)\ndev.off()\n\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/Fig1_3Dscatter_BIGhull.jpg\", width = 5, height = 5, units = \"in\", res = 1000)\npar(mar = c(2,2,2,2), mgp = c(5,1,0))\nscatter3D(x = df_legend$Im, y = df_legend$Imr, z = df_legend$fs, \n          col = alpha(\"grey\", 0.2), cex = 0.15, pch = 16, bty = \"b2\",\n          xlab = \"\", ylab = \"\", zlab = \"\",\n          phi = 25, theta = -50, expand = 0.75, ticktype = \"detailed\")\nscatter3D(x = hydroclidf_2$Im, y = hydroclidf_2$Imr, z = hydroclidf_2$fs, \n          col = alpha(\"black\", 0.4), cex = 0.2, pch = 16, add = TRUE)\nscatter3D(x = extracted_vals2$Im, y = extracted_vals2$Imr, z = extracted_vals2$fs, \n          bg = extracted_vals2$color, col = \"black\", cex = 1.5, pch = 21, add = TRUE)\ndev.off()\n\n\nView global and focal site distributions of climate data\n\n\nCode\npar(mfrow = c(3,1), mar = c(2.5,0.5,0.1,0.5), mgp = c(1.5,0.5,0), xpd = TRUE)\n\ndens &lt;- density(df_legend$Im)\nplot(dens, type = \"n\", xlab = \"Aridity\", ylab = \"\", main = \"\", bty = \"n\", xlim = c(-1, 1), axes = FALSE)\npolygon(dens, col = \"grey70\", border = NA)\nlines(dens, bty = \"n\")\npolygon(x = c(-10, -1, -1, -10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\npolygon(x = c(10, 1, 1, 10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\naxis(1)\npoints(x = jitter(extracted_vals2$Im, factor = 20), y = rep(0, times = dim(extracted_vals2)[1]), pch = 21, bg = extracted_vals2$color, cex = 2)\n\ndens &lt;- density(df_legend$Imr)\nplot(dens, type = \"n\", xlab = \"Seasonality\", ylab = \"\", main = \"\", bty = \"n\", xlim = c(0, 2), axes = FALSE)\npolygon(dens, col = \"grey70\", border = NA)\nlines(dens, bty = \"n\")\npolygon(x = c(-10, 0, 0, -10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\npolygon(x = c(10, 2, 2, 10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\naxis(1)\npoints(x = jitter(extracted_vals2$Imr, factor = 20), y = rep(0, times = dim(extracted_vals2)[1]), pch = 21, bg = extracted_vals2$color, cex = 2)\n\ndens &lt;- density(df_legend$fs)\nplot(dens, type = \"n\", xlab = \"Precipitation as snow\", ylab = \"\", main = \"\", bty = \"n\", xlim = c(0, 1), axes = FALSE)\npolygon(dens, col = \"grey70\", border = NA)\nlines(dens, bty = \"n\")\npolygon(x = c(-10, 0, 0, -10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\npolygon(x = c(10, 1, 1, 10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\naxis(1)\npoints(x = jitter(extracted_vals2$fs, factor = 20), y = rep(0, times = dim(extracted_vals2)[1]), pch = 21, bg = extracted_vals2$color, cex = 2)\n\n\n\n\n\n\n\n\n\nWrite to file\n\n\nCode\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/Fig1_ClimateDensityDistributions2.jpg\", width = 3, height = 3, units = \"in\", res = 1000)\npar(mfrow = c(3,1), mar = c(2.5,0.5,0.1,0.5), mgp = c(1.5,0.5,0), xpd = TRUE)\n\ndens &lt;- density(df_legend$Im)\nplot(dens, type = \"n\", xlab = \"Aridity\", ylab = \"\", main = \"\", bty = \"n\", xlim = c(-1, 1), axes = FALSE)\npolygon(dens, col = \"grey70\", border = NA)\nlines(dens, bty = \"n\")\npolygon(x = c(-10, -1, -1, -10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\npolygon(x = c(10, 1, 1, 10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\naxis(1)\npoints(x = jitter(extracted_vals2$Im, factor = 20), y = rep(0, times = dim(extracted_vals2)[1]), pch = 21, bg = extracted_vals2$color, cex = 2)\n\n\ndens &lt;- density(df_legend$Imr)\nplot(dens, type = \"n\", xlab = \"Seasonality\", ylab = \"\", main = \"\", bty = \"n\", xlim = c(0, 2), axes = FALSE)\npolygon(dens, col = \"grey70\", border = NA)\nlines(dens, bty = \"n\")\npolygon(x = c(-10, 0, 0, -10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\npolygon(x = c(10, 2, 2, 10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\naxis(1)\npoints(x = jitter(extracted_vals2$Imr, factor = 20), y = rep(0, times = dim(extracted_vals2)[1]), pch = 21, bg = extracted_vals2$color, cex = 2)\n\ndens &lt;- density(df_legend$fs)\nplot(dens, type = \"n\", xlab = \"Precipitation as snow\", ylab = \"\", main = \"\", bty = \"n\", xlim = c(0, 1), axes = FALSE)\npolygon(dens, col = \"grey70\", border = NA)\nlines(dens, bty = \"n\")\npolygon(x = c(-10, 0, 0, -10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\npolygon(x = c(10, 1, 1, 10), y = c(-10, -10, 10, 10), border = NA, col = \"white\")\naxis(1)\npoints(x = jitter(extracted_vals2$fs, factor = 20), y = rep(0, times = dim(extracted_vals2)[1]), pch = 21, bg = extracted_vals2$color, cex = 2)\n\ndev.off()\n\n\n\n\n2.5.3 Repeatability by climate\nPlot monthly estimates of repeatability by climate indices\n\n\nCode\nmysites &lt;- as_tibble(focalsites) %&gt;%\n  mutate(Im = extracted_vals$Im, \n         Imr = extracted_vals$Imr,\n         fs = extracted_vals$fs) %&gt;% \n  group_by(basin) %&gt;%\n  summarize(Im = mean(Im), Imr = mean(Imr), fs = mean(fs)) %&gt;%\n  ungroup() %&gt;%\n  filter(basin != \"Donner Blitzen\") %&gt;%\n  mutate(basin = ifelse(basin == \"Paine Run\", \"Paine\",\n                        ifelse(basin == \"Staunton River\", \"Staunton\", \n                               ifelse(basin == \"Snake River\", \"Snake\", \n                                      ifelse(basin == \"Shields River\", \"Yellowstone\", basin))))) %&gt;%\n  mutate(basin = factor(basin, levels = rev(c(\"West Brook\", \"Staunton\", \"Paine\", \"Flathead\", \"Yellowstone\", \"Snake\")))) %&gt;%\n  mutate(R = c(0.55, 0.56, 0.71, 0.94, 0.44, 0.47)) # grab median repeatability from later analyses\n\n\nPlot\n\n\nCode\nmyr &lt;- cor(mysites$Im, mysites$R)\nmysites %&gt;% ggplot(aes(x = Im, y = R)) +\n  geom_point(aes(fill = basin), shape = 21, size = 3) +\n  annotate(\"text\", x = Inf, y = Inf, hjust = 1.1, vjust = 1.5, \n           label = paste(\"Pearson's r = \", round(myr, digits = 2))) +\n  scale_fill_manual(values = rev(brewer.pal(6, \"Set2\"))) +\n  theme_bw() + theme(legend.position = \"none\", panel.grid = element_blank(), \n                     axis.text = element_text(color = \"black\")) +\n  xlab(\"Aridity\") + ylab(\"Median repeatability (R)\")\n\n\n\n\n\n\n\n\n\nCode\nmyr &lt;- cor(mysites$Imr, mysites$R)\nmysites %&gt;% ggplot(aes(x = Imr, y = R)) +\n  geom_point(aes(fill = basin), shape = 21, size = 3) +\n    annotate(\"text\", x = -Inf, y = Inf, hjust = -0.1, vjust = 1.5, \n           label = paste(\"Pearson's r = \", round(myr, digits = 2))) +\n  scale_fill_manual(values = rev(brewer.pal(6, \"Set2\"))) +\n  theme_bw() + theme(legend.position = \"none\", panel.grid = element_blank(), \n                     axis.text = element_text(color = \"black\")) +\n  xlab(\"Seasonality\") + ylab(\"Median repeatability (R)\")\n\n\n\n\n\n\n\n\n\nCode\nmyr &lt;- cor(mysites$fs, mysites$R)\nmysites %&gt;% ggplot(aes(x = fs, y = R)) +\n  geom_point(aes(fill = basin), shape = 21, size = 3) +\n    annotate(\"text\", x = -Inf, y = Inf, hjust = -0.1, vjust = 1.5, \n           label = paste(\"Pearson's r = \", round(myr, digits = 2))) +\n  scale_fill_manual(values = rev(brewer.pal(6, \"Set2\"))) +\n  theme_bw() + theme(legend.position = \"none\", panel.grid = element_blank(), \n                     axis.text = element_text(color = \"black\")) +\n  xlab(\"Precipitation as snow\") + ylab(\"Median repeatability (R)\")\n\n\n\n\n\n\n\n\n\nWrite to file\n\n\nCode\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/Repeatability_Aridity.jpg\", width = 4, height = 3.5, units = \"in\", res = 1000)\nmyr &lt;- cor(mysites$Im, mysites$R)\nmysites %&gt;% ggplot(aes(x = Im, y = R)) +\n  geom_point(aes(fill = basin), shape = 21, size = 3) +\n  annotate(\"text\", x = Inf, y = Inf, hjust = 1.1, vjust = 1.5, \n           label = paste(\"Pearson's r = \", round(myr, digits = 2))) +\n  scale_fill_manual(values = rev(brewer.pal(6, \"Set2\"))) +\n  theme_bw() + theme(legend.position = \"none\", panel.grid = element_blank(), \n                     axis.text = element_text(color = \"black\")) +\n  xlab(\"Aridity\") + ylab(\"Median repeatability (R)\")\ndev.off()\n\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/Repeatability_Seasonality.jpg\", width = 4, height = 3.5, units = \"in\", res = 1000)\nmyr &lt;- cor(mysites$Imr, mysites$R)\nmysites %&gt;% ggplot(aes(x = Imr, y = R)) +\n  geom_point(aes(fill = basin), shape = 21, size = 3) +\n    annotate(\"text\", x = -Inf, y = Inf, hjust = -0.1, vjust = 1.5, \n           label = paste(\"Pearson's r = \", round(myr, digits = 2))) +\n  scale_fill_manual(values = rev(brewer.pal(6, \"Set2\"))) +\n  theme_bw() + theme(legend.position = \"none\", panel.grid = element_blank(), \n                     axis.text = element_text(color = \"black\")) +\n  xlab(\"Seasonality\") + ylab(\"Median repeatability (R)\")\ndev.off()\n\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/Repeatability_SnowFraction.jpg\", width = 4, height = 3.5, units = \"in\", res = 1000)\nmyr &lt;- cor(mysites$fs, mysites$R)\nmysites %&gt;% ggplot(aes(x = fs, y = R)) +\n  geom_point(aes(fill = basin), shape = 21, size = 3) +\n    annotate(\"text\", x = -Inf, y = Inf, hjust = -0.1, vjust = 1.5, \n           label = paste(\"Pearson's r = \", round(myr, digits = 2))) +\n  scale_fill_manual(values = rev(brewer.pal(6, \"Set2\"))) +\n  theme_bw() + theme(legend.position = \"none\", panel.grid = element_blank(), \n                     axis.text = element_text(color = \"black\")) +\n  xlab(\"Precipitation as snow\") + ylab(\"Median repeatability (R)\")\ndev.off()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Flow and Climate Data</span>"
    ]
  },
  {
    "objectID": "SpaceTimeVar.html",
    "href": "SpaceTimeVar.html",
    "title": "3  Spatiotemporal Variation",
    "section": "",
    "text": "3.1 Data\nPurpose: Evaluate the extent and magnitude of spatial and temporal variation in headwater streamflow regimes.\nSite information\nCode\nsiteinfo &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_SiteInformation.csv\")\nsiteinfo_sp &lt;- st_as_sf(siteinfo, coords = c(\"long\", \"lat\"), crs = 4326)\nLittle g’s (headwater sites)\nCode\ndat_clean &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/LittleG_data_clean.csv\")\nBig G’s (reference gages)\nCode\ndat_clean_big &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/BigG_data_clean.csv\")\nClimate\nCode\nclimdf &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/Daymet_climate.csv\")\nclimdf_summ &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/Daymet_climate_summary.csv\")\nGet catchment shapefiles\nCode\nsheds_list &lt;- list()\nmyfiles &lt;- list.files(path = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/\", pattern = \".shp\")\nfor (i in 1:length(myfiles)) {\n  sheds_list[[i]] &lt;- st_read(paste(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/\", myfiles[i], sep = \"\"))\n}\nsheds &lt;- do.call(rbind, sheds_list) %&gt;% \n  mutate(site_id = ifelse(site_id == \"SP01\", \"SP07\", ifelse(site_id == \"SP07\", \"SP01\", site_id))) %&gt;%\n  left_join(siteinfo)\n#mapview(sheds %&gt;% arrange(desc(area_sqmi)), alpha.regions = 0.2)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Spatiotemporal Variation</span>"
    ]
  },
  {
    "objectID": "SpaceTimeVar.html#order-sites",
    "href": "SpaceTimeVar.html#order-sites",
    "title": "3  Spatiotemporal Variation",
    "section": "3.2 Order sites",
    "text": "3.2 Order sites\nFor colors, order sites from downstream to upstream (roughly) and by subbasin (if appropriate)\n\n\nCode\nwborder &lt;- c(\"West Brook NWIS\", \"West Brook Lower\", \"Mitchell Brook\", \"Jimmy Brook\", \"Obear Brook Lower\", \"West Brook Upper\", \"West Brook Reservoir\", \"Sanderson Brook\", \"Avery Brook\", \"West Whately Brook\")\npaineorder &lt;- c(\"Paine Run 10\", \"Paine Run 08\", \"Paine Run 07\", \"Paine Run 06\", \"Paine Run 02\", \"Paine Run 01\")\nstauntorder &lt;- c(\"Staunton River 10\", \"Staunton River 09\", \"Staunton River 07\", \"Staunton River 06\", \"Staunton River 03\", \"Staunton River 02\")\nflatorder &lt;- c(\"BigCreekLower\", \"LangfordCreekLower\", \"LangfordCreekUpper\", \"Big Creek NWIS\", \"BigCreekUpper\", \"HallowattCreekLower\", \"NicolaCreek\", \"WernerCreek\", \"Hallowat Creek NWIS\", \"CoalCreekLower\", \"CycloneCreekLower\", \"CycloneCreekMiddle\", \"CycloneCreekUpper\", \"CoalCreekMiddle\", \"CoalCreekNorth\", \"CoalCreekHeadwaters\", \"McGeeCreekLower\", \"McGeeCreekTrib\", \"McGeeCreekUpper\")\nyellorder &lt;- c(\"Shields River Valley Ranch\", \"Deep Creek\", \"Crandall Creek\", \"Buck Creek\", \"Dugout Creek\", \"Shields River ab Dugout\", \"Lodgepole Creek\", \"EF Duck Creek be HF\", \"EF Duck Creek ab HF\", \"Henrys Fork\")\nsnakeorder &lt;- c(\"Spread Creek Dam\", \"Rock Creek\", \"NF Spread Creek Lower\", \"NF Spread Creek Upper\", \"Grizzly Creek\", \"SF Spread Creek Lower\", \"Grouse Creek\", \"SF Spread Creek Upper\", \"Leidy Creek Mouth\")\ndonnerorder &lt;- c(\"Fish Creek NWIS\", \"Donner Blitzen ab Fish NWIS\", \"Donner Blitzen nr Burnt Car NWIS\", \"Donner Blitzen ab Indian NWIS\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Spatiotemporal Variation</span>"
    ]
  },
  {
    "objectID": "SpaceTimeVar.html#spaghetti-plots",
    "href": "SpaceTimeVar.html#spaghetti-plots",
    "title": "3  Spatiotemporal Variation",
    "section": "3.3 Spaghetti plots",
    "text": "3.3 Spaghetti plots\nView daily time series data by sub-basin. Note that we are using the “Super G” NWIS data for the reference gage (black line). Per Robert comment, entirely nested design is cute, but doesn’t reflect how the data is actually used.\nBig G NWIS sites/reference gages for each basin/subbasin:\n\n\nCode\ndat_clean_big %&gt;% group_by(region, basin, subbasin) %&gt;% summarize(site_name = unique(site_name)) %&gt;% ungroup() %&gt;% filter(!is.na(region)) %&gt;% kable()\n\n\n\n\n\n\n\n\n\n\n\nregion\nbasin\nsubbasin\nsite_name\n\n\n\n\nFlat\nFlathead\nFlathead\nNorth Fork Flathead River NWIS\n\n\nMass\nWest Brook\nWest Brook\nSouth River Conway NWIS\n\n\nOreg\nDonner Blitzen\nDonner Blitzen\nDonner Blitzen River nr Frenchglen NWIS\n\n\nShen\nPaine Run\nPaine Run\nSouth River Harriston NWIS\n\n\nShen\nPiney River\nPiney River\nBattle Run NWIS\n\n\nShen\nStaunton River\nStaunton River\nRapidan River NWIS\n\n\nShields\nShields River\nShields River\nYellowstone River Livingston NWIS\n\n\nSnake\nSnake River\nSnake River\nPacific Creek at Moran NWIS\n\n\n\n\n\n\n3.3.1 Interactive\n\nWest BrookPaine RunStaunton RiverFlatheadYellowstoneSnake RiverDonner Blitzen\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndat_clean %&gt;% \n  filter(basin == \"Flathead\") %&gt;% \n  bind_rows(dat_clean_big %&gt;% filter(basin == \"Flathead\", date &gt;= date(\"2017-07-29\"), date &lt;= date(\"2023-12-11\"))) %&gt;% \n  select(date, site_name, logYield) %&gt;% \n  spread(key = site_name, value = logYield) %&gt;% \n  relocate(\"North Fork Flathead River NWIS\", .after = last_col()) %&gt;% \n  dygraph() %&gt;% dyRangeSelector() %&gt;% dyAxis(\"y\", label = \"ln(Yield, mm)\") %&gt;% \n  #dyOptions(colors = c(brewer.pal(7, \"Dark2\"), \"black\")) %&gt;% \n  dySeries(\"North Fork Flathead River NWIS\", strokeBorderWidth = 1, strokeWidth = 1.5, color = \"black\")\n\n\n\n\n\n\n\n\n\n\nCode\ndat_clean %&gt;% \n  filter(basin == \"Shields River\") %&gt;% \n  bind_rows(dat_clean_big %&gt;% filter(basin == \"Shields River\", date &gt;= date(\"2015-04-01\"), date &lt;= date(\"2023-12-31\"))) %&gt;% \n  select(date, site_name, logYield) %&gt;% \n  spread(key = site_name, value = logYield) %&gt;% \n  relocate(\"Yellowstone River Livingston NWIS\", .after = last_col()) %&gt;% \n  dygraph() %&gt;% dyRangeSelector() %&gt;% dyAxis(\"y\", label = \"ln(Yield, mm)\") %&gt;% \n  #dyOptions(colors = c(brewer.pal(7, \"Dark2\"), \"black\")) %&gt;% \n  dySeries(\"Yellowstone River Livingston NWIS\", strokeBorderWidth = 1, strokeWidth = 1.5, color = \"black\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.3.2 Static\n\n3.3.2.1 Complete time series\nCreate time series data plots objects\n\n\nCode\npolycol &lt;- \"grey90\"\nmycols &lt;- brewer.pal(7, \"Set2\")\n\n### WEST BROOK\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"West Brook\") %&gt;%\n  mutate(site_name = factor(site_name, levels = wborder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"West Brook\", date &gt;= date(\"2020-01-01\"), date &lt;= date(\"2025-01-03\"))\n# color\npwb1 &lt;- ggplot() +\n  geom_rect(aes(xmin = ymd(\"2020-07-01\"), xmax = ymd(\"2020-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2021-07-01\"), xmax = ymd(\"2021-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2022-07-01\"), xmax = ymd(\"2022-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2023-07-01\"), xmax = ymd(\"2023-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2024-07-01\"), xmax = ymd(\"2024-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = wborder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  ylim(-3,2) +\n  with_outer_glow(annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"West Brook, MA\", hjust = 0, vjust = 1), colour = \"white\", expand = 10) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[1], fill = NA, linewidth = 1.5)\n                     )\n# greyscale\npwb2 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, group = site_name), color = \"grey\") +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"black\", size = 1) +\n  ylim(-3,2) +\n  annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"West Brook, MA\", hjust = 0, vjust = 1) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = \"black\"))\n\n\n### STAUNTON RIVER\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Staunton River\") %&gt;%\n  mutate(site_name = factor(site_name, levels = stauntorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Staunton River\", date &gt;= as_date(\"2018-11-07\"), date &lt;= as_date(\"2022-10-19\"))\n# color\npst1 &lt;- ggplot() +\n  geom_rect(aes(xmin = ymd(\"2019-07-01\"), xmax = ymd(\"2019-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2020-07-01\"), xmax = ymd(\"2020-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2021-07-01\"), xmax = ymd(\"2021-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2022-07-01\"), xmax = ymd(\"2022-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = stauntorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  with_outer_glow(annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Staunton River, VA\", hjust = 0, vjust = 1), colour = \"white\", expand = 10) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[2], fill = NA, linewidth = 1.5)\n                     )\n# greyscale\npst2 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, group = site_name), color = \"grey\") +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"black\", size = 1) +\n  annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Staunton River\", hjust = 0, vjust = 1) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\"), panel.border = element_rect(colour = mycols[2], fill = NA, linewidth = 2))\n\n\n### PAINE RUN\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Paine Run\") %&gt;%\n  mutate(site_name = factor(site_name, levels = paineorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Paine Run\", date &gt;= as_date(\"2018-11-07\"), date &lt;= as_date(\"2023-05-15\"))\n# color\nppa1 &lt;- ggplot() +\n  geom_rect(aes(xmin = ymd(\"2019-07-01\"), xmax = ymd(\"2019-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2020-07-01\"), xmax = ymd(\"2020-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2021-07-01\"), xmax = ymd(\"2021-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2022-07-01\"), xmax = ymd(\"2022-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = paineorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  with_outer_glow(annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Paine Run, VA\", hjust = 0, vjust = 1), colour = \"white\", expand = 10) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[3], fill = NA, linewidth = 1.5)\n                     )\n# greyscale\nppa2 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, group = site_name), color = \"grey\") +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"black\", size = 1) +\n  annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Paine Run\", hjust = 0, vjust = 1) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = \"black\"))\n\n\n### FLATHEAD\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Flathead\", date &gt;= date(\"2018-07-29\"), date &lt;= date(\"2023-08-11\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = flatorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Flathead\", date &gt;= date(\"2018-07-29\"), date &lt;= date(\"2023-08-11\"))\n# color\npfl1 &lt;- ggplot() +\n  geom_rect(aes(xmin = ymd(\"2018-07-29\"), xmax = ymd(\"2018-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2019-07-01\"), xmax = ymd(\"2019-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2020-07-01\"), xmax = ymd(\"2020-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2021-07-01\"), xmax = ymd(\"2021-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2022-07-01\"), xmax = ymd(\"2022-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2023-07-01\"), xmax = ymd(\"2023-08-11\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = flatorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  with_outer_glow(annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Flathead River, MT\", hjust = 0, vjust = 1), colour = \"white\", expand = 10) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[4], fill = NA, linewidth = 1.5)\n                     )\n# greyscale\npfl2 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, group = site_name), color = \"grey\") +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"black\", size = 1) +\n  annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Flathead River\", hjust = 0, vjust = 1) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = \"black\"))\n\n\n### YELLOWSTONE\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Shields River\", date &gt;= date(\"2016-06-01\"), date &lt;= date(\"2023-11-01\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = yellorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Shields River\", date &gt;= date(\"2016-06-01\"), date &lt;= date(\"2023-11-01\"))\n# color\npye1 &lt;- ggplot() +\n  geom_rect(aes(xmin = ymd(\"2016-07-01\"), xmax = ymd(\"2016-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2017-07-01\"), xmax = ymd(\"2017-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2018-07-01\"), xmax = ymd(\"2018-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2019-07-01\"), xmax = ymd(\"2019-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2020-07-01\"), xmax = ymd(\"2020-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2021-07-01\"), xmax = ymd(\"2021-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2022-07-01\"), xmax = ymd(\"2022-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2023-07-01\"), xmax = ymd(\"2023-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = yellorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  with_outer_glow(annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Yellowstone River, MT\", hjust = 0, vjust = 1), colour = \"white\", expand = 10) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[5], fill = NA, linewidth = 1.5)\n                     )\n# greyscale\npye2 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, group = site_name), color = \"grey\") +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"black\", size = 1) +\n  annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Yellowstone River, MT\", hjust = 0, vjust = 1) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = \"black\"))\n\n\n### SNAKE\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Snake River\", date &gt;= date(\"2016-06-01\"), date &lt;= date(\"2023-10-03\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = snakeorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Snake River\", date &gt;= date(\"2016-06-01\"), date &lt;= date(\"2023-10-03\"))\n# color\npsn1 &lt;- ggplot() +\n  geom_rect(aes(xmin = ymd(\"2016-07-01\"), xmax = ymd(\"2016-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2017-07-01\"), xmax = ymd(\"2017-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2018-07-01\"), xmax = ymd(\"2018-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2019-07-01\"), xmax = ymd(\"2019-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2020-07-01\"), xmax = ymd(\"2020-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2021-07-01\"), xmax = ymd(\"2021-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2022-07-01\"), xmax = ymd(\"2022-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2023-07-01\"), xmax = ymd(\"2023-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = snakeorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  with_outer_glow(annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Snake River, WY\", hjust = 0, vjust = 1), colour = \"white\", expand = 10) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[6], fill = NA, linewidth = 1.5)\n                     )\n# greyscale\npsn2 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, group = site_name), color = \"grey\") +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"black\", size = 1) +\n  annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Snake River, WY\", hjust = 0, vjust = 1) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = \"black\"))\n\n\n### DONNER BLITZEN\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Donner Blitzen\") %&gt;%\n  mutate(site_name = factor(site_name, levels = donnerorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Donner Blitzen\", date &gt;= date(\"2019-07-15\"), date &lt;= as_date(\"2022-10-30\"))\n# color\npdb1 &lt;- ggplot() +\n  geom_rect(aes(xmin = ymd(\"2019-07-15\"), xmax = ymd(\"2019-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2020-07-01\"), xmax = ymd(\"2020-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2021-07-01\"), xmax = ymd(\"2021-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2022-07-01\"), xmax = ymd(\"2022-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = donnerorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  with_outer_glow(annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Donner und Blitzen River, OR\", hjust = 0, vjust = 1), colour = \"white\", expand = 10) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[7], fill = NA, linewidth = 1.5)\n                     )\n# greyscale\npdb2 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, group = site_name), color = \"grey\") +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"black\", size = 1) +\n  annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Donner und Blitzen River\", hjust = 0, vjust = 1) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = \"black\"))\n\n\nGenerate combined plot\n\n\nCode\nannotate_figure(egg::ggarrange(pwb1, pst1, ppa1, pfl1, pye1, psn1, pdb1, ncol = 1), left = \"log(Yield, mm/day)\")\n\n\n\n\n\n\n\n\n\nWrite to file\n\n\nCode\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/EcoD_timeseries_new_noborder.jpg\", width = 5, height = 11, units = \"in\", res = 1000)\nannotate_figure(egg::ggarrange(pwb1, pst1, ppa1, pfl1, pye1, psn1, pdb1, ncol = 1), left = \"log(Yield, mm/day)\")\ndev.off()\n\n\n\n\n3.3.2.2 Summer 2020\nPlot time series just for summer 2020, for more detailed view\n\n\nCode\npolycol &lt;- \"grey90\"\nmycols &lt;- brewer.pal(7, \"Set2\")\n\n### WEST BROOK\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"West Brook\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = wborder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"West Brook\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\"))\n# same yaxis scale as main time series\npwb1 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = wborder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 7, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[1], fill = NA, linewidth = 1.5)\n                     )\n\n### STAUNTON RIVER\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Staunton River\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = stauntorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Staunton River\", , date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\"))\n# color\npst1 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = stauntorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 7, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[2], fill = NA, linewidth = 1.5)\n                     )\n\n### PAINE RUN\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Paine Run\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = paineorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Paine Run\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\"))\n# color\nppa1 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = paineorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 7, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[3], fill = NA, linewidth = 1.5)\n                     )\n\n### FLATHEAD\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Flathead\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = flatorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Flathead\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\"))\n# color\npfl1 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = flatorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 7, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[4], fill = NA, linewidth = 1.5)\n                     )\n\n### YELLOWSTONE\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Shields River\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = yellorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Shields River\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\"))\n# color\npye1 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = yellorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 7, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[5], fill = NA, linewidth = 1.5)\n                     )\n\n### SNAKE\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Snake River\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = snakeorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Snake River\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\"))\n# color\npsn1 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = snakeorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 7, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[6], fill = NA, linewidth = 1.5)\n                     )\n\n### DONNER BLITZEN\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Donner Blitzen\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = donnerorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Donner Blitzen\", date &gt;= date(\"2020-07-01\"), date &lt;= date(\"2020-09-30\"))\n# color\npdb1 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = donnerorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 7, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[7], fill = NA, linewidth = 1.5)\n                     )\nannotate_figure(egg::ggarrange(pwb1, pst1, ppa1, pfl1, pye1, psn1, pdb1, ncol = 1))\n\n\n\n\n\n\n\n\n\nWrite to file\n\n\nCode\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/EcoD_timeseries_2020only.jpg\", width = 2, height = 11, units = \"in\", res = 1000)\nannotate_figure(egg::ggarrange(pwb1, pst1, ppa1, pfl1, pye1, psn1, pdb1, ncol = 1))\ndev.off()\n\n\n\n\n3.3.2.3 Summer range\nCreate function to plot interannual distribution of streamflow values, annual distributions of streamflow values, and scatterplot plot of\n\n\nCode\nportfolioplot &lt;- function(bas, orderr, wtryrs) {\n  # filter data\n  tempdat &lt;- dat_clean %&gt;% \n    filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% wtryrs) %&gt;%\n    mutate(site_name = factor(site_name, levels = orderr))\n  nsites &lt;- length(unique(tempdat$site_name))\n  tempdat_big &lt;- dat_clean_big %&gt;% filter(basin == bas, !is.na(logYield), Month %in% c(7:9), WaterYear %in% unique(tempdat$WaterYear))\n\n  # calculate variability for reference gage\n  varbig &lt;- tempdat_big %&gt;% \n    group_by(WaterYear) %&gt;% \n    summarize(bigrange = range(logYield)[2]-range(logYield)[1],\n              bigsd = sd(logYield),\n              bigvar = var(logYield)) %&gt;%\n    ungroup()\n\n  # interannual\n  pint &lt;- ggplot() + \n    geom_density(data = tempdat, aes(x = logYield, y = ..scaled.., color = site_name, fill = site_name), size = 0.8) +\n    scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n    scale_fill_manual(values = alpha(cet_pal(nsites, name = \"i1\"), 0.1)) +\n    geom_density(data = tempdat_big, aes(x = logYield, y = ..scaled..), color = \"grey40\", fill = alpha(\"grey40\", 0.2), size = 0.8) +\n    xlab(\"Summer log(Yield, mm/day)\") + ylab(\"Scaled density\") +\n    theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), \n                       axis.text = element_text(color = \"black\"), legend.position = \"none\")\n  \n  return(pint)\n}\n\n\nPlot distributions of summer log(yield) for all basins\n\n\nCode\n# no borders\negg::ggarrange(\n  # West Brook\n  portfolioplot(bas = \"West Brook\", orderr = wborder, wtryrs = c(2020:2024)) + \n    theme(axis.title = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), \n          plot.margin = margin(t = 1, r = 7, b = 2, l = 1)),\n  # Staunton\n  portfolioplot(bas = \"Staunton River\", orderr = stauntorder, wtryrs = c(2019:2022)) + \n    theme(axis.title = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), \n          plot.margin = margin(t = 1, r = 7, b = 2, l = 1)),\n  # Paine\n  portfolioplot(bas = \"Paine Run\", orderr = paineorder, wtryrs = c(2019:2022)) + \n    theme(axis.title = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), \n          plot.margin = margin(t = 1, r = 7, b = 2, l = 1)),\n  # Flathead\n  portfolioplot(bas = \"Flathead\", orderr = flatorder, wtryrs = c(2018:2024)) + \n    theme(axis.title = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), \n          plot.margin = margin(t = 1, r = 7, b = 2, l = 1)),\n  # Yellowstone\n  portfolioplot(bas = \"Shields River\", orderr = yellorder, wtryrs = c(2016:2020,2022:2024)) + \n    theme(axis.title = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), \n          plot.margin = margin(t = 1, r = 7, b = 2, l = 1)),\n  # Snake\n  portfolioplot(bas = \"Snake River\", orderr = snakeorder, wtryrs = c(2016:2024)) + \n    theme(axis.title = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), \n          plot.margin = margin(t = 1, r = 7, b = 2, l = 1)),\n  # Donner Blitzen\n  portfolioplot(bas = \"Donner Blitzen\", orderr = donnerorder, wtryrs = c(2016:2024)) + \n    theme(axis.title = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), \n          plot.margin = margin(t = 1, r = 7, b = 2, l = 1)),\n  nrow = 7)\n\n\n\n\n\n\n\n\n\nCode\n#annotate_figure(p, left = \"Density\")\n\n# jpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/EcoD_summerdensity_all_noborder_wide.jpg\", width = 2.5, height = 11, units = \"in\", res = 1000)\n# annotate_figure(p1, left = \"Density\")\n# dev.off()\n\n\n\n\n\n3.3.3 Presentation figs\nTime series plots, West Brook and Flathead\n\n\nCode\n### WEST BROOK\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"West Brook\") %&gt;%\n  mutate(site_name = factor(site_name, levels = wborder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"West Brook\", date &gt;= date(\"2020-01-01\"), date &lt;= date(\"2025-01-03\"))\n# color\npwb1 &lt;- ggplot() +\n  geom_rect(aes(xmin = ymd(\"2020-07-01\"), xmax = ymd(\"2020-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2021-07-01\"), xmax = ymd(\"2021-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2022-07-01\"), xmax = ymd(\"2022-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2023-07-01\"), xmax = ymd(\"2023-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_rect(aes(xmin = ymd(\"2024-07-01\"), xmax = ymd(\"2024-09-30\"), ymin = -Inf, ymax = Inf), fill = polycol, color = NA) +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = wborder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  ylim(-3,2) +\n  annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"West Brook, MA\", hjust = 0, vjust = 1) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), \n                     axis.text = element_text(color = \"black\")#, panel.border = element_rect(colour = mycols[1], fill = NA, linewidth = 1.5)\n                     )\n\n### FLATHEAD\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Flathead\", date &gt;= date(\"2018-07-29\"), date &lt;= date(\"2023-08-11\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = flatorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Flathead\", date &gt;= date(\"2018-07-29\"), date &lt;= date(\"2023-08-11\"))\n# color\npfl1 &lt;- ggplot() +\n  geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = flatorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  ylim(-3,2) +\n  annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Flathead River\", hjust = 0, vjust = 1) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = \"black\"))\n\np &lt;- annotate_figure(egg::ggarrange(pwb1, pfl1 + ylim(-2.4,1.72), ncol = 1), left = \"log(Yield, mm/day)\")\nprint(p)\n\n\n\n\n\n\n\n\n\nCode\n# jpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/EcoD_timeseries_WBFlat.jpg\", width = 8, height = 5, units = \"in\", res = 1000)\n# p\n# dev.off()\n\n\nNo headwater gages\n\n\nCode\n### WEST BROOK\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"West Brook\") %&gt;%\n  mutate(site_name = factor(site_name, levels = wborder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"West Brook\", date &gt;= date(\"2020-01-01\"), date &lt;= date(\"2025-01-03\"))\n# color\npwb1_nlg &lt;- ggplot() +\n  #geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = wborder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  ylim(-3,2) +\n  annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"The West Brook\", hjust = 0, vjust = 1) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = \"black\"))\n\n### FLATHEAD\ntempdat &lt;- dat_clean %&gt;% \n  filter(basin == \"Flathead\", date &gt;= date(\"2018-07-29\"), date &lt;= date(\"2023-08-11\")) %&gt;%\n  mutate(site_name = factor(site_name, levels = flatorder))\ntempdat &lt;- fill_missing_dates(tempdat, dates = date, groups = site_name, pad_ends = FALSE)  \nnsites &lt;- length(unique(tempdat$site_name))\ntempdat_big &lt;- dat_clean_big %&gt;% filter(basin == \"Flathead\", date &gt;= date(\"2018-07-29\"), date &lt;= date(\"2023-08-11\"))\n# color\npfl1_nlg &lt;- ggplot() +\n  #geom_line(data = tempdat, aes(x = date, y = logYield, color = factor(site_name, levels = flatorder))) +\n  geom_line(data = tempdat_big, aes(x = date, y = logYield), color = \"grey40\") +\n  scale_color_manual(values = cet_pal(nsites, name = \"i1\")) +\n  ylim(-2.4,1.72) +\n  annotate(\"text\", x = min(c(tempdat_big$date, tempdat$date), na.rm = TRUE), y = max(c(tempdat_big$logYield, tempdat$logYield), na.rm = TRUE), label = \"Flathead River\", hjust = 0, vjust = 1) +\n  scale_x_date(expand = c(0.02,0.02)) + #scale_y_continuous(expand = c(0,0)) +\n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\", \n                     axis.title = element_blank(), plot.margin = margin(t = 1, r = 5, b = 2, l = 2), axis.text = element_text(color = \"black\"))\n\np &lt;- annotate_figure(egg::ggarrange(pwb1_nlg, pfl1_nlg, ncol = 1), left = \"log(Yield, mm/day)\")\nprint(p)\n\n\n\n\n\n\n\n\n\nCode\n# jpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/EcoD_timeseries_WBFlat_nolittle.jpg\", width = 8, height = 5, units = \"in\", res = 1000)\n# p\n# dev.off()\n\n\nSummer log(yield) distributions for West Brook and Flathead\n\n\nCode\negg::ggarrange(portfolioplot(bas = \"West Brook\", orderr = wborder, wtryrs = c(2020:2024)) + theme(axis.title = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), plot.margin = margin(t = 1, r = 1, b = 2, l = 1)),\n               portfolioplot(bas = \"Flathead\", orderr = flatorder, wtryrs = c(2018:2024)) + theme(axis.title = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), plot.margin = margin(t = 1, r = 1, b = 2, l = 1)),\n               nrow = 2)\n\n\n\n\n\n\n\n\n\nCode\n# print(p)\n# jpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/EcoD_summerdensity_WBFlat.jpg\", width = 2.75, height = 5, units = \"in\", res = 1000)\n# p\n# dev.off()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Spatiotemporal Variation</span>"
    ]
  },
  {
    "objectID": "SpaceTimeVar.html#repeatability",
    "href": "SpaceTimeVar.html#repeatability",
    "title": "3  Spatiotemporal Variation",
    "section": "3.4 Repeatability",
    "text": "3.4 Repeatability\nHow repeatable is summer monthly mean flow among sites within headwater networks? I.e., are sites with higher than average yield always higher than average, or do “lines cross” frequently?\nCalculate reputability (R) using the rptR package (Stoffel et al. 2017). Also see related papers by Nakagawa and Schielzeth. Repeatibility is calculated on mean monthly flow z-scored by month and year, which removes the effect of monthly and interannual variation in water availability. Results are very similar to models fit using raw yield data with big G flow as a fixed effect.\n\n\nCode\nbasins &lt;- c(\"West Brook\", \"Paine Run\", \"Staunton River\", \"Flathead\", \"Shields River\", \"Snake River\", \"Donner Blitzen\")\nrptlist_summer &lt;- list()\nrptlist_summer_cov &lt;- list()\n\n# summer only\nfor (i in 1:length(basins)) {\n  # daily data\n  td &lt;- dat_clean %&gt;% filter(basin == basins[i], Month %in% c(7:9))\n  # summarize by month\n  td2 &lt;- td %&gt;%\n    group_by(subbasin, site_name, designation, CalendarYear, Month, MonthName) %&gt;%\n    summarize(logYield = mean(logYield)) %&gt;%\n    ungroup()\n  # big g data\n  tempdat_big &lt;- dat_clean_big %&gt;% \n    filter(basin == basins[i], date &gt;= min(td$date), date &lt;= max(td$date)) %&gt;%\n    group_by(site_name, CalendarYear, Month, MonthName) %&gt;%\n    summarize(logYield = mean(logYield)) %&gt;%\n    ungroup()\n  # join data\n  joined &lt;- td2 %&gt;% \n    left_join(tempdat_big %&gt;% select(CalendarYear, MonthName, logYield) %&gt;% rename(logYield_big = logYield)) %&gt;%\n    group_by(CalendarYear, Month) %&gt;%\n    mutate(logYield_z = scale(logYield)) %&gt;%\n    ungroup()\n  # calculate repeatability\n  rpt_znull &lt;- rptGaussian(logYield_z ~ 1 + (1|site_name), data = joined, grname = \"site_name\")\n  rpt_cov &lt;- rptGaussian(logYield ~ logYield_big + (1|site_name), data = joined, grname = \"site_name\")\n  # store in list\n  rptlist_summer[[i]] &lt;- tibble(basin =  basins[i], rboot = rpt_znull$R_boot$site_name, type = \"zscore\")\n  rptlist_summer_cov[[i]] &lt;- tibble(basin =  basins[i], rboot = rpt_cov$R_boot$site_name, type = \"cov\")\n}\nrpttib_summer &lt;- bind_rows(do.call(rbind, rptlist_summer), do.call(rbind, rptlist_summer_cov))\n\n\nGenerally, repeatibility appears to be greater for snowmelt-dominated basins, particularly in the summer. The “all data” plot is more difficult to interpret as we mostly have seasonal data in the snowmelt basins, particularly the Yellowstone and Snake. In actuality, I would expect the opposite pattern if we had complete time series data for all basins: low reputability for snowmelt basins and high repeatability for rainfall basins (for the same reasons as bow tie vs. wedge).\n\n\nCode\nrpttib_summer %&gt;% \n  filter(basin != \"Donner Blitzen\", type == \"zscore\") %&gt;%\n  mutate(basin = ifelse(basin == \"Paine Run\", \"Paine\",\n                        ifelse(basin == \"Staunton River\", \"Staunton\", \n                               ifelse(basin == \"Snake River\", \"Snake\", \n                                      ifelse(basin == \"Shields River\", \"Yellowstone\", basin))))) %&gt;%\n  mutate(basin = factor(basin, levels = rev(c(\"West Brook\", \"Staunton\", \"Paine\", \"Flathead\", \"Yellowstone\", \"Snake\")))) %&gt;%\n  ggplot(aes(x = rboot, y = basin)) +\n  geom_density_ridges(quantile_lines = TRUE, quantiles = 2, aes(fill = basin)) +\n  scale_fill_manual(values = rev(brewer.pal(6, \"Set2\"))) +\n  xlim(0,1) +\n  theme_bw() + theme(legend.position = \"none\", panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(color = \"black\")) +\n  xlab(\"Bootstrapped repeatability (R)\") + ylab(\"Basin\") + #ggtitle(\"Summer only (JAS)\") +\n  geom_text(data = rpttib_summer %&gt;% filter(basin != \"Donner Blitzen\", type == \"zscore\") %&gt;%\n  mutate(basin = ifelse(basin == \"Paine Run\", \"Paine\",\n                        ifelse(basin == \"Staunton River\", \"Staunton\", \n                               ifelse(basin == \"Snake River\", \"Snake\", \n                                      ifelse(basin == \"Shields River\", \"Yellowstone\", basin)))))%&gt;% group_by(basin) %&gt;% summarise(rboot = median(rboot)),\n            aes(label = round(rboot, digits = 2)), position = position_nudge(y = -0.15), colour = \"black\", size=3.5) \n\n\n\n\n\n\n\n\n\nWrite summer repeatability figure to file\n\n\nCode\njpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/MeanMonthlyFlow_SummerRepeatability.jpg\", width = 4, height = 3.5, units = \"in\", res = 1000)\nrpttib_summer %&gt;% \n  filter(basin != \"Donner Blitzen\", type == \"zscore\") %&gt;%\n  mutate(basin = ifelse(basin == \"Paine Run\", \"Paine\",\n                        ifelse(basin == \"Staunton River\", \"Staunton\", \n                               ifelse(basin == \"Snake River\", \"Snake\", \n                                      ifelse(basin == \"Shields River\", \"Yellowstone\", basin))))) %&gt;%\n  mutate(basin = factor(basin, levels = rev(c(\"West Brook\", \"Staunton\", \"Paine\", \"Flathead\", \"Yellowstone\", \"Snake\")))) %&gt;%\n  ggplot(aes(x = rboot, y = basin)) +\n  geom_density_ridges(quantile_lines = TRUE, quantiles = 2, aes(fill = basin)) +\n  scale_fill_manual(values = rev(brewer.pal(6, \"Set2\"))) +\n  xlim(0,1) +\n  theme_bw() + theme(legend.position = \"none\", panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(color = \"black\")) +\n  xlab(\"Bootstrapped repeatability (R)\") + ylab(\"Basin\") + #ggtitle(\"Summer only (JAS)\") +\n  geom_text(data = rpttib_summer %&gt;% filter(basin != \"Donner Blitzen\", type == \"zscore\") %&gt;%\n  mutate(basin = ifelse(basin == \"Paine Run\", \"Paine\",\n                        ifelse(basin == \"Staunton River\", \"Staunton\", \n                               ifelse(basin == \"Snake River\", \"Snake\", \n                                      ifelse(basin == \"Shields River\", \"Yellowstone\", basin)))))%&gt;% group_by(basin) %&gt;% summarise(rboot = median(rboot)),\n            aes(label = round(rboot, digits = 2)), position = position_nudge(y = -0.15), colour = \"black\", size=3.5) \ndev.off()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Spatiotemporal Variation</span>"
    ]
  },
  {
    "objectID": "SpaceTimeVar.html#fluvial-synchrograms",
    "href": "SpaceTimeVar.html#fluvial-synchrograms",
    "title": "3  Spatiotemporal Variation",
    "section": "3.5 Fluvial synchrograms",
    "text": "3.5 Fluvial synchrograms\nUse modified fluvial synchrograms to graphically explore the geography of spatial heterogeneity in summer streamflow (sensu Larsen et al. 2018 Ecology Letters). How does time series similarity (distance) among headwater sites change as a function of euclidean, watercourse, and flow-connected geographic distance? Given spatial dependencies in river networks (e.g., Peterson et al. 2013 Ecology Letters), we would expect flow regimes to be more similar among flow-connected sites located in close proximity (i.e., increasing time series distance with increasing geographic distance).\n\n3.5.1 Spatial data\n\n3.5.1.1 Flowline\nCrop flow line to area of interest:\n\n\nCode\n# West Brook\nmysheds &lt;- read_sf(dsn = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds\", layer = \"Mass_Watersheds\")\nmysheds &lt;- mysheds[mysheds$site_id == \"WBR\",]\nmynet &lt;- read_sf(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams\", layer = \"Mass_Streams\")\nst_crs(mynet) &lt;- st_crs(mysheds)\nmynet &lt;- st_intersection(mynet, mysheds)\nmynet &lt;- st_transform(mynet, crs = \"+proj=utm +zone=18\")\nst_write(mynet, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial/Mass_Streams_crop.shp\", append = FALSE)\n\n# Staunton\nmysheds &lt;- read_sf(dsn = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds\", layer = \"Shen_Watersheds\")\nmysheds &lt;- mysheds[mysheds$site_id == \"SR_10FL\",]\nmynet &lt;- read_sf(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams\", layer = \"Shen_Streams\")\nst_crs(mynet) &lt;- st_crs(mysheds)\nmynet &lt;- st_intersection(mynet, mysheds)\nmynet &lt;- st_transform(mynet, crs = \"+proj=utm +zone=18\")\nst_write(mynet, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial/Staunton_Streams_crop.shp\", append = FALSE)\n\n# Paine Run\nmysheds &lt;- read_sf(dsn = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds\", layer = \"Shen_Watersheds\")\nmysheds &lt;- mysheds[mysheds$site_id == \"PA_10FL\",]\nmynet &lt;- read_sf(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams\", layer = \"Shen_Streams\")\nst_crs(mynet) &lt;- st_crs(mysheds)\nmynet &lt;- st_intersection(mynet, mysheds)\nmynet &lt;- st_transform(mynet, crs = \"+proj=utm +zone=18\")\nst_write(mynet, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial/Paine_Streams_crop.shp\", append = FALSE)\n\n# Flathead\nmysheds &lt;- read_sf(dsn = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds\", layer = \"Flat_Watersheds\")\nmysheds &lt;- mysheds[mysheds$site_id == \"NFF\",]\nmynet &lt;- read_sf(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams\", layer = \"Flat_Streams\")\nst_crs(mynet) &lt;- st_crs(mysheds)\nmynet &lt;- st_intersection(mynet, mysheds)\nmynet &lt;- st_transform(mynet, crs = \"+proj=utm +zone=18\")\nst_write(mynet, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial/Flat_Streams_crop.shp\", append = FALSE)\n\n# Yellowstone\nmysheds &lt;- read_sf(dsn = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds\", layer = \"Shields_Watersheds\")\nmysheds &lt;- mysheds[mysheds$site_id == \"SRS\",]\nmynet &lt;- read_sf(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams\", layer = \"Shields_Streams\")\nst_crs(mynet) &lt;- st_crs(mysheds)\nmynet &lt;- st_intersection(mynet, mysheds)\nmynet &lt;- st_transform(mynet, crs = \"+proj=utm +zone=18\")\nst_write(mynet, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial/Yell_Streams_crop.shp\", append = FALSE)\n\n# Snake\nmysheds &lt;- read_sf(dsn = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds\", layer = \"Snake_Watersheds\")\nmysheds &lt;- mysheds[mysheds$site_id == \"SP11\",]\nmynet &lt;- read_sf(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams\", layer = \"Snake_Streams\")\nst_crs(mynet) &lt;- st_crs(mysheds)\nmynet &lt;- st_intersection(mynet, mysheds)\nmynet &lt;- st_transform(mynet, crs = \"+proj=utm +zone=18\")\nst_write(mynet, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial/Snake_Streams_crop.shp\", append = FALSE)\n\n# Donner-Blitzen\nmysheds &lt;- read_sf(dsn = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds\", layer = \"Oreg_Watersheds\")\nmysheds &lt;- mysheds[mysheds$site_id == \"DBF\",]\nmynet &lt;- read_sf(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams\", layer = \"Oreg_Streams\")\nst_crs(mynet) &lt;- st_crs(mysheds)\nmynet &lt;- st_intersection(mynet, mysheds)\nmynet &lt;- st_transform(mynet, crs = \"+proj=utm +zone=18\")\nst_write(mynet, \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial/DonnerBlitzen_Streams_crop.shp\", append = FALSE)\n\n\nConvert flowline to riverdist network object:\n\n\nCode\n# West Brook\nflowline &lt;- line2network(path = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial\", layer = \"Mass_Streams_crop\")\n\n\n\n Units: metre \n\n Removed 2 segments with lengths shorter than the connectivity tolerance. \n\n\nCode\n# plot(flowline)\n# zoomtoseg(seg = c(4), rivers = flowline)\n# showends(seg = 4, rivers = flowline)\nflowline_wb &lt;- setmouth(seg = 4, vert = 1, rivers = flowline)\n\n# Staunton\nflowline &lt;- line2network(path = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial\", layer = \"Staunton_Streams_crop\")\n\n\n\n Units: metre \n\n\nCode\n# plot(flowline)\n# zoomtoseg(seg = c(2), rivers = flowline)\n# showends(seg = 2, rivers = flowline)\nflowline_st &lt;- setmouth(seg = 2, vert = 29, rivers = flowline)\n\n# Paine\nflowline &lt;- line2network(path = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial\", layer = \"Paine_Streams_crop\")\n\n\n\n Units: metre \n\n Removed 1 segments with lengths shorter than the connectivity tolerance. \n\n\nCode\n# plot(flowline)\n# zoomtoseg(seg = c(6), rivers = flowline)\n# showends(seg = 6, rivers = flowline)\nflowline_pa &lt;- setmouth(seg = 6, vert = 23, rivers = flowline)\n\n# Flathead\nflowline &lt;- line2network(path = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial\", layer = \"Flat_Streams_crop\")\n\n\n\n Units: metre \n\n Removed 28 segments with lengths shorter than the connectivity tolerance. \n\n\nCode\n# plot(flowline)\n# zoomtoseg(seg = c(6, 46, 59, 7), rivers = flowline)\n# showends(seg = 7, rivers = flowline)\nflowline_fl &lt;- setmouth(seg = 7, vert = 82, rivers = flowline)\n\n# Yellowstone\nflowline &lt;- line2network(path = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial\", layer = \"Yell_Streams_crop\")\n\n\n\n Units: metre \n\n Removed 2 segments with lengths shorter than the connectivity tolerance. \n\n\nCode\n# plot(flowline)\n# zoomtoseg(seg = c(6), rivers = flowline)\n# showends(seg = 6, rivers = flowline)\nflowline_ye &lt;- setmouth(seg = 6, vert = 197, rivers = flowline)\n\n# Snake\nflowline &lt;- line2network(path = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial\", layer = \"Snake_Streams_crop\")\n\n\n\n Units: metre \n\n Removed 3 segments with lengths shorter than the connectivity tolerance. \n\n\nCode\n# plot(flowline)\n# zoomtoseg(seg = c(22), rivers = flowline)\n# showends(seg = 22, rivers = flowline)\nflowline_sn &lt;- setmouth(seg = 22, vert = 88, rivers = flowline)\n\n# Donner Blitzen\nflowline &lt;- line2network(path = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/FluvialSynch/Spatial\", layer = \"DonnerBlitzen_Streams_crop\")\n\n\n\n Units: metre \n\n Removed 4 segments with lengths shorter than the connectivity tolerance. \n\n\nCode\n# plot(flowline)\n# zoomtoseg(seg = c(37,206, 209, 38), rivers = flowline)\n# showends(seg = 38, rivers = flowline)\nflowline_db &lt;- setmouth(seg = 38, vert = 20, rivers = flowline)\n\n\n\n\n3.5.1.2 Sites\nConvert focal sites to riverpoints, snapped to networks\n\nWest Brook\n\n\nCode\nmysites_wb &lt;- siteinfo %&gt;% filter(subbasin == \"West Brook\", site_name %in% unique(dat_clean$site_name))\nmysites_wb_sp &lt;- st_as_sf(mysites_wb, coords = c(\"long\", \"lat\"), crs = 4326)\nmysites_wb_sp &lt;- st_transform(mysites_wb_sp, crs = st_crs(mynet))\nmysites_wb_sp_xy &lt;- xy2segvert(x = st_coordinates(mysites_wb_sp)[,1], y = st_coordinates(mysites_wb_sp)[,2], rivers = flowline_wb)\nplot(flowline_wb)\nriverpoints(seg = mysites_wb_sp_xy$seg, vert = mysites_wb_sp_xy$vert, rivers = flowline_wb, pch = 16, col = \"blue\")\n\n\n\n\n\n\n\n\n\n\n\nStaunton\n\n\nCode\nmysites_st &lt;- siteinfo %&gt;% filter(subbasin == \"Staunton River\", site_name %in% unique(dat_clean$site_name))\nmysites_st_sp &lt;- st_as_sf(mysites_st, coords = c(\"long\", \"lat\"), crs = 4326)\nmysites_st_sp &lt;- st_transform(mysites_st_sp, crs = st_crs(mynet))\nmysites_st_sp_xy &lt;- xy2segvert(x = st_coordinates(mysites_st_sp)[,1], y = st_coordinates(mysites_st_sp)[,2], rivers = flowline_st)\nplot(flowline_st)\nriverpoints(seg = mysites_st_sp_xy$seg, vert = mysites_st_sp_xy$vert, rivers = flowline_st, pch = 16, col = \"blue\")\n\n\n\n\n\n\n\n\n\n\n\nPaine\n\n\nCode\nmysites_pa &lt;- siteinfo %&gt;% filter(subbasin == \"Paine Run\", site_name %in% unique(dat_clean$site_name))\nmysites_pa_sp &lt;- st_as_sf(mysites_pa, coords = c(\"long\", \"lat\"), crs = 4326)\nmysites_pa_sp &lt;- st_transform(mysites_pa_sp, crs = st_crs(mynet))\nmysites_pa_sp_xy &lt;- xy2segvert(x = st_coordinates(mysites_pa_sp)[,1], y = st_coordinates(mysites_pa_sp)[,2], rivers = flowline_pa)\nplot(flowline_pa)\nriverpoints(seg = mysites_pa_sp_xy$seg, vert = mysites_pa_sp_xy$vert, rivers = flowline_pa, pch = 16, col = \"blue\")\n\n\n\n\n\n\n\n\n\n\n\nFlathead\n\n\nCode\nmysites_fl &lt;- siteinfo %&gt;% filter(basin == \"Flathead\", site_name %in% unique(dat_clean$site_name))\nmysites_fl_sp &lt;- st_as_sf(mysites_fl, coords = c(\"long\", \"lat\"), crs = 4326)\nmysites_fl_sp &lt;- st_transform(mysites_fl_sp, crs = st_crs(mynet))\nmysites_fl_sp_xy &lt;- xy2segvert(x = st_coordinates(mysites_fl_sp)[,1], y = st_coordinates(mysites_fl_sp)[,2], rivers = flowline_fl)\nplot(flowline_fl)\nriverpoints(seg = mysites_fl_sp_xy$seg, vert = mysites_fl_sp_xy$vert, rivers = flowline_fl, pch = 16, col = \"blue\")\n\n\n\n\n\n\n\n\n\n\n\nYellowstone\n\n\nCode\nmysites_ye &lt;- siteinfo %&gt;% filter(subbasin == \"Shields River\", site_name %in% unique(dat_clean$site_name))\nmysites_ye_sp &lt;- st_as_sf(mysites_ye, coords = c(\"long\", \"lat\"), crs = 4326)\nmysites_ye_sp &lt;- st_transform(mysites_ye_sp, crs = st_crs(mynet))\nmysites_ye_sp_xy &lt;- xy2segvert(x = st_coordinates(mysites_ye_sp)[,1], y = st_coordinates(mysites_ye_sp)[,2], rivers = flowline_ye)\nplot(flowline_ye)\nriverpoints(seg = mysites_ye_sp_xy$seg, vert = mysites_ye_sp_xy$vert, rivers = flowline_ye, pch = 16, col = \"blue\")\n\n\n\n\n\n\n\n\n\n\n\nSnake\n\n\nCode\nmysites_sn &lt;- siteinfo %&gt;% filter(subbasin == \"Snake River\", site_name %in% unique(dat_clean$site_name))\nmysites_sn_sp &lt;- st_as_sf(mysites_sn, coords = c(\"long\", \"lat\"), crs = 4326)\nmysites_sn_sp &lt;- st_transform(mysites_sn_sp, crs = st_crs(mynet))\nmysites_sn_sp_xy &lt;- xy2segvert(x = st_coordinates(mysites_sn_sp)[,1], y = st_coordinates(mysites_sn_sp)[,2], rivers = flowline_sn)\nplot(flowline_sn)\nriverpoints(seg = mysites_sn_sp_xy$seg, vert = mysites_sn_sp_xy$vert, rivers = flowline_sn, pch = 16, col = \"blue\")\n\n\n\n\n\n\n\n\n\n\n\nDonner-Blitzen\n\n\nCode\nmysites_db &lt;- siteinfo %&gt;% filter(subbasin == \"Donner Blitzen\", site_name %in% unique(dat_clean$site_name))\nmysites_db_sp &lt;- st_as_sf(mysites_db, coords = c(\"long\", \"lat\"), crs = 4326)\nmysites_db_sp &lt;- st_transform(mysites_db_sp, crs = st_crs(mynet))\nmysites_db_sp_xy &lt;- xy2segvert(x = st_coordinates(mysites_db_sp)[,1], y = st_coordinates(mysites_db_sp)[,2], rivers = flowline_db)\nplot(flowline_db)\nriverpoints(seg = mysites_db_sp_xy$seg, vert = mysites_db_sp_xy$vert, rivers = flowline_db, pch = 16, col = \"blue\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.5.2 Pairwise distances\nCalculate pairwise geographic distances.\n\n3.5.2.1 Euclidean\n\n\nCode\n# West Brook\ndist_euclidean_wb &lt;- (st_distance(mysites_wb_sp, mysites_wb_sp)) / 1000\nattr(dist_euclidean_wb, \"units\") &lt;- NULL\nrow.names(dist_euclidean_wb) &lt;- mysites_wb$site_name\ncolnames(dist_euclidean_wb) &lt;- mysites_wb$site_name\ndist_euclidean_wb[upper.tri(dist_euclidean_wb, diag = TRUE)] &lt;- NA\nclass(dist_euclidean_wb) &lt;- \"matrix\"\n# dist_euclidean_wb\n\n# Stuanton\ndist_euclidean_st &lt;- (st_distance(mysites_st_sp, mysites_st_sp)) / 1000\nattr(dist_euclidean_st, \"units\") &lt;- NULL\nrow.names(dist_euclidean_st) &lt;- mysites_st$site_name\ncolnames(dist_euclidean_st) &lt;- mysites_st$site_name\ndist_euclidean_st[upper.tri(dist_euclidean_st, diag = TRUE)] &lt;- NA\nclass(dist_euclidean_st) &lt;- \"matrix\"\n# dist_euclidean_st\n\n# Paine\ndist_euclidean_pa &lt;- (st_distance(mysites_pa_sp, mysites_pa_sp)) / 1000\nattr(dist_euclidean_pa, \"units\") &lt;- NULL\nrow.names(dist_euclidean_pa) &lt;- mysites_pa$site_name\ncolnames(dist_euclidean_pa) &lt;- mysites_pa$site_name\ndist_euclidean_pa[upper.tri(dist_euclidean_pa, diag = TRUE)] &lt;- NA\nclass(dist_euclidean_pa) &lt;- \"matrix\"\n# dist_euclidean_pa\n\n# Flathead\ndist_euclidean_fl &lt;- (st_distance(mysites_fl_sp, mysites_fl_sp)) / 1000\nattr(dist_euclidean_fl, \"units\") &lt;- NULL\nrow.names(dist_euclidean_fl) &lt;- mysites_fl$site_name\ncolnames(dist_euclidean_fl) &lt;- mysites_fl$site_name\ndist_euclidean_fl[upper.tri(dist_euclidean_fl, diag = TRUE)] &lt;- NA\nclass(dist_euclidean_fl) &lt;- \"matrix\"\n# dist_euclidean_fl\n\n\n# Yellowstone\ndist_euclidean_ye &lt;- (st_distance(mysites_ye_sp, mysites_ye_sp)) / 1000\nattr(dist_euclidean_ye, \"units\") &lt;- NULL\nrow.names(dist_euclidean_ye) &lt;- mysites_ye$site_name\ncolnames(dist_euclidean_ye) &lt;- mysites_ye$site_name\ndist_euclidean_ye[upper.tri(dist_euclidean_ye, diag = TRUE)] &lt;- NA\nclass(dist_euclidean_ye) &lt;- \"matrix\"\n# dist_euclidean_ye\n\n# Snake\ndist_euclidean_sn &lt;- (st_distance(mysites_sn_sp, mysites_sn_sp)) / 1000\nattr(dist_euclidean_sn, \"units\") &lt;- NULL\nrow.names(dist_euclidean_sn) &lt;- mysites_sn$site_name\ncolnames(dist_euclidean_sn) &lt;- mysites_sn$site_name\ndist_euclidean_sn[upper.tri(dist_euclidean_sn, diag = TRUE)] &lt;- NA\nclass(dist_euclidean_sn) &lt;- \"matrix\"\n# dist_euclidean_sn\n\n# Donner Blitzen\ndist_euclidean_db &lt;- (st_distance(mysites_db_sp, mysites_db_sp)) / 1000\nattr(dist_euclidean_db, \"units\") &lt;- NULL\nrow.names(dist_euclidean_db) &lt;- mysites_db$site_name\ncolnames(dist_euclidean_db) &lt;- mysites_db$site_name\ndist_euclidean_db[upper.tri(dist_euclidean_db, diag = TRUE)] &lt;- NA\nclass(dist_euclidean_db) &lt;- \"matrix\"\n# dist_euclidean_db\n\n\n\n\n3.5.2.2 Watercourse\n\n\nCode\n# West Brook\ndist_watercourse_wb &lt;- riverdistancemat(mysites_wb_sp_xy$seg, mysites_wb_sp_xy$vert, flowline_wb) / 1000\nrow.names(dist_watercourse_wb) &lt;- mysites_wb$site_name\ncolnames(dist_watercourse_wb) &lt;- mysites_wb$site_name\ndist_watercourse_wb[upper.tri(dist_watercourse_wb, diag = TRUE)] &lt;- NA\n# dist_watercourse_wb\n\n# Staunton\ndist_watercourse_st &lt;- riverdistancemat(mysites_st_sp_xy$seg, mysites_st_sp_xy$vert, flowline_st) / 1000\nrow.names(dist_watercourse_st) &lt;- mysites_st$site_name\ncolnames(dist_watercourse_st) &lt;- mysites_st$site_name\ndist_watercourse_st[upper.tri(dist_watercourse_st, diag = TRUE)] &lt;- NA\n# dist_watercourse_st\n\n# Paine\ndist_watercourse_pa &lt;- riverdistancemat(mysites_pa_sp_xy$seg, mysites_pa_sp_xy$vert, flowline_pa) / 1000\nrow.names(dist_watercourse_pa) &lt;- mysites_pa$site_name\ncolnames(dist_watercourse_pa) &lt;- mysites_pa$site_name\ndist_watercourse_pa[upper.tri(dist_watercourse_pa, diag = TRUE)] &lt;- NA\n# dist_watercourse_pa\n\n# Flathead\ndist_watercourse_fl &lt;- riverdistancemat(mysites_fl_sp_xy$seg, mysites_fl_sp_xy$vert, flowline_fl) / 1000\nrow.names(dist_watercourse_fl) &lt;- mysites_fl$site_name\ncolnames(dist_watercourse_fl) &lt;- mysites_fl$site_name\ndist_watercourse_fl[upper.tri(dist_watercourse_fl, diag = TRUE)] &lt;- NA\n# dist_watercourse_fl\n\n# Yellowstone\ndist_watercourse_ye &lt;- riverdistancemat(mysites_ye_sp_xy$seg, mysites_ye_sp_xy$vert, flowline_ye) / 1000\nrow.names(dist_watercourse_ye) &lt;- mysites_ye$site_name\ncolnames(dist_watercourse_ye) &lt;- mysites_ye$site_name\ndist_watercourse_ye[upper.tri(dist_watercourse_ye, diag = TRUE)] &lt;- NA\n# dist_watercourse_ye\n\n# Snake\ndist_watercourse_sn &lt;- riverdistancemat(mysites_sn_sp_xy$seg, mysites_sn_sp_xy$vert, flowline_sn) / 1000\nrow.names(dist_watercourse_sn) &lt;- mysites_sn$site_name\ncolnames(dist_watercourse_sn) &lt;- mysites_sn$site_name\ndist_watercourse_sn[upper.tri(dist_watercourse_sn, diag = TRUE)] &lt;- NA\n# dist_watercourse_snake\n\n# Donner-Blitzen\ndist_watercourse_db &lt;- riverdistancemat(mysites_db_sp_xy$seg, mysites_db_sp_xy$vert, flowline_db) / 1000\nrow.names(dist_watercourse_db) &lt;- mysites_db$site_name\ncolnames(dist_watercourse_db) &lt;- mysites_db$site_name\ndist_watercourse_db[upper.tri(dist_watercourse_db, diag = TRUE)] &lt;- NA\n# dist_watercourse_db\n\n\n\n\n3.5.2.3 Flow-connected\n\n\nCode\n# West Brook\ndist_flowconn_wb &lt;- abs(upstreammat(mysites_wb_sp_xy$seg, mysites_wb_sp_xy$vert, flowline_wb, flowconnected = TRUE)) / 1000\nrow.names(dist_flowconn_wb) &lt;- mysites_wb$site_name\ncolnames(dist_flowconn_wb) &lt;- mysites_wb$site_name\ndist_flowconn_wb[upper.tri(dist_flowconn_wb, diag = TRUE)] &lt;- NA\n# dist_flowconn_wb\n\n# Staunton\ndist_flowconn_st &lt;- abs(upstreammat(mysites_st_sp_xy$seg, mysites_st_sp_xy$vert, flowline_st, flowconnected = TRUE)) / 1000\nrow.names(dist_flowconn_st) &lt;- mysites_st$site_name\ncolnames(dist_flowconn_st) &lt;- mysites_st$site_name\ndist_flowconn_st[upper.tri(dist_flowconn_st, diag = TRUE)] &lt;- NA\n# dist_flowconn_st\n\n# Paine\ndist_flowconn_pa &lt;- abs(upstreammat(mysites_pa_sp_xy$seg, mysites_pa_sp_xy$vert, flowline_pa, flowconnected = TRUE)) / 1000\nrow.names(dist_flowconn_pa) &lt;- mysites_pa$site_name\ncolnames(dist_flowconn_pa) &lt;- mysites_pa$site_name\ndist_flowconn_pa[upper.tri(dist_flowconn_pa, diag = TRUE)] &lt;- NA\n# dist_flowconn_pa\n\n# Flathead\ndist_flowconn_fl &lt;- abs(upstreammat(mysites_fl_sp_xy$seg, mysites_fl_sp_xy$vert, flowline_fl, flowconnected = TRUE)) / 1000\nrow.names(dist_flowconn_fl) &lt;- mysites_fl$site_name\ncolnames(dist_flowconn_fl) &lt;- mysites_fl$site_name\ndist_flowconn_fl[upper.tri(dist_flowconn_fl, diag = TRUE)] &lt;- NA\n# dist_flowconn_fl\n\n# Yellowstone\ndist_flowconn_ye &lt;- abs(upstreammat(mysites_ye_sp_xy$seg, mysites_ye_sp_xy$vert, flowline_ye, flowconnected = TRUE)) / 1000\nrow.names(dist_flowconn_ye) &lt;- mysites_ye$site_name\ncolnames(dist_flowconn_ye) &lt;- mysites_ye$site_name\ndist_flowconn_ye[upper.tri(dist_flowconn_ye, diag = TRUE)] &lt;- NA\n# dist_flowconn_ye\n\n# Snake\ndist_flowconn_sn &lt;- abs(upstreammat(mysites_sn_sp_xy$seg, mysites_sn_sp_xy$vert, flowline_sn, flowconnected = TRUE)) / 1000\nrow.names(dist_flowconn_sn) &lt;- mysites_sn$site_name\ncolnames(dist_flowconn_sn) &lt;- mysites_sn$site_name\ndist_flowconn_sn[upper.tri(dist_flowconn_sn, diag = TRUE)] &lt;- NA\n# dist_flowconn_sn\n\n# Donner Blitzen\ndist_flowconn_db &lt;- abs(upstreammat(mysites_db_sp_xy$seg, mysites_db_sp_xy$vert, flowline_db, flowconnected = TRUE)) / 1000\nrow.names(dist_flowconn_db) &lt;- mysites_db$site_name\ncolnames(dist_flowconn_db) &lt;- mysites_db$site_name\ndist_flowconn_db[upper.tri(dist_flowconn_db, diag = TRUE)] &lt;- NA\n# dist_flowconn_db\n\n\n\n\n\n3.5.3 Branching complexity\nRealized network/branching complexity, sensu Larsen et al. (2021)\nEuclidean distance ~ watercourse distance\n\n\nCode\ndisttib &lt;- tibble(basin = c(rep(\"West Brook\", times = length(as.numeric(dist_euclidean_wb / dist_watercourse_wb))),\n                            rep(\"Staunton River\", times = length(as.numeric(dist_euclidean_st / dist_watercourse_st))),\n                            rep(\"Paine Run\", times = length(as.numeric(dist_euclidean_pa / dist_watercourse_pa))),\n                            rep(\"Flathead River\", times = length(as.numeric(dist_euclidean_fl / dist_watercourse_fl))),\n                            rep(\"Yellowstone River\", times = length(as.numeric(dist_euclidean_ye / dist_watercourse_ye))),\n                            rep(\"Snake River\", times = length(as.numeric(dist_euclidean_sn / dist_watercourse_sn))),\n                            rep(\"Donner und Blitzen River\", times = length(as.numeric(dist_euclidean_db / dist_watercourse_db)))),\n       dist_euc = c(as.numeric(dist_euclidean_wb), \n                    as.numeric(dist_euclidean_st), \n                    as.numeric(dist_euclidean_pa), \n                    as.numeric(dist_euclidean_fl), \n                    as.numeric(dist_euclidean_ye), \n                    as.numeric(dist_euclidean_sn),\n                    as.numeric(dist_euclidean_db)),\n       dist_wat = c(as.numeric(dist_watercourse_wb), \n                    as.numeric(dist_watercourse_st),\n                    as.numeric(dist_watercourse_pa),\n                    as.numeric(dist_watercourse_fl),\n                    as.numeric(dist_watercourse_ye),\n                    as.numeric(dist_watercourse_sn),\n                    as.numeric(dist_watercourse_db)))\n\ndisttib %&gt;%\n  ggplot() +\n  geom_point(aes(x = dist_wat, y = dist_euc)) +\n  geom_abline(intercept = 0, slope = 1, linetype = 2) +\n  facet_wrap(~basin) +\n  xlab(\"Watercourse distance (km)\") + ylab(\"Euclidean distance (km)\") +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\n\nCode\nhull &lt;- disttib %&gt;% filter(!is.na(dist_euc), !is.na(dist_wat)) %&gt;% group_by(basin) %&gt;% slice(chull(dist_wat, dist_euc))\n\n\nggplot(data = disttib, aes(x = dist_wat, y = dist_euc, color = basin)) +\n  geom_point() +\n  geom_abline(intercept = 0, slope = 1, linetype = 2) +\n  geom_polygon(data = hull, aes(fill = basin), alpha = 0.5) +\n  #facet_wrap(~basin) +\n  xlab(\"Watercourse distance (km)\") + ylab(\"Euclidean distance (km)\") +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\n\nBoxplot of ratios (branching complexity)\n\n\nCode\ndedw_ratio &lt;- tibble(basin = c(rep(\"West Brook\", times = length(as.numeric(dist_euclidean_wb / dist_watercourse_wb))),\n                               rep(\"Staunton River\", times = length(as.numeric(dist_euclidean_st / dist_watercourse_st))),\n                               rep(\"Paine Run\", times = length(as.numeric(dist_euclidean_pa / dist_watercourse_pa))),\n                               rep(\"Flathead River\", times = length(as.numeric(dist_euclidean_fl / dist_watercourse_fl))),\n                               rep(\"Yellowstone River\", times = length(as.numeric(dist_euclidean_ye / dist_watercourse_ye))),\n                               rep(\"Snake River\", times = length(as.numeric(dist_euclidean_sn / dist_watercourse_sn))),\n                               rep(\"Donner und Blitzen River\", times = length(as.numeric(dist_euclidean_db / dist_watercourse_db)))),\n               dedw = c(as.numeric(dist_euclidean_wb / dist_watercourse_wb),\n                        as.numeric(dist_euclidean_st / dist_watercourse_st),\n                        as.numeric(dist_euclidean_pa / dist_watercourse_pa),\n                        as.numeric(dist_euclidean_fl / dist_watercourse_fl),\n                        as.numeric(dist_euclidean_ye / dist_watercourse_ye),\n                        as.numeric(dist_euclidean_sn / dist_watercourse_sn),\n                        as.numeric(dist_euclidean_db / dist_watercourse_db)))\n\n# plot\ndedw_ratio %&gt;% \n  mutate(basin = factor(basin, levels = c(\"West Brook\", \"Staunton River\", \"Paine Run\", \"Flathead River\", \"Yellowstone River\", \"Snake River\", \"Donner und Blitzen River\"))) %&gt;%\n  ggplot(aes(x = basin, y = dedw)) +\n  geom_boxplot(fill = \"grey\") +\n  ylab(\"Branching complexity (De/Dw)\") + xlab(\"Basin\") +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),\n        axis.text.x = element_text(angle = 45, hjust=1))\n\n\n\n\n\n\n\n\n\nCode\n#boxplot(dedw ~ basin, dedw, ylim = c(0,1), ylab = \"Branching complexity (De/Dw)\", labels = c(\"West Brook\"))\n\n\n\n\n3.5.4 Plot synchronograms\nCalculate Spearman’s r and time series distance\n\n\nCode\n## West Brook\n# basin objects\nmysites &lt;- mysites_wb\ndist_euclidean &lt;- dist_euclidean_wb\n# grab \nsitesss &lt;- mysites$site_name\ndat_clean2 &lt;- dat_clean %&gt;% filter(site_name %in% sitesss, Month %in% c(7:9))\nyrs &lt;- unique(dat_clean2$WaterYear)[c(1:4)]\n# set up empty arrays\nsynch_arr_sp &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\nsynch_arr_ts &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\n# fill arrays with Spearman's correlation coef and time series distance (euclidean)\nfor(k in 1:length(yrs)) {\n  for(i in 1:length(sitesss)) {\n    for(j in 1:length(sitesss)) {\n      dd &lt;- dat_clean2 %&gt;%\n        filter(WaterYear == yrs[k], site_name %in% c(sitesss[i], sitesss[j])) %&gt;%\n        select(date, site_name, logYield) %&gt;%\n        spread(key = site_name, value = logYield) \n      dd &lt;- dd[complete.cases(dd),]\n      if(dim(dd)[1] &lt;= 0.9*92 | dim(dd)[2] == 2) next\n      synch_arr_sp[i,j,k] &lt;- cor(dd[,sitesss[i]], dd[,sitesss[j]], use = \"complete.obs\", method = \"spearman\")\n      synch_arr_ts[i,j,k] &lt;- EuclideanDistance(unlist(dd[,sitesss[i]]), unlist(dd[,sitesss[j]]))\n    }\n  }\n}\n# set top triangles to NA\nfor(k in 1:length(yrs)) {\n  synch_arr_sp[,,k] &lt;- ifelse(synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE) == 0, NA, synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE))\n  synch_arr_ts[,,k] &lt;- ifelse(synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE) == 0, NA, synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE))\n}\nsynch_arr_sp_wb &lt;- synch_arr_sp\nsynch_arr_ts_wb &lt;- synch_arr_ts\n\n\n# Staunton\n# basin objects\nmysites &lt;- mysites_st\ndist_euclidean &lt;- dist_euclidean_st\n# grab \nsitesss &lt;- mysites$site_name\ndat_clean2 &lt;- dat_clean %&gt;% filter(site_name %in% sitesss, Month %in% c(7:9))\nyrs &lt;- unique(dat_clean2$WaterYear)[c(1:3)]\n# set up empty arrays\nsynch_arr_sp &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\nsynch_arr_ts &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\n# fill arrays with Spearman's correlation coef and time series distance (euclidean)\nfor(k in 1:length(yrs)) {\n  for(i in 1:length(sitesss)) {\n    for(j in 1:length(sitesss)) {\n      dd &lt;- dat_clean2 %&gt;%\n        filter(WaterYear == yrs[k], site_name %in% c(sitesss[i], sitesss[j])) %&gt;%\n        select(date, site_name, logYield) %&gt;%\n        spread(key = site_name, value = logYield) \n      dd &lt;- dd[complete.cases(dd),]\n      if(dim(dd)[1] &lt;= 0.9*92 | dim(dd)[2] == 2) next\n      synch_arr_sp[i,j,k] &lt;- cor(dd[,sitesss[i]], dd[,sitesss[j]], use = \"complete.obs\", method = \"spearman\")\n      synch_arr_ts[i,j,k] &lt;- EuclideanDistance(unlist(dd[,sitesss[i]]), unlist(dd[,sitesss[j]]))\n    }\n  }\n}\n# set top triangles to NA\nfor(k in 1:length(yrs)) {\n  synch_arr_sp[,,k] &lt;- ifelse(synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE) == 0, NA, synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE))\n  synch_arr_ts[,,k] &lt;- ifelse(synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE) == 0, NA, synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE))\n}\nsynch_arr_sp_st &lt;- synch_arr_sp\nsynch_arr_ts_st &lt;- synch_arr_ts\n\n\n# Paine\n# basin objects\nmysites &lt;- mysites_pa\ndist_euclidean &lt;- dist_euclidean_pa\n# grab \nsitesss &lt;- mysites$site_name\ndat_clean2 &lt;- dat_clean %&gt;% filter(site_name %in% sitesss, Month %in% c(7:9))\nyrs &lt;- unique(dat_clean2$WaterYear)[2]\n# set up empty arrays\nsynch_arr_sp &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\nsynch_arr_ts &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\n# fill arrays with Spearman's correlation coef and time series distance (euclidean)\nfor(k in 1:length(yrs)) {\n  for(i in 1:length(sitesss)) {\n    for(j in 1:length(sitesss)) {\n      dd &lt;- dat_clean2 %&gt;%\n        filter(WaterYear == yrs[k], site_name %in% c(sitesss[i], sitesss[j])) %&gt;%\n        select(date, site_name, logYield) %&gt;%\n        spread(key = site_name, value = logYield) \n      dd &lt;- dd[complete.cases(dd),]\n      if(dim(dd)[1] &lt;= 0.9*92 | dim(dd)[2] == 2) next\n      synch_arr_sp[i,j,k] &lt;- cor(dd[,sitesss[i]], dd[,sitesss[j]], use = \"complete.obs\", method = \"spearman\")\n      synch_arr_ts[i,j,k] &lt;- EuclideanDistance(unlist(dd[,sitesss[i]]), unlist(dd[,sitesss[j]]))\n    }\n  }\n}\n# set top triangles to NA\nfor(k in 1:length(yrs)) {\n  synch_arr_sp[,,k] &lt;- ifelse(synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE) == 0, NA, synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE))\n  synch_arr_ts[,,k] &lt;- ifelse(synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE) == 0, NA, synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE))\n}\nsynch_arr_sp_pa &lt;- synch_arr_sp\nsynch_arr_ts_pa &lt;- synch_arr_ts\n\n\n# Flathead\n# basin objects\nmysites &lt;- mysites_fl\ndist_euclidean &lt;- dist_euclidean_fl\n# grab \nsitesss &lt;- mysites$site_name\ndat_clean2 &lt;- dat_clean %&gt;% filter(site_name %in% sitesss, Month %in% c(7:9))\nyrs &lt;- unique(dat_clean2$WaterYear)[c(2:5)]\n# set up empty arrays\nsynch_arr_sp &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\nsynch_arr_ts &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\n# fill arrays with Spearman's correlation coef and time series distance (euclidean)\nfor(k in 1:length(yrs)) {\n  for(i in 1:length(sitesss)) {\n    for(j in 1:length(sitesss)) {\n      dd &lt;- dat_clean2 %&gt;%\n        filter(WaterYear == yrs[k], site_name %in% c(sitesss[i], sitesss[j])) %&gt;%\n        select(date, site_name, logYield) %&gt;%\n        spread(key = site_name, value = logYield) \n      dd &lt;- dd[complete.cases(dd),]\n      if(dim(dd)[1] &lt;= 0.9*92 | dim(dd)[2] == 2) next\n      synch_arr_sp[i,j,k] &lt;- cor(dd[,sitesss[i]], dd[,sitesss[j]], use = \"complete.obs\", method = \"spearman\")\n      synch_arr_ts[i,j,k] &lt;- EuclideanDistance(unlist(dd[,sitesss[i]]), unlist(dd[,sitesss[j]]))\n    }\n  }\n}\n# set top triangles to NA\nfor(k in 1:length(yrs)) {\n  synch_arr_sp[,,k] &lt;- ifelse(synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE) == 0, NA, synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE))\n  synch_arr_ts[,,k] &lt;- ifelse(synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE) == 0, NA, synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE))\n}\nsynch_arr_sp_fl &lt;- synch_arr_sp\nsynch_arr_ts_fl &lt;- synch_arr_ts\n\n\n# Yellowstone\n# basin objects\nmysites &lt;- mysites_ye\ndist_euclidean &lt;- dist_euclidean_ye\n# grab \nsitesss &lt;- mysites$site_name\ndat_clean2 &lt;- dat_clean %&gt;% filter(site_name %in% sitesss, Month %in% c(7:9))\nyrs &lt;- unique(dat_clean2$WaterYear)[c(2,3,5)]\n# set up empty arrays\nsynch_arr_sp &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\nsynch_arr_ts &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\n# fill arrays with Spearman's correlation coef and time series distance (euclidean)\nfor(k in 1:length(yrs)) {\n  for(i in 1:length(sitesss)) {\n    for(j in 1:length(sitesss)) {\n      dd &lt;- dat_clean2 %&gt;%\n        filter(WaterYear == yrs[k], site_name %in% c(sitesss[i], sitesss[j])) %&gt;%\n        select(date, site_name, logYield) %&gt;%\n        spread(key = site_name, value = logYield) \n      dd &lt;- dd[complete.cases(dd),]\n      if(dim(dd)[1] &lt;= 0.9*92 | dim(dd)[2] == 2) next\n      synch_arr_sp[i,j,k] &lt;- cor(dd[,sitesss[i]], dd[,sitesss[j]], use = \"complete.obs\", method = \"spearman\")\n      synch_arr_ts[i,j,k] &lt;- EuclideanDistance(unlist(dd[,sitesss[i]]), unlist(dd[,sitesss[j]]))\n    }\n  }\n}\n# set top triangles to NA\nfor(k in 1:length(yrs)) {\n  synch_arr_sp[,,k] &lt;- ifelse(synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE) == 0, NA, synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE))\n  synch_arr_ts[,,k] &lt;- ifelse(synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE) == 0, NA, synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE))\n}\nsynch_arr_sp_ye &lt;- synch_arr_sp\nsynch_arr_ts_ye &lt;- synch_arr_ts\n\n\n# Snake\n# basin objects\nmysites &lt;- mysites_sn\ndist_euclidean &lt;- dist_euclidean_sn\n# grab \nsitesss &lt;- mysites$site_name\ndat_clean2 &lt;- dat_clean %&gt;% filter(site_name %in% sitesss, Month %in% c(7:9))\nyrs &lt;- unique(dat_clean2$WaterYear)[c(1,3,4)]\n# set up empty arrays\nsynch_arr_sp &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\nsynch_arr_ts &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\n# fill arrays with Spearman's correlation coef and time series distance (euclidean)\nfor(k in 1:length(yrs)) {\n  for(i in 1:length(sitesss)) {\n    for(j in 1:length(sitesss)) {\n      dd &lt;- dat_clean2 %&gt;%\n        filter(WaterYear == yrs[k], site_name %in% c(sitesss[i], sitesss[j])) %&gt;%\n        select(date, site_name, logYield) %&gt;%\n        spread(key = site_name, value = logYield) \n      dd &lt;- dd[complete.cases(dd),]\n      if(dim(dd)[1] &lt;= 0.9*92 | dim(dd)[2] == 2) next\n      synch_arr_sp[i,j,k] &lt;- cor(dd[,sitesss[i]], dd[,sitesss[j]], use = \"complete.obs\", method = \"spearman\")\n      synch_arr_ts[i,j,k] &lt;- EuclideanDistance(unlist(dd[,sitesss[i]]), unlist(dd[,sitesss[j]]))\n    }\n  }\n}\n# set top triangles to NA\nfor(k in 1:length(yrs)) {\n  synch_arr_sp[,,k] &lt;- ifelse(synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE) == 0, NA, synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE))\n  synch_arr_ts[,,k] &lt;- ifelse(synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE) == 0, NA, synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE))\n}\nsynch_arr_sp_sn &lt;- synch_arr_sp\nsynch_arr_ts_sn &lt;- synch_arr_ts\n\n\n# Donner Blitzen\n# basin objects\nmysites &lt;- mysites_db\ndist_euclidean &lt;- dist_euclidean_db\n# grab \nsitesss &lt;- mysites$site_name\ndat_clean2 &lt;- dat_clean %&gt;% filter(site_name %in% sitesss, Month %in% c(7:9))\nyrs &lt;- unique(dat_clean2$WaterYear)[c(2:4)]\n# set up empty arrays\nsynch_arr_sp &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\nsynch_arr_ts &lt;- array(data = NA, dim = c(dim(dist_euclidean)[1], dim(dist_euclidean)[2], length(yrs)), \n                      dimnames = list(mysites$site_name, mysites$site_name, yrs))\n# fill arrays with Spearman's correlation coef and time series distance (euclidean)\nfor(k in 1:length(yrs)) {\n  for(i in 1:length(sitesss)) {\n    for(j in 1:length(sitesss)) {\n      dd &lt;- dat_clean2 %&gt;%\n        filter(WaterYear == yrs[k], site_name %in% c(sitesss[i], sitesss[j])) %&gt;%\n        select(date, site_name, logYield) %&gt;%\n        spread(key = site_name, value = logYield) \n      dd &lt;- dd[complete.cases(dd),]\n      if(dim(dd)[1] &lt;= 0.9*92 | dim(dd)[2] == 2) next\n      synch_arr_sp[i,j,k] &lt;- cor(dd[,sitesss[i]], dd[,sitesss[j]], use = \"complete.obs\", method = \"spearman\")\n      synch_arr_ts[i,j,k] &lt;- EuclideanDistance(unlist(dd[,sitesss[i]]), unlist(dd[,sitesss[j]]))\n    }\n  }\n}\n# set top triangles to NA\nfor(k in 1:length(yrs)) {\n  synch_arr_sp[,,k] &lt;- ifelse(synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE) == 0, NA, synch_arr_sp[,,k] * !upper.tri(synch_arr_sp[,,k], diag = TRUE))\n  synch_arr_ts[,,k] &lt;- ifelse(synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE) == 0, NA, synch_arr_ts[,,k] * !upper.tri(synch_arr_ts[,,k], diag = TRUE))\n}\nsynch_arr_sp_db &lt;- synch_arr_sp\nsynch_arr_ts_db &lt;- synch_arr_ts\n\n\nCreate plotting function\n\n\nCode\nfluvsynchfun &lt;- function(subbas, spear, ts, dist_euc, dist_wat, dist_flow) {\n  synch_arr_sp &lt;- spear\n  synch_arr_ts &lt;- ts\n  dist_euclidean &lt;- dist_euc\n  dist_watercourse &lt;- dist_wat\n  dist_flowconn &lt;- dist_flow\n  \n  synchtib &lt;- tibble(basin = rep(subbas, times = length(as.numeric(synch_arr_sp))),\n                   wateryear = sort(rep(as.numeric(dimnames(synch_arr_sp)[[3]]), times = dim(synch_arr_sp)[1]*dim(synch_arr_sp)[2])),\n                   synch_sp = as.numeric(synch_arr_sp),\n                   synch_ts = as.numeric(synch_arr_ts),\n                   euclidean = rep(as.numeric(dist_euclidean), times = dim(synch_arr_sp)[3]),\n                   watercourse = rep(as.numeric(dist_watercourse), times = dim(synch_arr_sp)[3]),\n                   flowconnected = rep(as.numeric(dist_flowconn), times = dim(synch_arr_sp)[3])) %&gt;% \n  gather(euclidean:flowconnected, key = \"distance\", value = \"value\")\n\n# Spearman correlation\nfs_sp &lt;- synchtib %&gt;%\n  mutate(distance = factor(distance, levels = c(\"flowconnected\", \"watercourse\", \"euclidean\"))) %&gt;%\n  ggplot(aes(x = value, y = synch_sp, color = distance, fill = distance, group = distance)) +\n  geom_smooth(alpha = 0.2, se = FALSE, span = 1) +\n  geom_point(alpha = 0.5) +\n  scale_color_manual(values = c(\"blue\", \"purple\", \"gold1\")) +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"gold1\")) +\n  facet_wrap(~wateryear, nrow = 1) +\n  ylab(\"Spearman's corr\") + xlab(\"Distance (km)\") +\n  #coord_cartesian(ylim = c(0,1)) +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title.x=element_blank())\n\n# Time series distance (euclidean)\nfs_ts &lt;- synchtib %&gt;%\n  mutate(distance = factor(distance, levels = c(\"flowconnected\", \"watercourse\", \"euclidean\"))) %&gt;%\n  ggplot(aes(x = value, y = synch_ts, color = distance, fill = distance, group = distance)) +\n  geom_smooth(alpha = 0.2, se = FALSE, span = 1) +\n  geom_point(alpha = 0.5) +\n  scale_color_manual(values = c(\"blue\", \"purple\", \"gold1\")) +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"gold1\")) +\n  facet_wrap(~wateryear, nrow = 1) +\n  ylab(\"TS distance\") + xlab(\"Distance (km)\") +\n  #coord_cartesian(ylim = c(0,20)) +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title.x=element_blank())\n\n# \n# # Spearman correlation\n# fs_sp2 &lt;- synchtib %&gt;%\n#   filter(distance %in% c(\"dist_flo\")) %&gt;%\n#   mutate(distance = factor(distance, levels = c(\"dist_flo\", \"dist_dis\"))) %&gt;%\n#   ggplot(aes(x = value, y = synch_sp, color = distance, fill = distance, group = distance)) +\n#   geom_smooth(alpha = 0.2) +\n#   geom_point(alpha = 0.5) +\n#   scale_color_manual(values = c(\"blue\", \"darkorange\")) +\n#   scale_fill_manual(values = c(\"blue\", \"darkorange\")) +\n#   facet_wrap(~wateryear, nrow = 1) +\n#   ylab(\"Spearman's corr.\") + xlab(\"Distance (km)\") +\n#   coord_cartesian(ylim = c(0,1)) +\n#   theme_bw() +\n#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title.x=element_blank())\n# \n# # Time series distance (euclidean)\n# fs_ts2 &lt;- synchtib %&gt;%\n#   filter(distance %in% c(\"dist_flo\", \"dist_dis\")) %&gt;%\n#   mutate(distance = factor(distance, levels = c(\"dist_flo\", \"dist_dis\"))) %&gt;%\n#   ggplot(aes(x = value, y = synch_ts, color = distance, fill = distance, group = distance)) +\n#   geom_smooth(alpha = 0.2) +\n#   geom_point(alpha = 0.5) +\n#   scale_color_manual(values = c(\"blue\", \"darkorange\")) +\n#   scale_fill_manual(values = c(\"blue\", \"darkorange\")) +\n#   facet_wrap(~wateryear, nrow = 1) +\n#   ylab(\"TS distance\") + xlab(\"Distance (km)\") +\n#   coord_cartesian(ylim = c(0,20)) +\n#   theme_bw() +\n#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title.x=element_blank())\n# \nmyplot &lt;- ggarrange(fs_sp, fs_ts, ncol = 1)\nannotate_figure(myplot, bottom = text_grob(\"Distance (km)\"))\n}\n\n\nPlot fluvial synchrograms\n\nWest BrookStauntonPaineFlatheadYellowstoneSnakeDonner-Blitzen\n\n\n\n\nCode\nfluvsynchfun(subbas = \"West Brook\", spear = synch_arr_sp_wb, ts = synch_arr_ts_wb,\n             dist_euc = dist_euclidean_wb, dist_wat = dist_watercourse_wb, dist_flow = dist_flowconn_wb)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfluvsynchfun(subbas = \"Staunton River\", spear = synch_arr_sp_st, ts = synch_arr_ts_st,\n             dist_euc = dist_euclidean_st, dist_wat = dist_watercourse_st, dist_flow = dist_flowconn_st)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfluvsynchfun(subbas = \"Paine Run\", spear = synch_arr_sp_pa, ts = synch_arr_ts_pa,\n             dist_euc = dist_euclidean_pa, dist_wat = dist_watercourse_pa, dist_flow = dist_flowconn_pa)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfluvsynchfun(subbas = \"Flathead River\", spear = synch_arr_sp_fl, ts = synch_arr_ts_fl,\n             dist_euc = dist_euclidean_fl, dist_wat = dist_watercourse_fl, dist_flow = dist_flowconn_fl)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfluvsynchfun(subbas = \"Yellowstone River\", spear = synch_arr_sp_ye, ts = synch_arr_ts_ye,\n             dist_euc = dist_euclidean_ye, dist_wat = dist_watercourse_ye, dist_flow = dist_flowconn_ye)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfluvsynchfun(subbas = \"Snake River\", spear = synch_arr_sp_sn, ts = synch_arr_ts_sn,\n             dist_euc = dist_euclidean_sn, dist_wat = dist_watercourse_sn, dist_flow = dist_flowconn_sn)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfluvsynchfun(subbas = \"Donner und Blitzen River\", spear = synch_arr_sp_db, ts = synch_arr_ts_db,\n             dist_euc = dist_euclidean_db, dist_wat = dist_watercourse_db, dist_flow = dist_flowconn_db)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsynchtib &lt;- tibble(basin = c(rep(\"West Brook\", times = length(as.numeric(synch_mat))),\n                             rep(\"Snake River\", times = length(as.numeric(synch_mat_snake)))),\n                   synch_sp = c(as.numeric(synch_mat_sp), as.numeric(synch_mat_snake_sp)),\n                   synch_ts = c(as.numeric(synch_mat_ts), as.numeric(synch_mat_snake_ts)),\n                   dist_euc = c(as.numeric(dist_euclidean), as.numeric(dist_euclidean_snake)),\n                   dist_wat = c(as.numeric(dist_watercourse), as.numeric(dist_watercourse_snake)),\n                   dist_flo = c(as.numeric(dist_flowconn), as.numeric(dist_flowconn_snake)),\n                   dist_dis = c(as.numeric(dist_flowdisconn), as.numeric(dist_flowdisconn_snake))) %&gt;% \n  gather(dist_euc:dist_dis, key = \"distance\", value = \"value\")\n\n# Spearman correlation\nsynchtib %&gt;%\n  filter(!distance %in% c(\"dist_dis\")) %&gt;%\n  mutate(distance = factor(distance, levels = c(\"dist_flo\", \"dist_wat\", \"dist_euc\"))) %&gt;%\n  ggplot(aes(x = value, y = synch_sp, color = distance, fill = distance, group = distance)) +\n  geom_smooth(alpha = 0.3) +\n  geom_point(aes(x = jitter(value, factor = 300), y = jitter(synch_sp, factor = 300))) +\n  scale_color_manual(values = c(\"blue\", \"purple\", \"gold1\")) +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"gold1\")) +\n  facet_wrap(~basin, scales = \"free_x\") +\n  ylab(\"Spearman's correlation\") + xlab(\"Distance (km)\") +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n# Time series distance (euclidean)\nsynchtib %&gt;%\n  filter(!distance %in% c(\"dist_dis\")) %&gt;%\n  mutate(distance = factor(distance, levels = c(\"dist_flo\", \"dist_wat\", \"dist_euc\")))%&gt;%\n  ggplot(aes(x = value, y = synch_ts, color = distance, fill = distance, group = distance)) +\n  geom_smooth(alpha = 0.3) +\n  geom_point(aes(x = jitter(value, factor = 200), y = jitter(synch_ts, factor = 200))) +\n  scale_color_manual(values = c(\"blue\", \"purple\", \"gold1\")) +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"gold1\")) +\n  facet_wrap(~basin, scales = \"free_x\") +\n  ylab(\"Time series distance\") + xlab(\"Distance (km)\") +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n\n# Spearman correlation\nsynchtib %&gt;%\n  filter(distance %in% c(\"dist_flo\", \"dist_dis\")) %&gt;%\n  mutate(distance = factor(distance, levels = c(\"dist_flo\", \"dist_dis\"))) %&gt;%\n  ggplot(aes(x = value, y = synch_sp, color = distance, fill = distance, group = distance)) +\n  geom_smooth(alpha = 0.3) +\n  geom_point(aes(x = jitter(value, factor = 300), y = jitter(synch_sp, factor = 300))) +\n  scale_color_manual(values = c(\"blue\", \"darkorange\")) +\n  scale_fill_manual(values = c(\"blue\", \"darkorange\")) +\n  facet_wrap(~basin, scales = \"free_x\") +\n  ylab(\"Spearman's correlation\") + xlab(\"Distance (km)\") +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n# Time series distance (euclidean)\nsynchtib %&gt;%\n  filter(distance %in% c(\"dist_flo\", \"dist_dis\")) %&gt;%\n  mutate(distance = factor(distance, levels = c(\"dist_flo\", \"dist_dis\"))) %&gt;%\n  ggplot(aes(x = value, y = synch_ts, color = distance, fill = distance, group = distance)) +\n  geom_smooth(alpha = 0.3) +\n  geom_point(aes(x = jitter(value, factor = 200), y = jitter(synch_ts, factor = 200))) +\n  scale_color_manual(values = c(\"blue\", \"darkorange\")) +\n  scale_fill_manual(values = c(\"blue\", \"darkorange\")) +\n  facet_wrap(~basin, scales = \"free_x\") +\n  ylab(\"Time series distance\") + xlab(\"Distance (km)\") +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n\n\n\nCode\ntibble(basin = c(rep(\"West Brook\", times = length(as.numeric(synch_mat))),\n                 rep(\"Snake River\", times = length(as.numeric(synch_mat_snake)))),\n       synch_sp = c(as.numeric(synch_mat_sp), as.numeric(synch_mat_snake_sp)),\n       synch_ts = c(as.numeric(synch_mat_ts), as.numeric(synch_mat_snake_ts)),\n       dist_euc = c(as.numeric(dist_euclidean), as.numeric(dist_euclidean_snake)),\n       dist_wat = c(as.numeric(dist_watercourse), as.numeric(dist_watercourse_snake)),\n       dist_flo = c(as.numeric(dist_flowconn), as.numeric(dist_flowconn_snake)),\n       dist_dis = c(as.numeric(dist_flowdisconn), as.numeric(dist_flowdisconn_snake))) %&gt;%\n  mutate(dedw = dist_euc / dist_wat) %&gt;%\n  ggplot(aes(x = dedw, y = synch_ts)) +\n  geom_smooth(alpha = 0.3, method = \"lm\") +\n  geom_point(aes(x = dedw, y = synch_ts)) +\n  facet_wrap(~basin, scales = \"free_x\") +\n  ylab(\"Time series distance\") + xlab(\"de/dw\") +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\ntibble(basin = c(rep(\"West Brook\", times = length(as.numeric(synch_mat))),\n                 rep(\"Snake River\", times = length(as.numeric(synch_mat_snake)))),\n       synch_sp = c(as.numeric(synch_mat_sp), as.numeric(synch_mat_snake_sp)),\n       synch_ts = c(as.numeric(synch_mat_ts), as.numeric(synch_mat_snake_ts)),\n       dist_euc = c(as.numeric(dist_euclidean), as.numeric(dist_euclidean_snake)),\n       dist_wat = c(as.numeric(dist_watercourse), as.numeric(dist_watercourse_snake)),\n       dist_flo = c(as.numeric(dist_flowconn), as.numeric(dist_flowconn_snake)),\n       dist_dis = c(as.numeric(dist_flowdisconn), as.numeric(dist_flowdisconn_snake))) %&gt;%\n  mutate(dedw = dist_euc / dist_wat) %&gt;%\n  ggplot(aes(x = dedw, y = synch_sp)) +\n  geom_smooth(alpha = 0.3, method = \"lm\") +\n  geom_point(aes(x = dedw, y = synch_sp)) +\n  facet_wrap(~basin, scales = \"free_x\") +\n  ylab(\"Spearman correlation\") + xlab(\"de/dw\") +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n\n\n\n3.5.5 Combined figure\nPlotting function\n\n\nCode\nfluvsynchfun_mod &lt;- function(subbas, spear, ts, dist_euc, dist_wat, dist_flow) {\n  synch_arr_sp &lt;- spear\n  synch_arr_ts &lt;- ts\n  dist_euclidean &lt;- dist_euc\n  dist_watercourse &lt;- dist_wat\n  dist_flowconn &lt;- dist_flow\n  \n  synchtib &lt;- tibble(basin = rep(subbas, times = length(as.numeric(synch_arr_sp))),\n                   wateryear = sort(rep(as.numeric(dimnames(synch_arr_sp)[[3]]), times = dim(synch_arr_sp)[1]*dim(synch_arr_sp)[2])),\n                   synch_sp = as.numeric(synch_arr_sp),\n                   synch_ts = as.numeric(synch_arr_ts),\n                   euclidean = rep(as.numeric(dist_euclidean), times = dim(synch_arr_sp)[3]),\n                   watercourse = rep(as.numeric(dist_watercourse), times = dim(synch_arr_sp)[3]),\n                   flowconnected = rep(as.numeric(dist_flowconn), times = dim(synch_arr_sp)[3])) %&gt;% \n  gather(euclidean:flowconnected, key = \"distance\", value = \"value\")\n\n# Spearman correlation\n# fs_sp &lt;- synchtib %&gt;%\n#   filter(distance != \"watercourse\") %&gt;%\n#   mutate(distance = factor(distance, levels = c(\"flowconnected\", \"watercourse\", \"euclidean\"))) %&gt;%\n#   ggplot(aes(x = value, y = synch_sp, color = distance, fill = distance, group = distance)) +\n#   geom_smooth(alpha = 0.2, se = FALSE) +\n#   geom_point(alpha = 0.5) +\n#   scale_color_manual(values = c(\"blue\", \"purple\")) +\n#   scale_fill_manual(values = c(\"blue\", \"purple\")) +\n#   facet_wrap(~wateryear, nrow = 1) +\n#   ylab(\"Spearman's corr\") + xlab(\"Distance (km)\") +\n#   #coord_cartesian(ylim = c(0,1)) +\n#   theme_bw() +\n#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title.x=element_blank())\n\n# Time series distance (euclidean)\nfs_ts &lt;- synchtib %&gt;%\n  filter(distance != \"watercourse\") %&gt;%\n  mutate(distance = factor(distance, levels = c(\"euclidean\", \"flowconnected\"))) %&gt;%\n  ggplot(aes(x = value, y = synch_ts, color = distance, fill = distance, group = distance)) +\n  geom_smooth(alpha = 0.2, span = 1, span = 1) +\n  geom_point(alpha = 0.2) +\n  scale_color_manual(values = c(\"blue\", \"darkorange\")) +\n  scale_fill_manual(values = c(\"blue\", \"darkorange\")) +\n  ggh4x::facet_wrap2(~wateryear, nrow = 1, ncol = 4, trim_blank = FALSE) +\n  ylab(\"\") + xlab(\"\") + ggtitle(subbas) +\n  #coord_cartesian(ylim = c(0,20)) +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), \n        axis.title.x=element_blank(), axis.title.y = element_blank())\n\n# myplot &lt;- ggarrange(fs_sp, fs_ts, ncol = 1)\n# annotate_figure(myplot, bottom = text_grob(\"Distance (km)\"))\nprint(fs_ts)\n}\n\n\n\n\nCode\nggarrange(fluvsynchfun_mod(subbas = \"West Brook\", spear = synch_arr_sp_wb, ts = synch_arr_ts_wb,\n                                dist_euc = dist_euclidean_wb, dist_wat = dist_watercourse_wb, dist_flow = dist_flowconn_wb),\n               fluvsynchfun_mod(subbas = \"Staunton River\", spear = synch_arr_sp_st, ts = synch_arr_ts_st,\n                                dist_euc = dist_euclidean_st, dist_wat = dist_watercourse_st, dist_flow = dist_flowconn_st),\n               fluvsynchfun_mod(subbas = \"Paine Run\", spear = synch_arr_sp_pa, ts = synch_arr_ts_pa,\n                                dist_euc = dist_euclidean_pa, dist_wat = dist_watercourse_pa, dist_flow = dist_flowconn_pa),\n               fluvsynchfun_mod(subbas = \"Flathead River\", spear = synch_arr_sp_fl, ts = synch_arr_ts_fl,\n                                dist_euc = dist_euclidean_fl, dist_wat = dist_watercourse_fl, dist_flow = dist_flowconn_fl),\n               fluvsynchfun_mod(subbas = \"Yellowstone River\", spear = synch_arr_sp_ye, ts = synch_arr_ts_ye,\n                                dist_euc = dist_euclidean_ye, dist_wat = dist_watercourse_ye, dist_flow = matrix(NA, nrow = nrow(dist_flowconn_ye), ncol = ncol(dist_flowconn_ye))),\n               fluvsynchfun_mod(subbas = \"Snake River\", spear = synch_arr_sp_sn, ts = synch_arr_ts_sn,\n                                dist_euc = dist_euclidean_sn, dist_wat = dist_watercourse_sn, dist_flow = dist_flowconn_sn),\n               fluvsynchfun_mod(subbas = \"Donner und Blitzen River\", spear = synch_arr_sp_db, ts = synch_arr_ts_db,\n                                dist_euc = dist_euclidean_db, dist_wat = dist_watercourse_db, dist_flow = dist_flowconn_db),\n               ncol = 1\n               )\n\n\n\n\n\n\n\n\n\nCode\n# jpeg(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Presentation figs/FluvialSynchrograms.jpg\", width = 7, height = 12, units = \"in\", res = 1000)\n# annotate_figure(p1, bottom = \"Distance (km)\", left = \"Time series distance\")\n# dev.off()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Spatiotemporal Variation</span>"
    ]
  }
]